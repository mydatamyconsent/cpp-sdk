/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FinancialAccount.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_FinancialAccount_H_
#define MYDATAMYCONSENT_MODELS_FinancialAccount_H_


#include "MyDataMyConsent/ModelBase.h"

#include "MyDataMyConsent/model/Activity.h"
#include "MyDataMyConsent/model/SharedWith.h"
#include "MyDataMyConsent/model/ApprovedConsentRequest.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace mydatamyconsent {
namespace models {

class SharedWith;
class Activity;
class ApprovedConsentRequest;

/// <summary>
/// 
/// </summary>
class  FinancialAccount
    : public ModelBase
{
public:
    FinancialAccount();
    virtual ~FinancialAccount();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// FinancialAccount members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIssuer() const;
    bool issuerIsSet() const;
    void unsetIssuer();

    void setIssuer(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLogoUrl() const;
    bool logoUrlIsSet() const;
    void unsetLogoUrl();

    void setLogoUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategoryId() const;
    bool categoryIdIsSet() const;
    void unsetCategoryId();

    void setCategoryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategoryName() const;
    bool categoryNameIsSet() const;
    void unsetCategoryName();

    void setCategoryName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccountName() const;
    bool accountNameIsSet() const;
    void unsetAccountName();

    void setAccountName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccountLogoUrl() const;
    bool accountLogoUrlIsSet() const;
    void unsetAccountLogoUrl();

    void setAccountLogoUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBalance() const;
    bool balanceIsSet() const;
    void unsetBalance();

    void setBalance(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBalanceType() const;
    bool balanceTypeIsSet() const;
    void unsetBalanceType();

    void setBalanceType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsShared() const;
    bool isSharedIsSet() const;
    void unsetIsShared();

    void setIsShared(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SharedWith>>& getSharedWith();
    bool sharedWithIsSet() const;
    void unsetSharedWith();

    void setSharedWith(const std::vector<std::shared_ptr<SharedWith>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsReceived() const;
    bool isReceivedIsSet() const;
    void unsetIsReceived();

    void setIsReceived(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpiresAtUtc() const;
    bool expiresAtUtcIsSet() const;
    void unsetExpiresAtUtc();

    void setExpiresAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Activity>>& getActivities();
    bool activitiesIsSet() const;
    void unsetActivities();

    void setActivities(const std::vector<std::shared_ptr<Activity>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ApprovedConsentRequest>>& getApprovedConsentRequests();
    bool approvedConsentRequestsIsSet() const;
    void unsetApprovedConsentRequests();

    void setApprovedConsentRequests(const std::vector<std::shared_ptr<ApprovedConsentRequest>>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Issuer;
    bool m_IssuerIsSet;
    utility::string_t m_LogoUrl;
    bool m_LogoUrlIsSet;
    utility::string_t m_CategoryId;
    bool m_CategoryIdIsSet;
    utility::string_t m_CategoryName;
    bool m_CategoryNameIsSet;
    utility::string_t m_AccountName;
    bool m_AccountNameIsSet;
    utility::string_t m_AccountLogoUrl;
    bool m_AccountLogoUrlIsSet;
    utility::string_t m_Balance;
    bool m_BalanceIsSet;
    utility::string_t m_BalanceType;
    bool m_BalanceTypeIsSet;
    bool m_IsShared;
    bool m_IsSharedIsSet;
    std::vector<std::shared_ptr<SharedWith>> m_SharedWith;
    bool m_SharedWithIsSet;
    bool m_IsReceived;
    bool m_IsReceivedIsSet;
    utility::datetime m_ExpiresAtUtc;
    bool m_ExpiresAtUtcIsSet;
    std::vector<std::shared_ptr<Activity>> m_Activities;
    bool m_ActivitiesIsSet;
    std::vector<std::shared_ptr<ApprovedConsentRequest>> m_ApprovedConsentRequests;
    bool m_ApprovedConsentRequestsIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_FinancialAccount_H_ */
