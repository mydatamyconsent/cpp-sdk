/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataConsentRequest.h
 *
 * Data consent request details.
 */

#ifndef MYDATAMYCONSENT_MODELS_DataConsentRequest_H_
#define MYDATAMYCONSENT_MODELS_DataConsentRequest_H_


#include "MyDataMyConsent/ModelBase.h"

#include "MyDataMyConsent/model/ConsentRequestReceiver.h"
#include "MyDataMyConsent/model/Life.h"
#include <cpprest/details/basic_types.h>
#include "MyDataMyConsent/model/DataConsentStatus.h"
#include <vector>
#include "MyDataMyConsent/model/CollectibleTypes.h"

namespace mydatamyconsent {
namespace models {

class Life;
class ConsentRequestReceiver;

/// <summary>
/// Data consent request details.
/// </summary>
class  DataConsentRequest
    : public ModelBase
{
public:
    DataConsentRequest();
    virtual ~DataConsentRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DataConsentRequest members

    /// <summary>
    /// Data consent request id.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Data consent template id.
    /// </summary>
    utility::string_t getTemplateId() const;
    bool templateIdIsSet() const;
    void unsetTemplateId();

    void setTemplateId(const utility::string_t& value);

    /// <summary>
    /// Data consent id.
    /// </summary>
    utility::string_t getConsentId() const;
    bool consentIdIsSet() const;
    void unsetConsentId();

    void setConsentId(const utility::string_t& value);

    /// <summary>
    /// Data consent title.
    /// </summary>
    utility::string_t getTitle() const;
    bool titleIsSet() const;
    void unsetTitle();

    void setTitle(const utility::string_t& value);

    /// <summary>
    /// Data consent description.
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Data consent purpose.
    /// </summary>
    utility::string_t getPurpose() const;
    bool purposeIsSet() const;
    void unsetPurpose();

    void setPurpose(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Life> getDataLife() const;
    bool dataLifeIsSet() const;
    void unsetDataLife();

    void setDataLife(const std::shared_ptr<Life>& value);

    /// <summary>
    /// List of supported collectables.
    /// </summary>
    std::vector<std::shared_ptr<CollectibleTypes>>& getCollectables();
    bool collectablesIsSet() const;
    void unsetCollectables();

    void setCollectables(const std::vector<std::shared_ptr<CollectibleTypes>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConsentRequestReceiver> getReceiver() const;
    bool receiverIsSet() const;
    void unsetReceiver();

    void setReceiver(const std::shared_ptr<ConsentRequestReceiver>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataConsentStatus> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<DataConsentStatus>& value);

    /// <summary>
    /// Request creation datetime in UTC timezone.
    /// </summary>
    utility::datetime getCreatedAtUtc() const;
    bool createdAtUtcIsSet() const;
    void unsetCreatedAtUtc();

    void setCreatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// Request expiration datetime in UTC timezone.
    /// </summary>
    utility::datetime getExpiresAtUtc() const;
    bool expiresAtUtcIsSet() const;
    void unsetExpiresAtUtc();

    void setExpiresAtUtc(const utility::datetime& value);

    /// <summary>
    /// Request approval datetime in UTC timezone.
    /// </summary>
    utility::datetime getApprovedAtUtc() const;
    bool approvedAtUtcIsSet() const;
    void unsetApprovedAtUtc();

    void setApprovedAtUtc(const utility::datetime& value);

    /// <summary>
    /// Data access expiration datetime in UTC timezone.
    /// </summary>
    utility::datetime getDataAccessExpiresAtUtc() const;
    bool dataAccessExpiresAtUtcIsSet() const;
    void unsetDataAccessExpiresAtUtc();

    void setDataAccessExpiresAtUtc(const utility::datetime& value);

    /// <summary>
    /// Request rejection datetime in UTC timezone.
    /// </summary>
    utility::datetime getRejectedAtUtc() const;
    bool rejectedAtUtcIsSet() const;
    void unsetRejectedAtUtc();

    void setRejectedAtUtc(const utility::datetime& value);

    /// <summary>
    /// Request revocation datetime in UTC timezone.
    /// </summary>
    utility::datetime getRevokedAtUtc() const;
    bool revokedAtUtcIsSet() const;
    void unsetRevokedAtUtc();

    void setRevokedAtUtc(const utility::datetime& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_TemplateId;
    bool m_TemplateIdIsSet;
    utility::string_t m_ConsentId;
    bool m_ConsentIdIsSet;
    utility::string_t m_Title;
    bool m_TitleIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Purpose;
    bool m_PurposeIsSet;
    std::shared_ptr<Life> m_DataLife;
    bool m_DataLifeIsSet;
    std::vector<std::shared_ptr<CollectibleTypes>> m_Collectables;
    bool m_CollectablesIsSet;
    std::shared_ptr<ConsentRequestReceiver> m_Receiver;
    bool m_ReceiverIsSet;
    std::shared_ptr<DataConsentStatus> m_Status;
    bool m_StatusIsSet;
    utility::datetime m_CreatedAtUtc;
    bool m_CreatedAtUtcIsSet;
    utility::datetime m_ExpiresAtUtc;
    bool m_ExpiresAtUtcIsSet;
    utility::datetime m_ApprovedAtUtc;
    bool m_ApprovedAtUtcIsSet;
    utility::datetime m_DataAccessExpiresAtUtc;
    bool m_DataAccessExpiresAtUtcIsSet;
    utility::datetime m_RejectedAtUtc;
    bool m_RejectedAtUtcIsSet;
    utility::datetime m_RevokedAtUtc;
    bool m_RevokedAtUtcIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DataConsentRequest_H_ */
