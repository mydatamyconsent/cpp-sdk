/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DocumentIssueRequest.h
 *
 * Document Issue Request.
 */

#ifndef MYDATAMYCONSENT_MODELS_DocumentIssueRequest_H_
#define MYDATAMYCONSENT_MODELS_DocumentIssueRequest_H_


#include "MyDataMyConsent/ModelBase.h"

#include "MyDataMyConsent/model/PaymentRequest.h"
#include "MyDataMyConsent/model/DocumentReceiver.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace mydatamyconsent {
namespace models {

class DocumentReceiver;
class PaymentRequest;

/// <summary>
/// Document Issue Request.
/// </summary>
class  DocumentIssueRequest
    : public ModelBase
{
public:
    DocumentIssueRequest();
    virtual ~DocumentIssueRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DocumentIssueRequest members

    /// <summary>
    /// Document type id.
    /// </summary>
    utility::string_t getDocumentTypeId() const;
    bool documentTypeIdIsSet() const;
    void unsetDocumentTypeId();

    void setDocumentTypeId(const utility::string_t& value);

    /// <summary>
    /// Document identifier.
    /// </summary>
    utility::string_t getIdentifier() const;
    bool identifierIsSet() const;
    void unsetIdentifier();

    void setIdentifier(const utility::string_t& value);

    /// <summary>
    /// Document description.
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DocumentReceiver> getReceiver() const;
    bool receiverIsSet() const;
    void unsetReceiver();

    void setReceiver(const std::shared_ptr<DocumentReceiver>& value);

    /// <summary>
    /// Datetime of issue in UTC timezone.
    /// </summary>
    utility::datetime getIssuedAtUtc() const;
    bool issuedAtUtcIsSet() const;
    void unsetIssuedAtUtc();

    void setIssuedAtUtc(const utility::datetime& value);

    /// <summary>
    /// Valid from datetime in UTC timezone.
    /// </summary>
    utility::datetime getValidFromUtc() const;
    bool validFromUtcIsSet() const;
    void unsetValidFromUtc();

    void setValidFromUtc(const utility::datetime& value);

    /// <summary>
    /// Datetime of expiry in UTC timezone.
    /// </summary>
    utility::datetime getExpiresAtUtc() const;
    bool expiresAtUtcIsSet() const;
    void unsetExpiresAtUtc();

    void setExpiresAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PaymentRequest> getPaymentRequest() const;
    bool paymentRequestIsSet() const;
    void unsetPaymentRequest();

    void setPaymentRequest(const std::shared_ptr<PaymentRequest>& value);

    /// <summary>
    /// Metadata.
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getMetadata();
    bool metadataIsSet() const;
    void unsetMetadata();

    void setMetadata(const std::map<utility::string_t, utility::string_t>& value);


protected:
    utility::string_t m_DocumentTypeId;
    bool m_DocumentTypeIdIsSet;
    utility::string_t m_Identifier;
    bool m_IdentifierIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::shared_ptr<DocumentReceiver> m_Receiver;
    bool m_ReceiverIsSet;
    utility::datetime m_IssuedAtUtc;
    bool m_IssuedAtUtcIsSet;
    utility::datetime m_ValidFromUtc;
    bool m_ValidFromUtcIsSet;
    utility::datetime m_ExpiresAtUtc;
    bool m_ExpiresAtUtcIsSet;
    std::shared_ptr<PaymentRequest> m_PaymentRequest;
    bool m_PaymentRequestIsSet;
    std::map<utility::string_t, utility::string_t> m_Metadata;
    bool m_MetadataIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DocumentIssueRequest_H_ */
