/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrganizationFinancialAccountDto.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_OrganizationFinancialAccountDto_H_
#define MYDATAMYCONSENT_MODELS_OrganizationFinancialAccountDto_H_


#include "MyDataMyConsent/ModelBase.h"

#include "MyDataMyConsent/model/BankAccountType.h"
#include "MyDataMyConsent/model/FileType.h"
#include <cpprest/details/basic_types.h>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  OrganizationFinancialAccountDto
    : public ModelBase
{
public:
    OrganizationFinancialAccountDto();
    virtual ~OrganizationFinancialAccountDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrganizationFinancialAccountDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrganizationId() const;
    bool organizationIdIsSet() const;
    void unsetOrganizationId();

    void setOrganizationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrganizationName() const;
    bool organizationNameIsSet() const;
    void unsetOrganizationName();

    void setOrganizationName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBeneficiaryName() const;
    bool beneficiaryNameIsSet() const;
    void unsetBeneficiaryName();

    void setBeneficiaryName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccountNumber() const;
    bool accountNumberIsSet() const;
    void unsetAccountNumber();

    void setAccountNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRoutingNumber() const;
    bool routingNumberIsSet() const;
    void unsetRoutingNumber();

    void setRoutingNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsPrimary() const;
    bool isPrimaryIsSet() const;
    void unsetIsPrimary();

    void setIsPrimary(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsVerified() const;
    bool isVerifiedIsSet() const;
    void unsetIsVerified();

    void setIsVerified(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLogoUrl() const;
    bool logoUrlIsSet() const;
    void unsetLogoUrl();

    void setLogoUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBankName() const;
    bool bankNameIsSet() const;
    void unsetBankName();

    void setBankName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BankAccountType> getBankAccountType() const;
    bool bankAccountTypeIsSet() const;
    void unsetBankAccountType();

    void setBankAccountType(const std::shared_ptr<BankAccountType>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBankAccountProofUrl() const;
    bool bankAccountProofUrlIsSet() const;
    void unsetBankAccountProofUrl();

    void setBankAccountProofUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FileType> getFileType() const;
    bool fileTypeIsSet() const;
    void unsetFileType();

    void setFileType(const std::shared_ptr<FileType>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_OrganizationId;
    bool m_OrganizationIdIsSet;
    utility::string_t m_OrganizationName;
    bool m_OrganizationNameIsSet;
    utility::string_t m_BeneficiaryName;
    bool m_BeneficiaryNameIsSet;
    utility::string_t m_AccountNumber;
    bool m_AccountNumberIsSet;
    utility::string_t m_RoutingNumber;
    bool m_RoutingNumberIsSet;
    bool m_IsPrimary;
    bool m_IsPrimaryIsSet;
    bool m_IsVerified;
    bool m_IsVerifiedIsSet;
    utility::string_t m_LogoUrl;
    bool m_LogoUrlIsSet;
    utility::string_t m_BankName;
    bool m_BankNameIsSet;
    std::shared_ptr<BankAccountType> m_BankAccountType;
    bool m_BankAccountTypeIsSet;
    utility::string_t m_BankAccountProofUrl;
    bool m_BankAccountProofUrlIsSet;
    std::shared_ptr<FileType> m_FileType;
    bool m_FileTypeIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_OrganizationFinancialAccountDto_H_ */
