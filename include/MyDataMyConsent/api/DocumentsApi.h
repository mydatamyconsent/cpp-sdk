/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DocumentsApi.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_API_DocumentsApi_H_
#define MYDATAMYCONSENT_API_DocumentsApi_H_



#include "MyDataMyConsent/ApiClient.h"

#include "MyDataMyConsent/model/DocumentIssueRequest.h"
#include "MyDataMyConsent/model/DocumentIssueRequestDetails.h"
#include "MyDataMyConsent/model/DocumentTypePaginatedList.h"
#include "MyDataMyConsent/model/Error.h"
#include "MyDataMyConsent/HttpContent.h"
#include "MyDataMyConsent/model/IssuedDocumentDetails.h"
#include "MyDataMyConsent/model/IssuedDocumentPaginatedList.h"
#include "MyDataMyConsent/model/ProblemDetails.h"
#include "MyDataMyConsent/model/SupportedEntityType.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace mydatamyconsent {
namespace api {

using namespace mydatamyconsent::models;



class  DocumentsApi 
{
public:

    explicit DocumentsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DocumentsApi();

    /// <summary>
    /// Get issued document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="documentId">Document id.</param>
    pplx::task<std::shared_ptr<IssuedDocumentDetails>> getIssuedDocumentById(
        utility::string_t documentId
    ) const;
    /// <summary>
    /// Get paginated list of issued documents of given document type.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="documentTypeId">Document type id. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="fromDateTime">From DateTime in UTC timezone. (optional, default to utility::datetime())</param>
    /// <param name="toDateTime">To DateTime in UTC timezone. (optional, default to utility::datetime())</param>
    /// <param name="pageNo">Page number. (optional, default to 0)</param>
    /// <param name="pageSize">Number of items to return. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<IssuedDocumentPaginatedList>> getIssuedDocuments(
        boost::optional<utility::string_t> documentTypeId,
        boost::optional<utility::datetime> fromDateTime,
        boost::optional<utility::datetime> toDateTime,
        boost::optional<int32_t> pageNo,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Get paginated list of registered document types.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="supportedEntityType">Supported entity type. (optional, default to new SupportedEntityType())</param>
    /// <param name="pageNo">Page number. (optional, default to 0)</param>
    /// <param name="pageSize">Number of items to return. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<DocumentTypePaginatedList>> getRegisteredDocumentTypes(
        boost::optional<std::shared_ptr<SupportedEntityType>> supportedEntityType,
        boost::optional<int32_t> pageNo,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Issue a new document to an individual user.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="documentIssueRequest">Document issue request payload</param>
    pplx::task<std::shared_ptr<DocumentIssueRequestDetails>> issueDocumentToIndividual(
        std::shared_ptr<DocumentIssueRequest> documentIssueRequest
    ) const;
    /// <summary>
    /// Issue a new document to an organization.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="documentIssueRequest">Document issue request payload</param>
    pplx::task<std::shared_ptr<DocumentIssueRequestDetails>> issueDocumentToOrganization(
        std::shared_ptr<DocumentIssueRequest> documentIssueRequest
    ) const;
    /// <summary>
    /// Upload a document for issuance request of individual.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="issueRequestId">Document issue request id.</param>
    /// <param name="formFile"></param>
    pplx::task<void> uploadDocumentForIndividual(
        utility::string_t issueRequestId,
        std::shared_ptr<HttpContent> formFile
    ) const;
    /// <summary>
    /// Upload a document for issuance request of organization.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="issueRequestId">Document issue request id System.Guid.</param>
    /// <param name="formFile"></param>
    pplx::task<void> uploadDocumentForOrganization(
        utility::string_t issueRequestId,
        std::shared_ptr<HttpContent> formFile
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* MYDATAMYCONSENT_API_DocumentsApi_H_ */

