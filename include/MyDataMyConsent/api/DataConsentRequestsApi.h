/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataConsentRequestsApi.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_API_DataConsentRequestsApi_H_
#define MYDATAMYCONSENT_API_DataConsentRequestsApi_H_



#include "MyDataMyConsent/ApiClient.h"

#include "MyDataMyConsent/model/CreateDataConsentRequest.h"
#include "MyDataMyConsent/model/DataConsentRequest.h"
#include "MyDataMyConsent/model/DataConsentStatus.h"
#include "MyDataMyConsent/model/Error.h"
#include "MyDataMyConsent/model/IndividualDataConsentRequestDetails.h"
#include "MyDataMyConsent/model/IndividualDataConsentRequestDetailsPaginatedList.h"
#include "MyDataMyConsent/model/OrganizationDataConsentRequestDetails.h"
#include "MyDataMyConsent/model/OrganizationDataConsentRequestDetailsPaginatedList.h"
#include "MyDataMyConsent/model/ProblemDetails.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace mydatamyconsent {
namespace api {

using namespace mydatamyconsent::models;



class  DataConsentRequestsApi 
{
public:

    explicit DataConsentRequestsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DataConsentRequestsApi();

    /// <summary>
    /// Cancel the individual data consent request by Id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestId">Individual consent request id.</param>
    pplx::task<void> cancelIndividualDataConsentRequest(
        utility::string_t requestId
    ) const;
    /// <summary>
    /// Cancel the organization data consent request by Id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestId">Organization consent request id.</param>
    pplx::task<void> cancelOrganizationDataConsentRequest(
        utility::string_t requestId
    ) const;
    /// <summary>
    /// Create data consent request for an individual.
    /// </summary>
    /// <remarks>
    /// Create data consent request for an individual.
    /// </remarks>
    /// <param name="createDataConsentRequest">The Individual data consent request payload</param>
    pplx::task<std::shared_ptr<IndividualDataConsentRequestDetails>> createIndividualDataConsentRequest(
        std::shared_ptr<CreateDataConsentRequest> createDataConsentRequest
    ) const;
    /// <summary>
    /// Create data consent request for an organization.
    /// </summary>
    /// <remarks>
    /// Create data consent request for an organization.
    /// </remarks>
    /// <param name="createDataConsentRequest">The Organization data consent request payload</param>
    pplx::task<std::shared_ptr<OrganizationDataConsentRequestDetails>> createOrganizationDataConsentRequest(
        std::shared_ptr<CreateDataConsentRequest> createDataConsentRequest
    ) const;
    /// <summary>
    /// Get all Consent Requests sent to individuals.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="status">Data consent status. (optional, default to new DataConsentStatus())</param>
    /// <param name="startDateTime">Start datetime in UTC timezone. (optional, default to utility::datetime())</param>
    /// <param name="endDateTime">End datetime in UTC timezone. (optional, default to utility::datetime())</param>
    /// <param name="pageNo">Page number. (optional, default to 0)</param>
    /// <param name="pageSize">Number of items to return. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<IndividualDataConsentRequestDetailsPaginatedList>> getAllConsentRequestsToIndividuals(
        boost::optional<std::shared_ptr<DataConsentStatus>> status,
        boost::optional<utility::datetime> startDateTime,
        boost::optional<utility::datetime> endDateTime,
        boost::optional<int32_t> pageNo,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Get all Consent Requests sent to organizations.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="status">Data consent status. (optional, default to new DataConsentStatus())</param>
    /// <param name="startDateTime">Start datetime in UTC timezone. (optional, default to utility::datetime())</param>
    /// <param name="endDateTime">End datetime in UTC timezone. (optional, default to utility::datetime())</param>
    /// <param name="pageNo">Page number. (optional, default to 0)</param>
    /// <param name="pageSize">Number of items to return. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<OrganizationDataConsentRequestDetailsPaginatedList>> getAllConsentRequestsToOrganizations(
        boost::optional<std::shared_ptr<DataConsentStatus>> status,
        boost::optional<utility::datetime> startDateTime,
        boost::optional<utility::datetime> endDateTime,
        boost::optional<int32_t> pageNo,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Get individual data consent request by id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestId">Individual data consent request id.</param>
    pplx::task<std::shared_ptr<DataConsentRequest>> getIndividualConsentRequestById(
        utility::string_t requestId
    ) const;
    /// <summary>
    /// Get a OrganizationConsent Request by Id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestId">Organization consent request id.</param>
    pplx::task<std::shared_ptr<DataConsentRequest>> getOrganizationConsentRequestById(
        utility::string_t requestId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* MYDATAMYCONSENT_API_DataConsentRequestsApi_H_ */

