/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataProcessingAgreementsApi.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_API_DataProcessingAgreementsApi_H_
#define MYDATAMYCONSENT_API_DataProcessingAgreementsApi_H_



#include "MyDataMyConsent/ApiClient.h"

#include "MyDataMyConsent/model/CreateDataProcessingAgreement.h"
#include "MyDataMyConsent/model/DataProcessingAgreement.h"
#include "MyDataMyConsent/model/DataProcessingAgreementPaginatedList.h"
#include "MyDataMyConsent/model/Error.h"
#include "MyDataMyConsent/model/UpdateDataProcessingAgreement.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace mydatamyconsent {
namespace api {

using namespace mydatamyconsent::models;



class  DataProcessingAgreementsApi 
{
public:

    explicit DataProcessingAgreementsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DataProcessingAgreementsApi();

    /// <summary>
    /// Create a data processing agreement.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createDataProcessingAgreement">Create data processing agreement payload</param>
    pplx::task<std::shared_ptr<DataProcessingAgreement>> createDataProcessingAgreement(
        std::shared_ptr<CreateDataProcessingAgreement> createDataProcessingAgreement
    ) const;
    /// <summary>
    /// Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Agreement id.</param>
    pplx::task<void> deleteDataProcessingAgreementById(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get data processing agreement by id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Agreement id.</param>
    pplx::task<std::shared_ptr<DataProcessingAgreement>> getDataProcessingAgreementById(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get paginated data processing agreements.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="pageNo">Page number. (optional, default to 0)</param>
    /// <param name="pageSize">Number of items to return. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<DataProcessingAgreementPaginatedList>> getDataProcessingAgreements(
        boost::optional<int32_t> pageNo,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Terminate a data processing agreement.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Agreement id.</param>
    pplx::task<void> terminateDataProcessingAgreementById(
        utility::string_t id
    ) const;
    /// <summary>
    /// Update a data processing agreement.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Agreement id.</param>
    /// <param name="updateDataProcessingAgreement">Update data processing agreement payload</param>
    pplx::task<std::shared_ptr<DataProcessingAgreement>> updateDataProcessingAgreement(
        utility::string_t id,
        std::shared_ptr<UpdateDataProcessingAgreement> updateDataProcessingAgreement
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* MYDATAMYCONSENT_API_DataProcessingAgreementsApi_H_ */

