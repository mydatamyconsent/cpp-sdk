/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DocumentsApi.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_API_DocumentsApi_H_
#define MYDATAMYCONSENT_API_DocumentsApi_H_



#include "ApiClient.h"

#include "model/DocumentIssueRequest.h"
#include "model/DocumentTypePaginatedList.h"
#include "model/IssuedDocument.h"
#include "model/IssuedDocumentPaginatedList.h"
#include "model/ProblemDetails.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace mydatamyconsent {
namespace api {

using namespace mydatamyconsent::models;



class  DocumentsApi 
{
public:

    explicit DocumentsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DocumentsApi();

    /// <summary>
    /// Get issued document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="documentId">Document id.</param>
    pplx::task<std::shared_ptr<IssuedDocument>> getIssuedDocumentById(
        utility::string_t documentId
    ) const;
    /// <summary>
    /// Get issued documents.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="documentTypeId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="fromDateTime"> (optional, default to utility::datetime())</param>
    /// <param name="toDateTime"> (optional, default to utility::datetime())</param>
    /// <param name="pageSize"> (optional, default to 0)</param>
    /// <param name="pageNo"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<IssuedDocumentPaginatedList>> getIssuedDocuments(
        boost::optional<utility::string_t> documentTypeId,
        boost::optional<utility::datetime> fromDateTime,
        boost::optional<utility::datetime> toDateTime,
        boost::optional<int32_t> pageSize,
        boost::optional<int32_t> pageNo
    ) const;
    /// <summary>
    /// Get registered document types.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="pageNo">Page number. (optional, default to 0)</param>
    /// <param name="pageSize">Number of items to return. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<DocumentTypePaginatedList>> getRegisteredDocumentTypes(
        boost::optional<int32_t> pageNo,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Issue a new document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="documentIssueRequest">Document issue request MyDataMyConsent.Models.Documents.DocumentIssueRequest.</param>
    pplx::task<std::shared_ptr<IssuedDocument>> issueDocument(
        std::shared_ptr<DocumentIssueRequest> documentIssueRequest
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* MYDATAMYCONSENT_API_DocumentsApi_H_ */

