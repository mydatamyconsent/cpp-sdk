/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataConsentRequestsApi.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_API_DataConsentRequestsApi_H_
#define MYDATAMYCONSENT_API_DataConsentRequestsApi_H_



#include "ApiClient.h"

#include "model/DataConsentDetailsDto.h"
#include "model/DataConsentRequestModel.h"
#include "model/DataConsentStatus.h"
#include "Object.h"
#include "model/ProblemDetails.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace mydatamyconsent {
namespace api {

using namespace mydatamyconsent::models;



class  DataConsentRequestsApi 
{
public:

    explicit DataConsentRequestsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DataConsentRequestsApi();

    /// <summary>
    /// Revoke / Cancel the ConsentRequest based on Id
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestId"></param>
    pplx::task<bool> cancelConsentRequest(
        utility::string_t requestId
    ) const;
    /// <summary>
    /// Create a consent request.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dataConsentRequestModel">MyDataMyConsent.Models.Consents.DataConsentRequestModel. (optional)</param>
    pplx::task<bool> createRequest(
        boost::optional<std::shared_ptr<DataConsentRequestModel>> dataConsentRequestModel
    ) const;
    /// <summary>
    /// Get all Consent Requests.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="pageNo"> (optional, default to 0)</param>
    /// <param name="pageSize"> (optional, default to 0)</param>
    /// <param name="status"> (optional, default to new DataConsentStatus())</param>
    pplx::task<std::shared_ptr<Object>> getAllConsentRequests(
        boost::optional<int32_t> pageNo,
        boost::optional<int32_t> pageSize,
        boost::optional<std::shared_ptr<DataConsentStatus>> status
    ) const;
    /// <summary>
    /// Get a Consent Request by ID.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestId"></param>
    pplx::task<std::shared_ptr<DataConsentDetailsDto>> getConsentRequestById(
        utility::string_t requestId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* MYDATAMYCONSENT_API_DataConsentRequestsApi_H_ */

