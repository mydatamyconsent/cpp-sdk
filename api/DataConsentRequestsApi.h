/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataConsentRequestsApi.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_API_DataConsentRequestsApi_H_
#define MYDATAMYCONSENT_API_DataConsentRequestsApi_H_



#include "ApiClient.h"

#include "model/CreateIndividualDataConsentRequest.h"
#include "model/CreateOrganizationDataConsentRequest.h"
#include "model/DataConsentDetailsDto.h"
#include "model/DataConsentStatus.h"
#include "model/IndividualDataConsentRequestResponse.h"
#include "Object.h"
#include "model/OrganizationDataConsentInfoDtoPaginatedList.h"
#include "model/OrganizationDataConsentRequestResponse.h"
#include "model/UserDataConsentInfoDtoPaginatedList.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace mydatamyconsent {
namespace api {

using namespace mydatamyconsent::models;



class  DataConsentRequestsApi 
{
public:

    explicit DataConsentRequestsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DataConsentRequestsApi();

    /// <summary>
    /// Cancel the individual data consent request based on Id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestId">Individual consent request id.</param>
    pplx::task<std::shared_ptr<IndividualDataConsentRequestResponse>> cancelIndividualDataConsentRequest(
        utility::string_t requestId
    ) const;
    /// <summary>
    /// Cancel the Organization data consent request based on Id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestId">Organization consent request id.</param>
    pplx::task<std::shared_ptr<OrganizationDataConsentRequestResponse>> cancelOrganizationDataConsentRequest(
        utility::string_t requestId
    ) const;
    /// <summary>
    /// Create a individual data consent request.
    /// </summary>
    /// <remarks>
    /// Create a individual data consent request.
    /// </remarks>
    /// <param name="createIndividualDataConsentRequest">The Individual data consent request payload</param>
    pplx::task<std::shared_ptr<IndividualDataConsentRequestResponse>> createIndividualDataConsentRequest(
        std::shared_ptr<CreateIndividualDataConsentRequest> createIndividualDataConsentRequest
    ) const;
    /// <summary>
    /// Create a organization data consent request.
    /// </summary>
    /// <remarks>
    /// Create a organization data consent request.
    /// </remarks>
    /// <param name="createOrganizationDataConsentRequest">M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).</param>
    pplx::task<std::shared_ptr<OrganizationDataConsentRequestResponse>> createOrganizationDataConsentRequest(
        std::shared_ptr<CreateOrganizationDataConsentRequest> createOrganizationDataConsentRequest
    ) const;
    /// <summary>
    /// Get all Consent Requests sent to Individuals.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="status">Data consent status. (optional, default to new DataConsentStatus())</param>
    /// <param name="startDateTime">Start date time. (optional, default to utility::datetime())</param>
    /// <param name="endDateTime">End date time. (optional, default to utility::datetime())</param>
    /// <param name="pageNo">Page number. (optional, default to 0)</param>
    /// <param name="pageSize">Number of items to return. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<UserDataConsentInfoDtoPaginatedList>> getAllConsentRequestsToIndividuals(
        boost::optional<std::shared_ptr<DataConsentStatus>> status,
        boost::optional<utility::datetime> startDateTime,
        boost::optional<utility::datetime> endDateTime,
        boost::optional<int32_t> pageNo,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Get All Consent Requests sent to Organizations.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="status">Data consent status. (optional, default to new DataConsentStatus())</param>
    /// <param name="startDateTime">Start date time. (optional, default to utility::datetime())</param>
    /// <param name="endDateTime">End date time. (optional, default to utility::datetime())</param>
    /// <param name="pageNo">Page number. (optional, default to 0)</param>
    /// <param name="pageSize">Number of items to return. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<OrganizationDataConsentInfoDtoPaginatedList>> getAllConsentRequestsToOrganizations(
        boost::optional<std::shared_ptr<DataConsentStatus>> status,
        boost::optional<utility::datetime> startDateTime,
        boost::optional<utility::datetime> endDateTime,
        boost::optional<int32_t> pageNo,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Get a Consent Request by ID.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestId">Individual consent request id.</param>
    pplx::task<std::shared_ptr<DataConsentDetailsDto>> getIndividualConsentRequestById(
        utility::string_t requestId
    ) const;
    /// <summary>
    /// Get a OrganizationConsent Request by Id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestId">Organization consent request id.</param>
    pplx::task<std::shared_ptr<DataConsentDetailsDto>> getOrganizationConsentRequestById(
        utility::string_t requestId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* MYDATAMYCONSENT_API_DataConsentRequestsApi_H_ */

