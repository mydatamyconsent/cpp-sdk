/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RefreshToken.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_RefreshToken_H_
#define MYDATAMYCONSENT_MODELS_RefreshToken_H_


#include "ModelBase.h"

#include "model/ApplicationUser.h"
#include <cpprest/details/basic_types.h>

namespace mydatamyconsent {
namespace models {

class ApplicationUser;

/// <summary>
/// 
/// </summary>
class  RefreshToken
    : public ModelBase
{
public:
    RefreshToken();
    virtual ~RefreshToken();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RefreshToken members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreatedBy() const;
    bool createdByIsSet() const;
    void unsetCreatedBy();

    void setCreatedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAtUtc() const;
    bool createdAtUtcIsSet() const;
    void unsetCreatedAtUtc();

    void setCreatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUpdatedBy() const;
    bool updatedByIsSet() const;
    void unsetUpdatedBy();

    void setUpdatedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getUpdatedAtUtc() const;
    bool updatedAtUtcIsSet() const;
    void unsetUpdatedAtUtc();

    void setUpdatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getCreatedByUser() const;
    bool createdByUserIsSet() const;
    void unsetCreatedByUser();

    void setCreatedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getUpdatedByUser() const;
    bool updatedByUserIsSet() const;
    void unsetUpdatedByUser();

    void setUpdatedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeletedBy() const;
    bool deletedByIsSet() const;
    void unsetDeletedBy();

    void setDeletedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDeletedAtUtc() const;
    bool deletedAtUtcIsSet() const;
    void unsetDeletedAtUtc();

    void setDeletedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getDeletedByUser() const;
    bool deletedByUserIsSet() const;
    void unsetDeletedByUser();

    void setDeletedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInstallationId() const;
    bool installationIdIsSet() const;
    void unsetInstallationId();

    void setInstallationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getToken() const;
    bool tokenIsSet() const;
    void unsetToken();

    void setToken(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccessToken() const;
    bool accessTokenIsSet() const;
    void unsetAccessToken();

    void setAccessToken(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getAccessTokenExpires() const;
    bool accessTokenExpiresIsSet() const;
    void unsetAccessTokenExpires();

    void setAccessTokenExpires(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpires() const;
    bool expiresIsSet() const;
    void unsetExpires();

    void setExpires(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsExpired() const;
    bool isExpiredIsSet() const;
    void unsetIsExpired();

    void setIsExpired(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreated() const;
    bool createdIsSet() const;
    void unsetCreated();

    void setCreated(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRevoked() const;
    bool revokedIsSet() const;
    void unsetRevoked();

    void setRevoked(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsActive() const;
    bool isActiveIsSet() const;
    void unsetIsActive();

    void setIsActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const std::shared_ptr<ApplicationUser>& value);


protected:
    utility::string_t m_CreatedBy;
    bool m_CreatedByIsSet;
    utility::datetime m_CreatedAtUtc;
    bool m_CreatedAtUtcIsSet;
    utility::string_t m_UpdatedBy;
    bool m_UpdatedByIsSet;
    utility::datetime m_UpdatedAtUtc;
    bool m_UpdatedAtUtcIsSet;
    std::shared_ptr<ApplicationUser> m_CreatedByUser;
    bool m_CreatedByUserIsSet;
    std::shared_ptr<ApplicationUser> m_UpdatedByUser;
    bool m_UpdatedByUserIsSet;
    utility::string_t m_DeletedBy;
    bool m_DeletedByIsSet;
    utility::datetime m_DeletedAtUtc;
    bool m_DeletedAtUtcIsSet;
    std::shared_ptr<ApplicationUser> m_DeletedByUser;
    bool m_DeletedByUserIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_InstallationId;
    bool m_InstallationIdIsSet;
    utility::string_t m_Token;
    bool m_TokenIsSet;
    utility::string_t m_AccessToken;
    bool m_AccessTokenIsSet;
    utility::datetime m_AccessTokenExpires;
    bool m_AccessTokenExpiresIsSet;
    utility::datetime m_Expires;
    bool m_ExpiresIsSet;
    bool m_IsExpired;
    bool m_IsExpiredIsSet;
    utility::datetime m_Created;
    bool m_CreatedIsSet;
    utility::datetime m_Revoked;
    bool m_RevokedIsSet;
    bool m_IsActive;
    bool m_IsActiveIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    std::shared_ptr<ApplicationUser> m_User;
    bool m_UserIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_RefreshToken_H_ */
