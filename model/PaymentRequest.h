/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PaymentRequest.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_PaymentRequest_H_
#define MYDATAMYCONSENT_MODELS_PaymentRequest_H_


#include "ModelBase.h"

#include "model/BillPaymentOrderItem.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  PaymentRequest
    : public ModelBase
{
public:
    PaymentRequest();
    virtual ~PaymentRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PaymentRequest members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIdentifier() const;
    bool identifierIsSet() const;
    void unsetIdentifier();

    void setIdentifier(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BillPaymentOrderItem>>& getItems();
    bool itemsIsSet() const;
    void unsetItems();

    void setItems(const std::vector<std::shared_ptr<BillPaymentOrderItem>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrencyCode() const;
    bool currencyCodeIsSet() const;
    void unsetCurrencyCode();

    void setCurrencyCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPaymentUrl() const;
    bool paymentUrlIsSet() const;
    void unsetPaymentUrl();

    void setPaymentUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDueByUtc() const;
    bool dueByUtcIsSet() const;
    void unsetDueByUtc();

    void setDueByUtc(const utility::datetime& value);


protected:
    utility::string_t m_Identifier;
    bool m_IdentifierIsSet;
    std::vector<std::shared_ptr<BillPaymentOrderItem>> m_Items;
    bool m_ItemsIsSet;
    utility::string_t m_CurrencyCode;
    bool m_CurrencyCodeIsSet;
    utility::string_t m_PaymentUrl;
    bool m_PaymentUrlIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::datetime m_DueByUtc;
    bool m_DueByUtcIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_PaymentRequest_H_ */
