/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Country.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_Country_H_
#define MYDATAMYCONSENT_MODELS_Country_H_


#include "ModelBase.h"

#include "model/CountryState.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  Country
    : public ModelBase
{
public:
    Country();
    virtual ~Country();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Country members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIso3() const;
    bool iso3IsSet() const;
    void unsetIso3();

    void setIso3(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIso2() const;
    bool iso2IsSet() const;
    void unsetIso2();

    void setIso2(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhoneCode() const;
    bool phoneCodeIsSet() const;
    void unsetPhoneCode();

    void setPhoneCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCapital() const;
    bool capitalIsSet() const;
    void unsetCapital();

    void setCapital(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrencyCode() const;
    bool currencyCodeIsSet() const;
    void unsetCurrencyCode();

    void setCurrencyCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrencySymbol() const;
    bool currencySymbolIsSet() const;
    void unsetCurrencySymbol();

    void setCurrencySymbol(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFlagUrl() const;
    bool flagUrlIsSet() const;
    void unsetFlagUrl();

    void setFlagUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<CountryState>>& getStates();
    bool statesIsSet() const;
    void unsetStates();

    void setStates(const std::vector<std::shared_ptr<CountryState>>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Iso3;
    bool m_Iso3IsSet;
    utility::string_t m_Iso2;
    bool m_Iso2IsSet;
    utility::string_t m_PhoneCode;
    bool m_PhoneCodeIsSet;
    utility::string_t m_Capital;
    bool m_CapitalIsSet;
    utility::string_t m_CurrencyCode;
    bool m_CurrencyCodeIsSet;
    utility::string_t m_CurrencySymbol;
    bool m_CurrencySymbolIsSet;
    utility::string_t m_FlagUrl;
    bool m_FlagUrlIsSet;
    std::vector<std::shared_ptr<CountryState>> m_States;
    bool m_StatesIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_Country_H_ */
