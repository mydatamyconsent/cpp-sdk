/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrganizationAddress.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_OrganizationAddress_H_
#define MYDATAMYCONSENT_MODELS_OrganizationAddress_H_


#include "ModelBase.h"

#include "model/ApplicationUser.h"
#include "model/Country.h"
#include "model/CountryState.h"
#include <cpprest/details/basic_types.h>
#include "model/OrganizationAddressType.h"
#include "model/Organization.h"
#include "model/ProofDocumentType.h"

namespace mydatamyconsent {
namespace models {

class Organization;

/// <summary>
/// 
/// </summary>
class  OrganizationAddress
    : public ModelBase
{
public:
    OrganizationAddress();
    virtual ~OrganizationAddress();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrganizationAddress members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreatedBy() const;
    bool createdByIsSet() const;
    void unsetCreatedBy();

    void setCreatedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAtUtc() const;
    bool createdAtUtcIsSet() const;
    void unsetCreatedAtUtc();

    void setCreatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUpdatedBy() const;
    bool updatedByIsSet() const;
    void unsetUpdatedBy();

    void setUpdatedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getUpdatedAtUtc() const;
    bool updatedAtUtcIsSet() const;
    void unsetUpdatedAtUtc();

    void setUpdatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getCreatedByUser() const;
    bool createdByUserIsSet() const;
    void unsetCreatedByUser();

    void setCreatedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getUpdatedByUser() const;
    bool updatedByUserIsSet() const;
    void unsetUpdatedByUser();

    void setUpdatedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeletedBy() const;
    bool deletedByIsSet() const;
    void unsetDeletedBy();

    void setDeletedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDeletedAtUtc() const;
    bool deletedAtUtcIsSet() const;
    void unsetDeletedAtUtc();

    void setDeletedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getDeletedByUser() const;
    bool deletedByUserIsSet() const;
    void unsetDeletedByUser();

    void setDeletedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrganizationId() const;
    bool organizationIdIsSet() const;
    void unsetOrganizationId();

    void setOrganizationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrganizationName() const;
    bool organizationNameIsSet() const;
    void unsetOrganizationName();

    void setOrganizationName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrganizationAddressType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<OrganizationAddressType>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddressLine1() const;
    bool addressLine1IsSet() const;
    void unsetAddressLine1();

    void setAddressLine1(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddressLine2() const;
    bool addressLine2IsSet() const;
    void unsetAddressLine2();

    void setAddressLine2(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLandMark() const;
    bool landMarkIsSet() const;
    void unsetLandMark();

    void setLandMark(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountryId() const;
    bool countryIdIsSet() const;
    void unsetCountryId();

    void setCountryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStateId() const;
    bool stateIdIsSet() const;
    void unsetStateId();

    void setStateId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();

    void setCity(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPostCode() const;
    bool postCodeIsSet() const;
    void unsetPostCode();

    void setPostCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ProofDocumentType> getProofDocumentType() const;
    bool proofDocumentTypeIsSet() const;
    void unsetProofDocumentType();

    void setProofDocumentType(const std::shared_ptr<ProofDocumentType>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProofDocumentUrl() const;
    bool proofDocumentUrlIsSet() const;
    void unsetProofDocumentUrl();

    void setProofDocumentUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Country> getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const std::shared_ptr<Country>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Organization> getOrganization() const;
    bool organizationIsSet() const;
    void unsetOrganization();

    void setOrganization(const std::shared_ptr<Organization>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CountryState> getCountryState() const;
    bool countryStateIsSet() const;
    void unsetCountryState();

    void setCountryState(const std::shared_ptr<CountryState>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsPrimary() const;
    bool isPrimaryIsSet() const;
    void unsetIsPrimary();

    void setIsPrimary(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsVerified() const;
    bool isVerifiedIsSet() const;
    void unsetIsVerified();

    void setIsVerified(bool value);


protected:
    utility::string_t m_CreatedBy;
    bool m_CreatedByIsSet;
    utility::datetime m_CreatedAtUtc;
    bool m_CreatedAtUtcIsSet;
    utility::string_t m_UpdatedBy;
    bool m_UpdatedByIsSet;
    utility::datetime m_UpdatedAtUtc;
    bool m_UpdatedAtUtcIsSet;
    std::shared_ptr<ApplicationUser> m_CreatedByUser;
    bool m_CreatedByUserIsSet;
    std::shared_ptr<ApplicationUser> m_UpdatedByUser;
    bool m_UpdatedByUserIsSet;
    utility::string_t m_DeletedBy;
    bool m_DeletedByIsSet;
    utility::datetime m_DeletedAtUtc;
    bool m_DeletedAtUtcIsSet;
    std::shared_ptr<ApplicationUser> m_DeletedByUser;
    bool m_DeletedByUserIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_OrganizationId;
    bool m_OrganizationIdIsSet;
    utility::string_t m_OrganizationName;
    bool m_OrganizationNameIsSet;
    std::shared_ptr<OrganizationAddressType> m_Type;
    bool m_TypeIsSet;
    utility::string_t m_AddressLine1;
    bool m_AddressLine1IsSet;
    utility::string_t m_AddressLine2;
    bool m_AddressLine2IsSet;
    utility::string_t m_LandMark;
    bool m_LandMarkIsSet;
    utility::string_t m_CountryId;
    bool m_CountryIdIsSet;
    utility::string_t m_StateId;
    bool m_StateIdIsSet;
    utility::string_t m_City;
    bool m_CityIsSet;
    utility::string_t m_PostCode;
    bool m_PostCodeIsSet;
    std::shared_ptr<ProofDocumentType> m_ProofDocumentType;
    bool m_ProofDocumentTypeIsSet;
    utility::string_t m_ProofDocumentUrl;
    bool m_ProofDocumentUrlIsSet;
    std::shared_ptr<Country> m_Country;
    bool m_CountryIsSet;
    std::shared_ptr<Organization> m_Organization;
    bool m_OrganizationIsSet;
    std::shared_ptr<CountryState> m_CountryState;
    bool m_CountryStateIsSet;
    bool m_IsPrimary;
    bool m_IsPrimaryIsSet;
    bool m_IsVerified;
    bool m_IsVerifiedIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_OrganizationAddress_H_ */
