/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DocumentTypeDetailsDto.h"

namespace mydatamyconsent {
namespace models {




DocumentTypeDetailsDto::DocumentTypeDetailsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_OrganizationId = utility::conversions::to_string_t("");
    m_OrganizationIdIsSet = false;
    m_CategoryTypeIsSet = false;
    m_SubCategoryTypeIsSet = false;
    m_DocumentTypeCategoryId = utility::conversions::to_string_t("");
    m_DocumentTypeCategoryIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Slug = utility::conversions::to_string_t("");
    m_SlugIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_LogoUrl = utility::conversions::to_string_t("");
    m_LogoUrlIsSet = false;
    m_CountryIso2 = utility::conversions::to_string_t("");
    m_CountryIso2IsSet = false;
    m_CountryId = utility::conversions::to_string_t("");
    m_CountryIdIsSet = false;
    m_SearchServiceId = utility::conversions::to_string_t("");
    m_SearchServiceIdIsSet = false;
    m_RepositoryServiceId = utility::conversions::to_string_t("");
    m_RepositoryServiceIdIsSet = false;
    m_SupportedEntityTypeIsSet = false;
    m_AddedBy = utility::conversions::to_string_t("");
    m_AddedByIsSet = false;
    m_PayableAmount = 0.0;
    m_PayableAmountIsSet = false;
    m_ApprovedAtUtc = utility::datetime();
    m_ApprovedAtUtcIsSet = false;
}

DocumentTypeDetailsDto::~DocumentTypeDetailsDto()
{
}

void DocumentTypeDetailsDto::validate()
{
    // TODO: implement validation
}

web::json::value DocumentTypeDetailsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OrganizationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationId"))] = ModelBase::toJson(m_OrganizationId);
    }
    if(m_CategoryTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryType"))] = ModelBase::toJson(m_CategoryType);
    }
    if(m_SubCategoryTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("subCategoryType"))] = ModelBase::toJson(m_SubCategoryType);
    }
    if(m_DocumentTypeCategoryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("documentTypeCategoryId"))] = ModelBase::toJson(m_DocumentTypeCategoryId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_SlugIsSet)
    {
        val[utility::conversions::to_string_t(U("slug"))] = ModelBase::toJson(m_Slug);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_LogoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("logoUrl"))] = ModelBase::toJson(m_LogoUrl);
    }
    if(m_CountryIso2IsSet)
    {
        val[utility::conversions::to_string_t(U("countryIso2"))] = ModelBase::toJson(m_CountryIso2);
    }
    if(m_CountryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("countryId"))] = ModelBase::toJson(m_CountryId);
    }
    if(m_SearchServiceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("searchServiceId"))] = ModelBase::toJson(m_SearchServiceId);
    }
    if(m_RepositoryServiceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("repositoryServiceId"))] = ModelBase::toJson(m_RepositoryServiceId);
    }
    if(m_SupportedEntityTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("supportedEntityType"))] = ModelBase::toJson(m_SupportedEntityType);
    }
    if(m_AddedByIsSet)
    {
        val[utility::conversions::to_string_t(U("addedBy"))] = ModelBase::toJson(m_AddedBy);
    }
    if(m_PayableAmountIsSet)
    {
        val[utility::conversions::to_string_t(U("payableAmount"))] = ModelBase::toJson(m_PayableAmount);
    }
    if(m_ApprovedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedAtUtc"))] = ModelBase::toJson(m_ApprovedAtUtc);
    }

    return val;
}

bool DocumentTypeDetailsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organizationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationId);
            setOrganizationId(refVal_organizationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentCategoryType> refVal_categoryType;
            ok &= ModelBase::fromJson(fieldValue, refVal_categoryType);
            setCategoryType(refVal_categoryType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subCategoryType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subCategoryType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentSubCategoryType> refVal_subCategoryType;
            ok &= ModelBase::fromJson(fieldValue, refVal_subCategoryType);
            setSubCategoryType(refVal_subCategoryType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentTypeCategoryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentTypeCategoryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentTypeCategoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentTypeCategoryId);
            setDocumentTypeCategoryId(refVal_documentTypeCategoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slug"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slug")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_slug;
            ok &= ModelBase::fromJson(fieldValue, refVal_slug);
            setSlug(refVal_slug);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_logoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_logoUrl);
            setLogoUrl(refVal_logoUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryIso2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryIso2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_countryIso2;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryIso2);
            setCountryIso2(refVal_countryIso2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_countryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryId);
            setCountryId(refVal_countryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("searchServiceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("searchServiceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_searchServiceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_searchServiceId);
            setSearchServiceId(refVal_searchServiceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("repositoryServiceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("repositoryServiceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_repositoryServiceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_repositoryServiceId);
            setRepositoryServiceId(refVal_repositoryServiceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportedEntityType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportedEntityType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SupportedEntityType> refVal_supportedEntityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportedEntityType);
            setSupportedEntityType(refVal_supportedEntityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_addedBy);
            setAddedBy(refVal_addedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("payableAmount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("payableAmount")));
        if(!fieldValue.is_null())
        {
            double refVal_payableAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_payableAmount);
            setPayableAmount(refVal_payableAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_approvedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvedAtUtc);
            setApprovedAtUtc(refVal_approvedAtUtc);
        }
    }
    return ok;
}

void DocumentTypeDetailsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OrganizationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationId")), m_OrganizationId));
    }
    if(m_CategoryTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryType")), m_CategoryType));
    }
    if(m_SubCategoryTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subCategoryType")), m_SubCategoryType));
    }
    if(m_DocumentTypeCategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentTypeCategoryId")), m_DocumentTypeCategoryId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_SlugIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slug")), m_Slug));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_LogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logoUrl")), m_LogoUrl));
    }
    if(m_CountryIso2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryIso2")), m_CountryIso2));
    }
    if(m_CountryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryId")), m_CountryId));
    }
    if(m_SearchServiceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("searchServiceId")), m_SearchServiceId));
    }
    if(m_RepositoryServiceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("repositoryServiceId")), m_RepositoryServiceId));
    }
    if(m_SupportedEntityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportedEntityType")), m_SupportedEntityType));
    }
    if(m_AddedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addedBy")), m_AddedBy));
    }
    if(m_PayableAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("payableAmount")), m_PayableAmount));
    }
    if(m_ApprovedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedAtUtc")), m_ApprovedAtUtc));
    }
}

bool DocumentTypeDetailsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationId"))))
    {
        utility::string_t refVal_organizationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationId"))), refVal_organizationId );
        setOrganizationId(refVal_organizationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryType"))))
    {
        std::shared_ptr<DocumentCategoryType> refVal_categoryType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryType"))), refVal_categoryType );
        setCategoryType(refVal_categoryType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subCategoryType"))))
    {
        std::shared_ptr<DocumentSubCategoryType> refVal_subCategoryType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subCategoryType"))), refVal_subCategoryType );
        setSubCategoryType(refVal_subCategoryType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentTypeCategoryId"))))
    {
        utility::string_t refVal_documentTypeCategoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentTypeCategoryId"))), refVal_documentTypeCategoryId );
        setDocumentTypeCategoryId(refVal_documentTypeCategoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slug"))))
    {
        utility::string_t refVal_slug;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slug"))), refVal_slug );
        setSlug(refVal_slug);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logoUrl"))))
    {
        utility::string_t refVal_logoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logoUrl"))), refVal_logoUrl );
        setLogoUrl(refVal_logoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryIso2"))))
    {
        utility::string_t refVal_countryIso2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryIso2"))), refVal_countryIso2 );
        setCountryIso2(refVal_countryIso2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryId"))))
    {
        utility::string_t refVal_countryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryId"))), refVal_countryId );
        setCountryId(refVal_countryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("searchServiceId"))))
    {
        utility::string_t refVal_searchServiceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("searchServiceId"))), refVal_searchServiceId );
        setSearchServiceId(refVal_searchServiceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("repositoryServiceId"))))
    {
        utility::string_t refVal_repositoryServiceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("repositoryServiceId"))), refVal_repositoryServiceId );
        setRepositoryServiceId(refVal_repositoryServiceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportedEntityType"))))
    {
        std::shared_ptr<SupportedEntityType> refVal_supportedEntityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportedEntityType"))), refVal_supportedEntityType );
        setSupportedEntityType(refVal_supportedEntityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addedBy"))))
    {
        utility::string_t refVal_addedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addedBy"))), refVal_addedBy );
        setAddedBy(refVal_addedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("payableAmount"))))
    {
        double refVal_payableAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("payableAmount"))), refVal_payableAmount );
        setPayableAmount(refVal_payableAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        utility::datetime refVal_approvedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedAtUtc"))), refVal_approvedAtUtc );
        setApprovedAtUtc(refVal_approvedAtUtc);
    }
    return ok;
}

utility::string_t DocumentTypeDetailsDto::getId() const
{
    return m_Id;
}

void DocumentTypeDetailsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DocumentTypeDetailsDto::idIsSet() const
{
    return m_IdIsSet;
}

void DocumentTypeDetailsDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getOrganizationId() const
{
    return m_OrganizationId;
}

void DocumentTypeDetailsDto::setOrganizationId(const utility::string_t& value)
{
    m_OrganizationId = value;
    m_OrganizationIdIsSet = true;
}

bool DocumentTypeDetailsDto::organizationIdIsSet() const
{
    return m_OrganizationIdIsSet;
}

void DocumentTypeDetailsDto::unsetOrganizationId()
{
    m_OrganizationIdIsSet = false;
}
std::shared_ptr<DocumentCategoryType> DocumentTypeDetailsDto::getCategoryType() const
{
    return m_CategoryType;
}

void DocumentTypeDetailsDto::setCategoryType(const std::shared_ptr<DocumentCategoryType>& value)
{
    m_CategoryType = value;
    m_CategoryTypeIsSet = true;
}

bool DocumentTypeDetailsDto::categoryTypeIsSet() const
{
    return m_CategoryTypeIsSet;
}

void DocumentTypeDetailsDto::unsetCategoryType()
{
    m_CategoryTypeIsSet = false;
}
std::shared_ptr<DocumentSubCategoryType> DocumentTypeDetailsDto::getSubCategoryType() const
{
    return m_SubCategoryType;
}

void DocumentTypeDetailsDto::setSubCategoryType(const std::shared_ptr<DocumentSubCategoryType>& value)
{
    m_SubCategoryType = value;
    m_SubCategoryTypeIsSet = true;
}

bool DocumentTypeDetailsDto::subCategoryTypeIsSet() const
{
    return m_SubCategoryTypeIsSet;
}

void DocumentTypeDetailsDto::unsetSubCategoryType()
{
    m_SubCategoryTypeIsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getDocumentTypeCategoryId() const
{
    return m_DocumentTypeCategoryId;
}

void DocumentTypeDetailsDto::setDocumentTypeCategoryId(const utility::string_t& value)
{
    m_DocumentTypeCategoryId = value;
    m_DocumentTypeCategoryIdIsSet = true;
}

bool DocumentTypeDetailsDto::documentTypeCategoryIdIsSet() const
{
    return m_DocumentTypeCategoryIdIsSet;
}

void DocumentTypeDetailsDto::unsetDocumentTypeCategoryId()
{
    m_DocumentTypeCategoryIdIsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getName() const
{
    return m_Name;
}

void DocumentTypeDetailsDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DocumentTypeDetailsDto::nameIsSet() const
{
    return m_NameIsSet;
}

void DocumentTypeDetailsDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getSlug() const
{
    return m_Slug;
}

void DocumentTypeDetailsDto::setSlug(const utility::string_t& value)
{
    m_Slug = value;
    m_SlugIsSet = true;
}

bool DocumentTypeDetailsDto::slugIsSet() const
{
    return m_SlugIsSet;
}

void DocumentTypeDetailsDto::unsetSlug()
{
    m_SlugIsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getDescription() const
{
    return m_Description;
}

void DocumentTypeDetailsDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool DocumentTypeDetailsDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void DocumentTypeDetailsDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getLogoUrl() const
{
    return m_LogoUrl;
}

void DocumentTypeDetailsDto::setLogoUrl(const utility::string_t& value)
{
    m_LogoUrl = value;
    m_LogoUrlIsSet = true;
}

bool DocumentTypeDetailsDto::logoUrlIsSet() const
{
    return m_LogoUrlIsSet;
}

void DocumentTypeDetailsDto::unsetLogoUrl()
{
    m_LogoUrlIsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getCountryIso2() const
{
    return m_CountryIso2;
}

void DocumentTypeDetailsDto::setCountryIso2(const utility::string_t& value)
{
    m_CountryIso2 = value;
    m_CountryIso2IsSet = true;
}

bool DocumentTypeDetailsDto::countryIso2IsSet() const
{
    return m_CountryIso2IsSet;
}

void DocumentTypeDetailsDto::unsetCountryIso2()
{
    m_CountryIso2IsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getCountryId() const
{
    return m_CountryId;
}

void DocumentTypeDetailsDto::setCountryId(const utility::string_t& value)
{
    m_CountryId = value;
    m_CountryIdIsSet = true;
}

bool DocumentTypeDetailsDto::countryIdIsSet() const
{
    return m_CountryIdIsSet;
}

void DocumentTypeDetailsDto::unsetCountryId()
{
    m_CountryIdIsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getSearchServiceId() const
{
    return m_SearchServiceId;
}

void DocumentTypeDetailsDto::setSearchServiceId(const utility::string_t& value)
{
    m_SearchServiceId = value;
    m_SearchServiceIdIsSet = true;
}

bool DocumentTypeDetailsDto::searchServiceIdIsSet() const
{
    return m_SearchServiceIdIsSet;
}

void DocumentTypeDetailsDto::unsetSearchServiceId()
{
    m_SearchServiceIdIsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getRepositoryServiceId() const
{
    return m_RepositoryServiceId;
}

void DocumentTypeDetailsDto::setRepositoryServiceId(const utility::string_t& value)
{
    m_RepositoryServiceId = value;
    m_RepositoryServiceIdIsSet = true;
}

bool DocumentTypeDetailsDto::repositoryServiceIdIsSet() const
{
    return m_RepositoryServiceIdIsSet;
}

void DocumentTypeDetailsDto::unsetRepositoryServiceId()
{
    m_RepositoryServiceIdIsSet = false;
}
std::shared_ptr<SupportedEntityType> DocumentTypeDetailsDto::getSupportedEntityType() const
{
    return m_SupportedEntityType;
}

void DocumentTypeDetailsDto::setSupportedEntityType(const std::shared_ptr<SupportedEntityType>& value)
{
    m_SupportedEntityType = value;
    m_SupportedEntityTypeIsSet = true;
}

bool DocumentTypeDetailsDto::supportedEntityTypeIsSet() const
{
    return m_SupportedEntityTypeIsSet;
}

void DocumentTypeDetailsDto::unsetSupportedEntityType()
{
    m_SupportedEntityTypeIsSet = false;
}
utility::string_t DocumentTypeDetailsDto::getAddedBy() const
{
    return m_AddedBy;
}

void DocumentTypeDetailsDto::setAddedBy(const utility::string_t& value)
{
    m_AddedBy = value;
    m_AddedByIsSet = true;
}

bool DocumentTypeDetailsDto::addedByIsSet() const
{
    return m_AddedByIsSet;
}

void DocumentTypeDetailsDto::unsetAddedBy()
{
    m_AddedByIsSet = false;
}
double DocumentTypeDetailsDto::getPayableAmount() const
{
    return m_PayableAmount;
}

void DocumentTypeDetailsDto::setPayableAmount(double value)
{
    m_PayableAmount = value;
    m_PayableAmountIsSet = true;
}

bool DocumentTypeDetailsDto::payableAmountIsSet() const
{
    return m_PayableAmountIsSet;
}

void DocumentTypeDetailsDto::unsetPayableAmount()
{
    m_PayableAmountIsSet = false;
}
utility::datetime DocumentTypeDetailsDto::getApprovedAtUtc() const
{
    return m_ApprovedAtUtc;
}

void DocumentTypeDetailsDto::setApprovedAtUtc(const utility::datetime& value)
{
    m_ApprovedAtUtc = value;
    m_ApprovedAtUtcIsSet = true;
}

bool DocumentTypeDetailsDto::approvedAtUtcIsSet() const
{
    return m_ApprovedAtUtcIsSet;
}

void DocumentTypeDetailsDto::unsetApprovedAtUtc()
{
    m_ApprovedAtUtcIsSet = false;
}
}
}


