/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataConsentRequesterDto.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_DataConsentRequesterDto_H_
#define MYDATAMYCONSENT_MODELS_DataConsentRequesterDto_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  DataConsentRequesterDto
    : public ModelBase
{
public:
    DataConsentRequesterDto();
    virtual ~DataConsentRequesterDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DataConsentRequesterDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLogoUrl() const;
    bool logoUrlIsSet() const;
    void unsetLogoUrl();

    void setLogoUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();

    void setLocation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWebsite() const;
    bool websiteIsSet() const;
    void unsetWebsite();

    void setWebsite(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSupportEmail() const;
    bool supportEmailIsSet() const;
    void unsetSupportEmail();

    void setSupportEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHelpLineNumber() const;
    bool helpLineNumberIsSet() const;
    void unsetHelpLineNumber();

    void setHelpLineNumber(const utility::string_t& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_LogoUrl;
    bool m_LogoUrlIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Location;
    bool m_LocationIsSet;
    utility::string_t m_Website;
    bool m_WebsiteIsSet;
    utility::string_t m_SupportEmail;
    bool m_SupportEmailIsSet;
    utility::string_t m_HelpLineNumber;
    bool m_HelpLineNumberIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DataConsentRequesterDto_H_ */
