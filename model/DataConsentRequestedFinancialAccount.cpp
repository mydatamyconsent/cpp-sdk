/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsentRequestedFinancialAccount.h"

namespace mydatamyconsent {
namespace models {




DataConsentRequestedFinancialAccount::DataConsentRequestedFinancialAccount()
{
    m_CustomKey = utility::conversions::to_string_t("");
    m_CustomKeyIsSet = false;
    m_Drn = utility::conversions::to_string_t("");
    m_DrnIsSet = false;
    m_AccountTypeId = utility::conversions::to_string_t("");
    m_AccountTypeIdIsSet = false;
    m_AccountIdentifier = utility::conversions::to_string_t("");
    m_AccountIdentifierIsSet = false;
}

DataConsentRequestedFinancialAccount::~DataConsentRequestedFinancialAccount()
{
}

void DataConsentRequestedFinancialAccount::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentRequestedFinancialAccount::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CustomKeyIsSet)
    {
        val[utility::conversions::to_string_t(U("customKey"))] = ModelBase::toJson(m_CustomKey);
    }
    if(m_DrnIsSet)
    {
        val[utility::conversions::to_string_t(U("drn"))] = ModelBase::toJson(m_Drn);
    }
    if(m_AccountTypeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("accountTypeId"))] = ModelBase::toJson(m_AccountTypeId);
    }
    if(m_AccountIdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("accountIdentifier"))] = ModelBase::toJson(m_AccountIdentifier);
    }

    return val;
}

bool DataConsentRequestedFinancialAccount::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("customKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_customKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_customKey);
            setCustomKey(refVal_customKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("drn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("drn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_drn;
            ok &= ModelBase::fromJson(fieldValue, refVal_drn);
            setDrn(refVal_drn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accountTypeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountTypeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_accountTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_accountTypeId);
            setAccountTypeId(refVal_accountTypeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accountIdentifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountIdentifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_accountIdentifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_accountIdentifier);
            setAccountIdentifier(refVal_accountIdentifier);
        }
    }
    return ok;
}

void DataConsentRequestedFinancialAccount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CustomKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customKey")), m_CustomKey));
    }
    if(m_DrnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("drn")), m_Drn));
    }
    if(m_AccountTypeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountTypeId")), m_AccountTypeId));
    }
    if(m_AccountIdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountIdentifier")), m_AccountIdentifier));
    }
}

bool DataConsentRequestedFinancialAccount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("customKey"))))
    {
        utility::string_t refVal_customKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customKey"))), refVal_customKey );
        setCustomKey(refVal_customKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("drn"))))
    {
        utility::string_t refVal_drn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("drn"))), refVal_drn );
        setDrn(refVal_drn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accountTypeId"))))
    {
        utility::string_t refVal_accountTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountTypeId"))), refVal_accountTypeId );
        setAccountTypeId(refVal_accountTypeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accountIdentifier"))))
    {
        utility::string_t refVal_accountIdentifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountIdentifier"))), refVal_accountIdentifier );
        setAccountIdentifier(refVal_accountIdentifier);
    }
    return ok;
}

utility::string_t DataConsentRequestedFinancialAccount::getCustomKey() const
{
    return m_CustomKey;
}

void DataConsentRequestedFinancialAccount::setCustomKey(const utility::string_t& value)
{
    m_CustomKey = value;
    m_CustomKeyIsSet = true;
}

bool DataConsentRequestedFinancialAccount::customKeyIsSet() const
{
    return m_CustomKeyIsSet;
}

void DataConsentRequestedFinancialAccount::unsetCustomKey()
{
    m_CustomKeyIsSet = false;
}
utility::string_t DataConsentRequestedFinancialAccount::getDrn() const
{
    return m_Drn;
}

void DataConsentRequestedFinancialAccount::setDrn(const utility::string_t& value)
{
    m_Drn = value;
    m_DrnIsSet = true;
}

bool DataConsentRequestedFinancialAccount::drnIsSet() const
{
    return m_DrnIsSet;
}

void DataConsentRequestedFinancialAccount::unsetDrn()
{
    m_DrnIsSet = false;
}
utility::string_t DataConsentRequestedFinancialAccount::getAccountTypeId() const
{
    return m_AccountTypeId;
}

void DataConsentRequestedFinancialAccount::setAccountTypeId(const utility::string_t& value)
{
    m_AccountTypeId = value;
    m_AccountTypeIdIsSet = true;
}

bool DataConsentRequestedFinancialAccount::accountTypeIdIsSet() const
{
    return m_AccountTypeIdIsSet;
}

void DataConsentRequestedFinancialAccount::unsetAccountTypeId()
{
    m_AccountTypeIdIsSet = false;
}
utility::string_t DataConsentRequestedFinancialAccount::getAccountIdentifier() const
{
    return m_AccountIdentifier;
}

void DataConsentRequestedFinancialAccount::setAccountIdentifier(const utility::string_t& value)
{
    m_AccountIdentifier = value;
    m_AccountIdentifierIsSet = true;
}

bool DataConsentRequestedFinancialAccount::accountIdentifierIsSet() const
{
    return m_AccountIdentifierIsSet;
}

void DataConsentRequestedFinancialAccount::unsetAccountIdentifier()
{
    m_AccountIdentifierIsSet = false;
}
}
}


