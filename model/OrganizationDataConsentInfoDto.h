/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrganizationDataConsentInfoDto.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_OrganizationDataConsentInfoDto_H_
#define MYDATAMYCONSENT_MODELS_OrganizationDataConsentInfoDto_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "model/DataConsentStatus.h"

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  OrganizationDataConsentInfoDto
    : public ModelBase
{
public:
    OrganizationDataConsentInfoDto();
    virtual ~OrganizationDataConsentInfoDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrganizationDataConsentInfoDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConsentRequestId() const;
    bool consentRequestIdIsSet() const;
    void unsetConsentRequestId();

    void setConsentRequestId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConsentTemplateId() const;
    bool consentTemplateIdIsSet() const;
    void unsetConsentTemplateId();

    void setConsentTemplateId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConsentPurpose() const;
    bool consentPurposeIsSet() const;
    void unsetConsentPurpose();

    void setConsentPurpose(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConsentDescription() const;
    bool consentDescriptionIsSet() const;
    void unsetConsentDescription();

    void setConsentDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataConsentStatus> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<DataConsentStatus>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAtUtc() const;
    bool createdAtUtcIsSet() const;
    void unsetCreatedAtUtc();

    void setCreatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrganizationId() const;
    bool organizationIdIsSet() const;
    void unsetOrganizationId();

    void setOrganizationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConsentSentToOrganization() const;
    bool consentSentToOrganizationIsSet() const;
    void unsetConsentSentToOrganization();

    void setConsentSentToOrganization(const utility::string_t& value);


protected:
    utility::string_t m_ConsentRequestId;
    bool m_ConsentRequestIdIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::string_t m_ConsentTemplateId;
    bool m_ConsentTemplateIdIsSet;
    utility::string_t m_ConsentPurpose;
    bool m_ConsentPurposeIsSet;
    utility::string_t m_ConsentDescription;
    bool m_ConsentDescriptionIsSet;
    std::shared_ptr<DataConsentStatus> m_Status;
    bool m_StatusIsSet;
    utility::datetime m_CreatedAtUtc;
    bool m_CreatedAtUtcIsSet;
    utility::string_t m_OrganizationId;
    bool m_OrganizationIdIsSet;
    utility::string_t m_ConsentSentToOrganization;
    bool m_ConsentSentToOrganizationIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_OrganizationDataConsentInfoDto_H_ */
