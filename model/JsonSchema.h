/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * JsonSchema.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_JsonSchema_H_
#define MYDATAMYCONSENT_MODELS_JsonSchema_H_


#include "ModelBase.h"

#include "model/AnyType.h"
#include "Object.h"
#include <map>
#include <vector>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  JsonSchema
    : public ModelBase
{
public:
    JsonSchema();
    virtual ~JsonSchema();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// JsonSchema members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Object>>& getKeywords();
    bool keywordsIsSet() const;
    void unsetKeywords();

    void setKeywords(const std::vector<std::shared_ptr<Object>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<AnyType>>& getOtherData();
    bool otherDataIsSet() const;
    void unsetOtherData();

    void setOtherData(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isBoolValue() const;
    bool boolValueIsSet() const;
    void unsetBoolValue();

    void setBoolValue(bool value);


protected:
    std::vector<std::shared_ptr<Object>> m_Keywords;
    bool m_KeywordsIsSet;
    std::map<utility::string_t, std::shared_ptr<AnyType>> m_OtherData;
    bool m_OtherDataIsSet;
    bool m_BoolValue;
    bool m_BoolValueIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_JsonSchema_H_ */
