/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataConsentDetailsDto.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_DataConsentDetailsDto_H_
#define MYDATAMYCONSENT_MODELS_DataConsentDetailsDto_H_


#include "ModelBase.h"

#include "model/AnyType.h"
#include "model/CollectibleTypes.h"
#include "model/DataConsentDocumentDetailsDto.h"
#include <cpprest/details/basic_types.h>
#include "model/Requester.h"
#include <vector>
#include "model/DataConsentStatus.h"
#include "model/Life.h"

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  DataConsentDetailsDto
    : public ModelBase
{
public:
    DataConsentDetailsDto();
    virtual ~DataConsentDetailsDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DataConsentDetailsDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConsentRequestId() const;
    bool consentRequestIdIsSet() const;
    void unsetConsentRequestId();

    void setConsentRequestId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle() const;
    bool titleIsSet() const;
    void unsetTitle();

    void setTitle(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Life> getDataLife() const;
    bool dataLifeIsSet() const;
    void unsetDataLife();

    void setDataLife(const std::shared_ptr<Life>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Requester> getRequestedByOrg() const;
    bool requestedByOrgIsSet() const;
    void unsetRequestedByOrg();

    void setRequestedByOrg(const std::shared_ptr<Requester>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<CollectibleTypes>>& getCollectables();
    bool collectablesIsSet() const;
    void unsetCollectables();

    void setCollectables(const std::vector<std::shared_ptr<CollectibleTypes>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataConsentStatus> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<DataConsentStatus>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getApprovedAtUtc() const;
    bool approvedAtUtcIsSet() const;
    void unsetApprovedAtUtc();

    void setApprovedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getApprovedExpiresAtUtc() const;
    bool approvedExpiresAtUtcIsSet() const;
    void unsetApprovedExpiresAtUtc();

    void setApprovedExpiresAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRejectedAtUtc() const;
    bool rejectedAtUtcIsSet() const;
    void unsetRejectedAtUtc();

    void setRejectedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRevokedAtUtc() const;
    bool revokedAtUtcIsSet() const;
    void unsetRevokedAtUtc();

    void setRevokedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRequestedExpiresAtUtc() const;
    bool requestedExpiresAtUtcIsSet() const;
    void unsetRequestedExpiresAtUtc();

    void setRequestedExpiresAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRequestedAtUtc() const;
    bool requestedAtUtcIsSet() const;
    void unsetRequestedAtUtc();

    void setRequestedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIdentifiers() const;
    bool identifiersIsSet() const;
    void unsetIdentifiers();

    void setIdentifiers(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>>& getDocuments();
    bool documentsIsSet() const;
    void unsetDocuments();

    void setDocuments(const std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>>& value);


protected:
    utility::string_t m_ConsentRequestId;
    bool m_ConsentRequestIdIsSet;
    utility::string_t m_Title;
    bool m_TitleIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::shared_ptr<Life> m_DataLife;
    bool m_DataLifeIsSet;
    std::shared_ptr<Requester> m_RequestedByOrg;
    bool m_RequestedByOrgIsSet;
    std::vector<std::shared_ptr<CollectibleTypes>> m_Collectables;
    bool m_CollectablesIsSet;
    std::shared_ptr<DataConsentStatus> m_Status;
    bool m_StatusIsSet;
    utility::datetime m_ApprovedAtUtc;
    bool m_ApprovedAtUtcIsSet;
    utility::datetime m_ApprovedExpiresAtUtc;
    bool m_ApprovedExpiresAtUtcIsSet;
    utility::datetime m_RejectedAtUtc;
    bool m_RejectedAtUtcIsSet;
    utility::datetime m_RevokedAtUtc;
    bool m_RevokedAtUtcIsSet;
    utility::datetime m_RequestedExpiresAtUtc;
    bool m_RequestedExpiresAtUtcIsSet;
    utility::datetime m_RequestedAtUtc;
    bool m_RequestedAtUtcIsSet;
    std::shared_ptr<AnyType> m_Identifiers;
    bool m_IdentifiersIsSet;
    std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>> m_Documents;
    bool m_DocumentsIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DataConsentDetailsDto_H_ */
