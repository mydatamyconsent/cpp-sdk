/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrganizationType.h"

namespace mydatamyconsent {
namespace models {




OrganizationType::OrganizationType()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_CountryId = utility::conversions::to_string_t("");
    m_CountryIdIsSet = false;
    m_r_typeName = utility::conversions::to_string_t("");
    m_r_typeNameIsSet = false;
    m_ElfCode = utility::conversions::to_string_t("");
    m_ElfCodeIsSet = false;
    m_CountryIsSet = false;
}

OrganizationType::~OrganizationType()
{
}

void OrganizationType::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationType::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_CountryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("countryId"))] = ModelBase::toJson(m_CountryId);
    }
    if(m_r_typeNameIsSet)
    {
        val[utility::conversions::to_string_t(U("typeName"))] = ModelBase::toJson(m_r_typeName);
    }
    if(m_ElfCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("elfCode"))] = ModelBase::toJson(m_ElfCode);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }

    return val;
}

bool OrganizationType::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_countryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryId);
            setCountryId(refVal_countryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("typeName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("typeName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeName);
            setRTypeName(refVal_typeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("elfCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("elfCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elfCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_elfCode);
            setElfCode(refVal_elfCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> refVal_country;
            ok &= ModelBase::fromJson(fieldValue, refVal_country);
            setCountry(refVal_country);
        }
    }
    return ok;
}

void OrganizationType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_CountryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryId")), m_CountryId));
    }
    if(m_r_typeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("typeName")), m_r_typeName));
    }
    if(m_ElfCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("elfCode")), m_ElfCode));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
}

bool OrganizationType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryId"))))
    {
        utility::string_t refVal_countryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryId"))), refVal_countryId );
        setCountryId(refVal_countryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("typeName"))))
    {
        utility::string_t refVal_typeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("typeName"))), refVal_typeName );
        setRTypeName(refVal_typeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("elfCode"))))
    {
        utility::string_t refVal_elfCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("elfCode"))), refVal_elfCode );
        setElfCode(refVal_elfCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        std::shared_ptr<Country> refVal_country;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_country );
        setCountry(refVal_country);
    }
    return ok;
}

utility::string_t OrganizationType::getId() const
{
    return m_Id;
}

void OrganizationType::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrganizationType::idIsSet() const
{
    return m_IdIsSet;
}

void OrganizationType::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrganizationType::getCountryId() const
{
    return m_CountryId;
}

void OrganizationType::setCountryId(const utility::string_t& value)
{
    m_CountryId = value;
    m_CountryIdIsSet = true;
}

bool OrganizationType::countryIdIsSet() const
{
    return m_CountryIdIsSet;
}

void OrganizationType::unsetCountryId()
{
    m_CountryIdIsSet = false;
}
utility::string_t OrganizationType::getRTypeName() const
{
    return m_r_typeName;
}

void OrganizationType::setRTypeName(const utility::string_t& value)
{
    m_r_typeName = value;
    m_r_typeNameIsSet = true;
}

bool OrganizationType::rTypeNameIsSet() const
{
    return m_r_typeNameIsSet;
}

void OrganizationType::unsetr_typeName()
{
    m_r_typeNameIsSet = false;
}
utility::string_t OrganizationType::getElfCode() const
{
    return m_ElfCode;
}

void OrganizationType::setElfCode(const utility::string_t& value)
{
    m_ElfCode = value;
    m_ElfCodeIsSet = true;
}

bool OrganizationType::elfCodeIsSet() const
{
    return m_ElfCodeIsSet;
}

void OrganizationType::unsetElfCode()
{
    m_ElfCodeIsSet = false;
}
std::shared_ptr<Country> OrganizationType::getCountry() const
{
    return m_Country;
}

void OrganizationType::setCountry(const std::shared_ptr<Country>& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool OrganizationType::countryIsSet() const
{
    return m_CountryIsSet;
}

void OrganizationType::unsetCountry()
{
    m_CountryIsSet = false;
}
}
}


