/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataProvider.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_DataProvider_H_
#define MYDATAMYCONSENT_MODELS_DataProvider_H_


#include "ModelBase.h"

#include "model/DataProtectionOfficer.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  DataProvider
    : public ModelBase
{
public:
    DataProvider();
    virtual ~DataProvider();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DataProvider members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();

    void setCategory(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLogoUrl() const;
    bool logoUrlIsSet() const;
    void unsetLogoUrl();

    void setLogoUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWebsite() const;
    bool websiteIsSet() const;
    void unsetWebsite();

    void setWebsite(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSupportEmail() const;
    bool supportEmailIsSet() const;
    void unsetSupportEmail();

    void setSupportEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHelpLineNumber() const;
    bool helpLineNumberIsSet() const;
    void unsetHelpLineNumber();

    void setHelpLineNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrivacyPolicy() const;
    bool privacyPolicyIsSet() const;
    void unsetPrivacyPolicy();

    void setPrivacyPolicy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTermOfService() const;
    bool termOfServiceIsSet() const;
    void unsetTermOfService();

    void setTermOfService(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataProtectionOfficer> getDataProtectionOfficer() const;
    bool dataProtectionOfficerIsSet() const;
    void unsetDataProtectionOfficer();

    void setDataProtectionOfficer(const std::shared_ptr<DataProtectionOfficer>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getSupportedDocumentTypes();
    bool supportedDocumentTypesIsSet() const;
    void unsetSupportedDocumentTypes();

    void setSupportedDocumentTypes(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getSupportedAccountTypes();
    bool supportedAccountTypesIsSet() const;
    void unsetSupportedAccountTypes();

    void setSupportedAccountTypes(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Category;
    bool m_CategoryIsSet;
    utility::string_t m_LogoUrl;
    bool m_LogoUrlIsSet;
    utility::string_t m_Website;
    bool m_WebsiteIsSet;
    utility::string_t m_SupportEmail;
    bool m_SupportEmailIsSet;
    utility::string_t m_HelpLineNumber;
    bool m_HelpLineNumberIsSet;
    utility::string_t m_PrivacyPolicy;
    bool m_PrivacyPolicyIsSet;
    utility::string_t m_TermOfService;
    bool m_TermOfServiceIsSet;
    std::shared_ptr<DataProtectionOfficer> m_DataProtectionOfficer;
    bool m_DataProtectionOfficerIsSet;
    std::vector<utility::string_t> m_SupportedDocumentTypes;
    bool m_SupportedDocumentTypesIsSet;
    std::vector<utility::string_t> m_SupportedAccountTypes;
    bool m_SupportedAccountTypesIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DataProvider_H_ */
