/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ApplicationUser.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_ApplicationUser_H_
#define MYDATAMYCONSENT_MODELS_ApplicationUser_H_


#include "ModelBase.h"

#include "model/ApplicationUser.h"
#include "model/Theme.h"
#include "model/Country.h"
#include "model/RefreshToken.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "model/Gender.h"

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  ApplicationUser
    : public ModelBase
{
public:
    ApplicationUser();
    virtual ~ApplicationUser();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ApplicationUser members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserName() const;
    bool userNameIsSet() const;
    void unsetUserName();

    void setUserName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNormalizedUserName() const;
    bool normalizedUserNameIsSet() const;
    void unsetNormalizedUserName();

    void setNormalizedUserName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();

    void setEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNormalizedEmail() const;
    bool normalizedEmailIsSet() const;
    void unsetNormalizedEmail();

    void setNormalizedEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isEmailConfirmed() const;
    bool emailConfirmedIsSet() const;
    void unsetEmailConfirmed();

    void setEmailConfirmed(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPasswordHash() const;
    bool passwordHashIsSet() const;
    void unsetPasswordHash();

    void setPasswordHash(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSecurityStamp() const;
    bool securityStampIsSet() const;
    void unsetSecurityStamp();

    void setSecurityStamp(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConcurrencyStamp() const;
    bool concurrencyStampIsSet() const;
    void unsetConcurrencyStamp();

    void setConcurrencyStamp(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhoneNumber() const;
    bool phoneNumberIsSet() const;
    void unsetPhoneNumber();

    void setPhoneNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isPhoneNumberConfirmed() const;
    bool phoneNumberConfirmedIsSet() const;
    void unsetPhoneNumberConfirmed();

    void setPhoneNumberConfirmed(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isTwoFactorEnabled() const;
    bool twoFactorEnabledIsSet() const;
    void unsetTwoFactorEnabled();

    void setTwoFactorEnabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getLockoutEnd() const;
    bool lockoutEndIsSet() const;
    void unsetLockoutEnd();

    void setLockoutEnd(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    bool isLockoutEnabled() const;
    bool lockoutEnabledIsSet() const;
    void unsetLockoutEnabled();

    void setLockoutEnabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getAccessFailedCount() const;
    bool accessFailedCountIsSet() const;
    void unsetAccessFailedCount();

    void setAccessFailedCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFirstName() const;
    bool firstNameIsSet() const;
    void unsetFirstName();

    void setFirstName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMiddleName() const;
    bool middleNameIsSet() const;
    void unsetMiddleName();

    void setMiddleName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastName() const;
    bool lastNameIsSet() const;
    void unsetLastName();

    void setLastName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFullName() const;
    bool fullNameIsSet() const;
    void unsetFullName();

    void setFullName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Gender> getGender() const;
    bool genderIsSet() const;
    void unsetGender();

    void setGender(const std::shared_ptr<Gender>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDateOfBirth() const;
    bool dateOfBirthIsSet() const;
    void unsetDateOfBirth();

    void setDateOfBirth(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountryId() const;
    bool countryIdIsSet() const;
    void unsetCountryId();

    void setCountryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPostCode() const;
    bool postCodeIsSet() const;
    void unsetPostCode();

    void setPostCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReferredBy() const;
    bool referredByIsSet() const;
    void unsetReferredBy();

    void setReferredBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLanguage() const;
    bool languageIsSet() const;
    void unsetLanguage();

    void setLanguage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Theme> getTheme() const;
    bool themeIsSet() const;
    void unsetTheme();

    void setTheme(const std::shared_ptr<Theme>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDesignation() const;
    bool designationIsSet() const;
    void unsetDesignation();

    void setDesignation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsMarkedForDeletion() const;
    bool isMarkedForDeletionIsSet() const;
    void unsetIsMarkedForDeletion();

    void setIsMarkedForDeletion(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getHardDeleteDate() const;
    bool hardDeleteDateIsSet() const;
    void unsetHardDeleteDate();

    void setHardDeleteDate(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSecurityPin() const;
    bool securityPinIsSet() const;
    void unsetSecurityPin();

    void setSecurityPin(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhotoUrl() const;
    bool photoUrlIsSet() const;
    void unsetPhotoUrl();

    void setPhotoUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReferralCode() const;
    bool referralCodeIsSet() const;
    void unsetReferralCode();

    void setReferralCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRecoveryToken() const;
    bool recoveryTokenIsSet() const;
    void unsetRecoveryToken();

    void setRecoveryToken(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDigiLockerLastSyncDate() const;
    bool digiLockerLastSyncDateIsSet() const;
    void unsetDigiLockerLastSyncDate();

    void setDigiLockerLastSyncDate(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<RefreshToken>>& getRefreshTokens();
    bool refreshTokensIsSet() const;
    void unsetRefreshTokens();

    void setRefreshTokens(const std::vector<std::shared_ptr<RefreshToken>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Country> getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const std::shared_ptr<Country>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getReferredByUser() const;
    bool referredByUserIsSet() const;
    void unsetReferredByUser();

    void setReferredByUser(const std::shared_ptr<ApplicationUser>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_UserName;
    bool m_UserNameIsSet;
    utility::string_t m_NormalizedUserName;
    bool m_NormalizedUserNameIsSet;
    utility::string_t m_Email;
    bool m_EmailIsSet;
    utility::string_t m_NormalizedEmail;
    bool m_NormalizedEmailIsSet;
    bool m_EmailConfirmed;
    bool m_EmailConfirmedIsSet;
    utility::string_t m_PasswordHash;
    bool m_PasswordHashIsSet;
    utility::string_t m_SecurityStamp;
    bool m_SecurityStampIsSet;
    utility::string_t m_ConcurrencyStamp;
    bool m_ConcurrencyStampIsSet;
    utility::string_t m_PhoneNumber;
    bool m_PhoneNumberIsSet;
    bool m_PhoneNumberConfirmed;
    bool m_PhoneNumberConfirmedIsSet;
    bool m_TwoFactorEnabled;
    bool m_TwoFactorEnabledIsSet;
    utility::datetime m_LockoutEnd;
    bool m_LockoutEndIsSet;
    bool m_LockoutEnabled;
    bool m_LockoutEnabledIsSet;
    int32_t m_AccessFailedCount;
    bool m_AccessFailedCountIsSet;
    utility::string_t m_FirstName;
    bool m_FirstNameIsSet;
    utility::string_t m_MiddleName;
    bool m_MiddleNameIsSet;
    utility::string_t m_LastName;
    bool m_LastNameIsSet;
    utility::string_t m_FullName;
    bool m_FullNameIsSet;
    std::shared_ptr<Gender> m_Gender;
    bool m_GenderIsSet;
    utility::datetime m_DateOfBirth;
    bool m_DateOfBirthIsSet;
    utility::string_t m_CountryId;
    bool m_CountryIdIsSet;
    utility::string_t m_PostCode;
    bool m_PostCodeIsSet;
    utility::string_t m_ReferredBy;
    bool m_ReferredByIsSet;
    utility::string_t m_Language;
    bool m_LanguageIsSet;
    std::shared_ptr<Theme> m_Theme;
    bool m_ThemeIsSet;
    utility::string_t m_Designation;
    bool m_DesignationIsSet;
    bool m_IsMarkedForDeletion;
    bool m_IsMarkedForDeletionIsSet;
    utility::datetime m_HardDeleteDate;
    bool m_HardDeleteDateIsSet;
    utility::string_t m_SecurityPin;
    bool m_SecurityPinIsSet;
    utility::string_t m_PhotoUrl;
    bool m_PhotoUrlIsSet;
    utility::string_t m_ReferralCode;
    bool m_ReferralCodeIsSet;
    utility::string_t m_RecoveryToken;
    bool m_RecoveryTokenIsSet;
    utility::datetime m_DigiLockerLastSyncDate;
    bool m_DigiLockerLastSyncDateIsSet;
    std::vector<std::shared_ptr<RefreshToken>> m_RefreshTokens;
    bool m_RefreshTokensIsSet;
    std::shared_ptr<Country> m_Country;
    bool m_CountryIsSet;
    std::shared_ptr<ApplicationUser> m_ReferredByUser;
    bool m_ReferredByUserIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_ApplicationUser_H_ */
