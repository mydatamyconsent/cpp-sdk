/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PaymentRequest.h"

namespace mydatamyconsent {
namespace models {




PaymentRequest::PaymentRequest()
{
    m_Identifier = utility::conversions::to_string_t("");
    m_IdentifierIsSet = false;
    m_Amount = utility::conversions::to_string_t("");
    m_AmountIsSet = false;
    m_CurrencyCode = utility::conversions::to_string_t("");
    m_CurrencyCodeIsSet = false;
    m_PaymentUrl = utility::conversions::to_string_t("");
    m_PaymentUrlIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DueByUtc = utility::datetime();
    m_DueByUtcIsSet = false;
}

PaymentRequest::~PaymentRequest()
{
}

void PaymentRequest::validate()
{
    // TODO: implement validation
}

web::json::value PaymentRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("identifier"))] = ModelBase::toJson(m_Identifier);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t(U("amount"))] = ModelBase::toJson(m_Amount);
    }
    if(m_CurrencyCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("currencyCode"))] = ModelBase::toJson(m_CurrencyCode);
    }
    if(m_PaymentUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("paymentUrl"))] = ModelBase::toJson(m_PaymentUrl);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_DueByUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("dueByUtc"))] = ModelBase::toJson(m_DueByUtc);
    }

    return val;
}

bool PaymentRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("identifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_identifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_identifier);
            setIdentifier(refVal_identifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_amount;
            ok &= ModelBase::fromJson(fieldValue, refVal_amount);
            setAmount(refVal_amount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currencyCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currencyCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_currencyCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_currencyCode);
            setCurrencyCode(refVal_currencyCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paymentUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paymentUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_paymentUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_paymentUrl);
            setPaymentUrl(refVal_paymentUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dueByUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dueByUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_dueByUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_dueByUtc);
            setDueByUtc(refVal_dueByUtc);
        }
    }
    return ok;
}

void PaymentRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifier")), m_Identifier));
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount")), m_Amount));
    }
    if(m_CurrencyCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currencyCode")), m_CurrencyCode));
    }
    if(m_PaymentUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paymentUrl")), m_PaymentUrl));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_DueByUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dueByUtc")), m_DueByUtc));
    }
}

bool PaymentRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("identifier"))))
    {
        utility::string_t refVal_identifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifier"))), refVal_identifier );
        setIdentifier(refVal_identifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount"))))
    {
        utility::string_t refVal_amount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount"))), refVal_amount );
        setAmount(refVal_amount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currencyCode"))))
    {
        utility::string_t refVal_currencyCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currencyCode"))), refVal_currencyCode );
        setCurrencyCode(refVal_currencyCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paymentUrl"))))
    {
        utility::string_t refVal_paymentUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paymentUrl"))), refVal_paymentUrl );
        setPaymentUrl(refVal_paymentUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dueByUtc"))))
    {
        utility::datetime refVal_dueByUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dueByUtc"))), refVal_dueByUtc );
        setDueByUtc(refVal_dueByUtc);
    }
    return ok;
}

utility::string_t PaymentRequest::getIdentifier() const
{
    return m_Identifier;
}

void PaymentRequest::setIdentifier(const utility::string_t& value)
{
    m_Identifier = value;
    m_IdentifierIsSet = true;
}

bool PaymentRequest::identifierIsSet() const
{
    return m_IdentifierIsSet;
}

void PaymentRequest::unsetIdentifier()
{
    m_IdentifierIsSet = false;
}
utility::string_t PaymentRequest::getAmount() const
{
    return m_Amount;
}

void PaymentRequest::setAmount(const utility::string_t& value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool PaymentRequest::amountIsSet() const
{
    return m_AmountIsSet;
}

void PaymentRequest::unsetAmount()
{
    m_AmountIsSet = false;
}
utility::string_t PaymentRequest::getCurrencyCode() const
{
    return m_CurrencyCode;
}

void PaymentRequest::setCurrencyCode(const utility::string_t& value)
{
    m_CurrencyCode = value;
    m_CurrencyCodeIsSet = true;
}

bool PaymentRequest::currencyCodeIsSet() const
{
    return m_CurrencyCodeIsSet;
}

void PaymentRequest::unsetCurrencyCode()
{
    m_CurrencyCodeIsSet = false;
}
utility::string_t PaymentRequest::getPaymentUrl() const
{
    return m_PaymentUrl;
}

void PaymentRequest::setPaymentUrl(const utility::string_t& value)
{
    m_PaymentUrl = value;
    m_PaymentUrlIsSet = true;
}

bool PaymentRequest::paymentUrlIsSet() const
{
    return m_PaymentUrlIsSet;
}

void PaymentRequest::unsetPaymentUrl()
{
    m_PaymentUrlIsSet = false;
}
utility::string_t PaymentRequest::getDescription() const
{
    return m_Description;
}

void PaymentRequest::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool PaymentRequest::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void PaymentRequest::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::datetime PaymentRequest::getDueByUtc() const
{
    return m_DueByUtc;
}

void PaymentRequest::setDueByUtc(const utility::datetime& value)
{
    m_DueByUtc = value;
    m_DueByUtcIsSet = true;
}

bool PaymentRequest::dueByUtcIsSet() const
{
    return m_DueByUtcIsSet;
}

void PaymentRequest::unsetDueByUtc()
{
    m_DueByUtcIsSet = false;
}
}
}


