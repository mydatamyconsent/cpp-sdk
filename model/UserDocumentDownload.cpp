/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UserDocumentDownload.h"

namespace mydatamyconsent {
namespace models {




UserDocumentDownload::UserDocumentDownload()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_DownloadUrl = utility::conversions::to_string_t("");
    m_DownloadUrlIsSet = false;
    m_ExpiresAtUtc = utility::datetime();
    m_ExpiresAtUtcIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
}

UserDocumentDownload::~UserDocumentDownload()
{
}

void UserDocumentDownload::validate()
{
    // TODO: implement validation
}

web::json::value UserDocumentDownload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DownloadUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("downloadUrl"))] = ModelBase::toJson(m_DownloadUrl);
    }
    if(m_ExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAtUtc"))] = ModelBase::toJson(m_ExpiresAtUtc);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("ownerId"))] = ModelBase::toJson(m_OwnerId);
    }

    return val;
}

bool UserDocumentDownload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("downloadUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("downloadUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_downloadUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_downloadUrl);
            setDownloadUrl(refVal_downloadUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_expiresAtUtc);
            setExpiresAtUtc(refVal_expiresAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ownerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ownerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerId);
            setOwnerId(refVal_ownerId);
        }
    }
    return ok;
}

void UserDocumentDownload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DownloadUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("downloadUrl")), m_DownloadUrl));
    }
    if(m_ExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAtUtc")), m_ExpiresAtUtc));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ownerId")), m_OwnerId));
    }
}

bool UserDocumentDownload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("downloadUrl"))))
    {
        utility::string_t refVal_downloadUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("downloadUrl"))), refVal_downloadUrl );
        setDownloadUrl(refVal_downloadUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        utility::datetime refVal_expiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAtUtc"))), refVal_expiresAtUtc );
        setExpiresAtUtc(refVal_expiresAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ownerId"))))
    {
        utility::string_t refVal_ownerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ownerId"))), refVal_ownerId );
        setOwnerId(refVal_ownerId);
    }
    return ok;
}

utility::string_t UserDocumentDownload::getId() const
{
    return m_Id;
}

void UserDocumentDownload::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UserDocumentDownload::idIsSet() const
{
    return m_IdIsSet;
}

void UserDocumentDownload::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UserDocumentDownload::getDownloadUrl() const
{
    return m_DownloadUrl;
}

void UserDocumentDownload::setDownloadUrl(const utility::string_t& value)
{
    m_DownloadUrl = value;
    m_DownloadUrlIsSet = true;
}

bool UserDocumentDownload::downloadUrlIsSet() const
{
    return m_DownloadUrlIsSet;
}

void UserDocumentDownload::unsetDownloadUrl()
{
    m_DownloadUrlIsSet = false;
}
utility::datetime UserDocumentDownload::getExpiresAtUtc() const
{
    return m_ExpiresAtUtc;
}

void UserDocumentDownload::setExpiresAtUtc(const utility::datetime& value)
{
    m_ExpiresAtUtc = value;
    m_ExpiresAtUtcIsSet = true;
}

bool UserDocumentDownload::expiresAtUtcIsSet() const
{
    return m_ExpiresAtUtcIsSet;
}

void UserDocumentDownload::unsetExpiresAtUtc()
{
    m_ExpiresAtUtcIsSet = false;
}
utility::string_t UserDocumentDownload::getOwnerId() const
{
    return m_OwnerId;
}

void UserDocumentDownload::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool UserDocumentDownload::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void UserDocumentDownload::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
}
}


