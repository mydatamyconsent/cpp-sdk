/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IndividualDataConsentDocument.h"

namespace mydatamyconsent {
namespace models {




IndividualDataConsentDocument::IndividualDataConsentDocument()
{
    m_Approver = utility::conversions::to_string_t("");
    m_ApproverIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_ConsentId = utility::conversions::to_string_t("");
    m_ConsentIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Identifier = utility::conversions::to_string_t("");
    m_IdentifierIsSet = false;
}

IndividualDataConsentDocument::~IndividualDataConsentDocument()
{
}

void IndividualDataConsentDocument::validate()
{
    // TODO: implement validation
}

web::json::value IndividualDataConsentDocument::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ApproverIsSet)
    {
        val[utility::conversions::to_string_t(U("approver"))] = ModelBase::toJson(m_Approver);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ConsentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("consentId"))] = ModelBase::toJson(m_ConsentId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_IdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("identifier"))] = ModelBase::toJson(m_Identifier);
    }

    return val;
}

bool IndividualDataConsentDocument::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("approver"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approver")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_approver;
            ok &= ModelBase::fromJson(fieldValue, refVal_approver);
            setApprover(refVal_approver);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consentId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_consentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_consentId);
            setConsentId(refVal_consentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_identifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_identifier);
            setIdentifier(refVal_identifier);
        }
    }
    return ok;
}

void IndividualDataConsentDocument::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ApproverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approver")), m_Approver));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ConsentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consentId")), m_ConsentId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_IdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifier")), m_Identifier));
    }
}

bool IndividualDataConsentDocument::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("approver"))))
    {
        utility::string_t refVal_approver;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approver"))), refVal_approver );
        setApprover(refVal_approver);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consentId"))))
    {
        utility::string_t refVal_consentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consentId"))), refVal_consentId );
        setConsentId(refVal_consentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identifier"))))
    {
        utility::string_t refVal_identifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifier"))), refVal_identifier );
        setIdentifier(refVal_identifier);
    }
    return ok;
}

utility::string_t IndividualDataConsentDocument::getApprover() const
{
    return m_Approver;
}

void IndividualDataConsentDocument::setApprover(const utility::string_t& value)
{
    m_Approver = value;
    m_ApproverIsSet = true;
}

bool IndividualDataConsentDocument::approverIsSet() const
{
    return m_ApproverIsSet;
}

void IndividualDataConsentDocument::unsetApprover()
{
    m_ApproverIsSet = false;
}
utility::string_t IndividualDataConsentDocument::getId() const
{
    return m_Id;
}

void IndividualDataConsentDocument::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool IndividualDataConsentDocument::idIsSet() const
{
    return m_IdIsSet;
}

void IndividualDataConsentDocument::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t IndividualDataConsentDocument::getConsentId() const
{
    return m_ConsentId;
}

void IndividualDataConsentDocument::setConsentId(const utility::string_t& value)
{
    m_ConsentId = value;
    m_ConsentIdIsSet = true;
}

bool IndividualDataConsentDocument::consentIdIsSet() const
{
    return m_ConsentIdIsSet;
}

void IndividualDataConsentDocument::unsetConsentId()
{
    m_ConsentIdIsSet = false;
}
utility::string_t IndividualDataConsentDocument::getName() const
{
    return m_Name;
}

void IndividualDataConsentDocument::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool IndividualDataConsentDocument::nameIsSet() const
{
    return m_NameIsSet;
}

void IndividualDataConsentDocument::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t IndividualDataConsentDocument::getIdentifier() const
{
    return m_Identifier;
}

void IndividualDataConsentDocument::setIdentifier(const utility::string_t& value)
{
    m_Identifier = value;
    m_IdentifierIsSet = true;
}

bool IndividualDataConsentDocument::identifierIsSet() const
{
    return m_IdentifierIsSet;
}

void IndividualDataConsentDocument::unsetIdentifier()
{
    m_IdentifierIsSet = false;
}
}
}


