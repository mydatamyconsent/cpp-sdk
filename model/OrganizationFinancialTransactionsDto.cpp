/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrganizationFinancialTransactionsDto.h"

namespace mydatamyconsent {
namespace models {




OrganizationFinancialTransactionsDto::OrganizationFinancialTransactionsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_AccountId = utility::conversions::to_string_t("");
    m_AccountIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_InstrumentId = utility::conversions::to_string_t("");
    m_InstrumentIdIsSet = false;
    m_TransactionType = utility::conversions::to_string_t("");
    m_TransactionTypeIsSet = false;
    m_Quantity = 0;
    m_QuantityIsSet = false;
    m_AveragePrice = 0.0;
    m_AveragePriceIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
}

OrganizationFinancialTransactionsDto::~OrganizationFinancialTransactionsDto()
{
}

void OrganizationFinancialTransactionsDto::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationFinancialTransactionsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_AccountIdIsSet)
    {
        val[utility::conversions::to_string_t(U("accountId"))] = ModelBase::toJson(m_AccountId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_InstrumentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("instrumentId"))] = ModelBase::toJson(m_InstrumentId);
    }
    if(m_TransactionTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("transactionType"))] = ModelBase::toJson(m_TransactionType);
    }
    if(m_QuantityIsSet)
    {
        val[utility::conversions::to_string_t(U("quantity"))] = ModelBase::toJson(m_Quantity);
    }
    if(m_AveragePriceIsSet)
    {
        val[utility::conversions::to_string_t(U("averagePrice"))] = ModelBase::toJson(m_AveragePrice);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }

    return val;
}

bool OrganizationFinancialTransactionsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accountId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_accountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_accountId);
            setAccountId(refVal_accountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instrumentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instrumentId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_instrumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_instrumentId);
            setInstrumentId(refVal_instrumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transactionType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transactionType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_transactionType;
            ok &= ModelBase::fromJson(fieldValue, refVal_transactionType);
            setTransactionType(refVal_transactionType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_quantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_quantity);
            setQuantity(refVal_quantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("averagePrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("averagePrice")));
        if(!fieldValue.is_null())
        {
            double refVal_averagePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_averagePrice);
            setAveragePrice(refVal_averagePrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_currency;
            ok &= ModelBase::fromJson(fieldValue, refVal_currency);
            setCurrency(refVal_currency);
        }
    }
    return ok;
}

void OrganizationFinancialTransactionsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_AccountIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountId")), m_AccountId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_InstrumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instrumentId")), m_InstrumentId));
    }
    if(m_TransactionTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transactionType")), m_TransactionType));
    }
    if(m_QuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quantity")), m_Quantity));
    }
    if(m_AveragePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("averagePrice")), m_AveragePrice));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
}

bool OrganizationFinancialTransactionsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accountId"))))
    {
        utility::string_t refVal_accountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountId"))), refVal_accountId );
        setAccountId(refVal_accountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instrumentId"))))
    {
        utility::string_t refVal_instrumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instrumentId"))), refVal_instrumentId );
        setInstrumentId(refVal_instrumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transactionType"))))
    {
        utility::string_t refVal_transactionType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transactionType"))), refVal_transactionType );
        setTransactionType(refVal_transactionType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quantity"))))
    {
        int32_t refVal_quantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quantity"))), refVal_quantity );
        setQuantity(refVal_quantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("averagePrice"))))
    {
        double refVal_averagePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("averagePrice"))), refVal_averagePrice );
        setAveragePrice(refVal_averagePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        utility::string_t refVal_currency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_currency );
        setCurrency(refVal_currency);
    }
    return ok;
}

utility::string_t OrganizationFinancialTransactionsDto::getId() const
{
    return m_Id;
}

void OrganizationFinancialTransactionsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrganizationFinancialTransactionsDto::idIsSet() const
{
    return m_IdIsSet;
}

void OrganizationFinancialTransactionsDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrganizationFinancialTransactionsDto::getAccountId() const
{
    return m_AccountId;
}

void OrganizationFinancialTransactionsDto::setAccountId(const utility::string_t& value)
{
    m_AccountId = value;
    m_AccountIdIsSet = true;
}

bool OrganizationFinancialTransactionsDto::accountIdIsSet() const
{
    return m_AccountIdIsSet;
}

void OrganizationFinancialTransactionsDto::unsetAccountId()
{
    m_AccountIdIsSet = false;
}
utility::string_t OrganizationFinancialTransactionsDto::getName() const
{
    return m_Name;
}

void OrganizationFinancialTransactionsDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool OrganizationFinancialTransactionsDto::nameIsSet() const
{
    return m_NameIsSet;
}

void OrganizationFinancialTransactionsDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t OrganizationFinancialTransactionsDto::getInstrumentId() const
{
    return m_InstrumentId;
}

void OrganizationFinancialTransactionsDto::setInstrumentId(const utility::string_t& value)
{
    m_InstrumentId = value;
    m_InstrumentIdIsSet = true;
}

bool OrganizationFinancialTransactionsDto::instrumentIdIsSet() const
{
    return m_InstrumentIdIsSet;
}

void OrganizationFinancialTransactionsDto::unsetInstrumentId()
{
    m_InstrumentIdIsSet = false;
}
utility::string_t OrganizationFinancialTransactionsDto::getTransactionType() const
{
    return m_TransactionType;
}

void OrganizationFinancialTransactionsDto::setTransactionType(const utility::string_t& value)
{
    m_TransactionType = value;
    m_TransactionTypeIsSet = true;
}

bool OrganizationFinancialTransactionsDto::transactionTypeIsSet() const
{
    return m_TransactionTypeIsSet;
}

void OrganizationFinancialTransactionsDto::unsetTransactionType()
{
    m_TransactionTypeIsSet = false;
}
int32_t OrganizationFinancialTransactionsDto::getQuantity() const
{
    return m_Quantity;
}

void OrganizationFinancialTransactionsDto::setQuantity(int32_t value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}

bool OrganizationFinancialTransactionsDto::quantityIsSet() const
{
    return m_QuantityIsSet;
}

void OrganizationFinancialTransactionsDto::unsetQuantity()
{
    m_QuantityIsSet = false;
}
double OrganizationFinancialTransactionsDto::getAveragePrice() const
{
    return m_AveragePrice;
}

void OrganizationFinancialTransactionsDto::setAveragePrice(double value)
{
    m_AveragePrice = value;
    m_AveragePriceIsSet = true;
}

bool OrganizationFinancialTransactionsDto::averagePriceIsSet() const
{
    return m_AveragePriceIsSet;
}

void OrganizationFinancialTransactionsDto::unsetAveragePrice()
{
    m_AveragePriceIsSet = false;
}
utility::string_t OrganizationFinancialTransactionsDto::getCurrency() const
{
    return m_Currency;
}

void OrganizationFinancialTransactionsDto::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool OrganizationFinancialTransactionsDto::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void OrganizationFinancialTransactionsDto::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
}
}


