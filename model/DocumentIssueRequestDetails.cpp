/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DocumentIssueRequestDetails.h"

namespace mydatamyconsent {
namespace models {




DocumentIssueRequestDetails::DocumentIssueRequestDetails()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_DocumentTypeId = utility::conversions::to_string_t("");
    m_DocumentTypeIdIsSet = false;
    m_r_typeName = utility::conversions::to_string_t("");
    m_r_typeNameIsSet = false;
    m_Identifier = utility::conversions::to_string_t("");
    m_IdentifierIsSet = false;
    m_StatusIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ReceiverIsSet = false;
    m_IssuedAtUtc = utility::datetime();
    m_IssuedAtUtcIsSet = false;
    m_ValidFromUtc = utility::datetime();
    m_ValidFromUtcIsSet = false;
    m_ExpiresAtUtc = utility::datetime();
    m_ExpiresAtUtcIsSet = false;
    m_MetaDataIsSet = false;
    m_CreatedAtUtc = utility::datetime();
    m_CreatedAtUtcIsSet = false;
}

DocumentIssueRequestDetails::~DocumentIssueRequestDetails()
{
}

void DocumentIssueRequestDetails::validate()
{
    // TODO: implement validation
}

web::json::value DocumentIssueRequestDetails::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DocumentTypeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("documentTypeId"))] = ModelBase::toJson(m_DocumentTypeId);
    }
    if(m_r_typeNameIsSet)
    {
        val[utility::conversions::to_string_t(U("typeName"))] = ModelBase::toJson(m_r_typeName);
    }
    if(m_IdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("identifier"))] = ModelBase::toJson(m_Identifier);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_ReceiverIsSet)
    {
        val[utility::conversions::to_string_t(U("receiver"))] = ModelBase::toJson(m_Receiver);
    }
    if(m_IssuedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("issuedAtUtc"))] = ModelBase::toJson(m_IssuedAtUtc);
    }
    if(m_ValidFromUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("validFromUtc"))] = ModelBase::toJson(m_ValidFromUtc);
    }
    if(m_ExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAtUtc"))] = ModelBase::toJson(m_ExpiresAtUtc);
    }
    if(m_MetaDataIsSet)
    {
        val[utility::conversions::to_string_t(U("metaData"))] = ModelBase::toJson(m_MetaData);
    }
    if(m_CreatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAtUtc"))] = ModelBase::toJson(m_CreatedAtUtc);
    }

    return val;
}

bool DocumentIssueRequestDetails::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentTypeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentTypeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentTypeId);
            setDocumentTypeId(refVal_documentTypeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("typeName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("typeName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeName);
            setRTypeName(refVal_typeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_identifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_identifier);
            setIdentifier(refVal_identifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentIssueRequestStatus> refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("receiver"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("receiver")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_receiver;
            ok &= ModelBase::fromJson(fieldValue, refVal_receiver);
            setReceiver(refVal_receiver);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_issuedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuedAtUtc);
            setIssuedAtUtc(refVal_issuedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validFromUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validFromUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_validFromUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_validFromUtc);
            setValidFromUtc(refVal_validFromUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_expiresAtUtc);
            setExpiresAtUtc(refVal_expiresAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metaData"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metaData")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_metaData;
            ok &= ModelBase::fromJson(fieldValue, refVal_metaData);
            setMetaData(refVal_metaData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAtUtc);
            setCreatedAtUtc(refVal_createdAtUtc);
        }
    }
    return ok;
}

void DocumentIssueRequestDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DocumentTypeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentTypeId")), m_DocumentTypeId));
    }
    if(m_r_typeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("typeName")), m_r_typeName));
    }
    if(m_IdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifier")), m_Identifier));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_ReceiverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("receiver")), m_Receiver));
    }
    if(m_IssuedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuedAtUtc")), m_IssuedAtUtc));
    }
    if(m_ValidFromUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validFromUtc")), m_ValidFromUtc));
    }
    if(m_ExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAtUtc")), m_ExpiresAtUtc));
    }
    if(m_MetaDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metaData")), m_MetaData));
    }
    if(m_CreatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAtUtc")), m_CreatedAtUtc));
    }
}

bool DocumentIssueRequestDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentTypeId"))))
    {
        utility::string_t refVal_documentTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentTypeId"))), refVal_documentTypeId );
        setDocumentTypeId(refVal_documentTypeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("typeName"))))
    {
        utility::string_t refVal_typeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("typeName"))), refVal_typeName );
        setRTypeName(refVal_typeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identifier"))))
    {
        utility::string_t refVal_identifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifier"))), refVal_identifier );
        setIdentifier(refVal_identifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<DocumentIssueRequestStatus> refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("receiver"))))
    {
        std::shared_ptr<AnyType> refVal_receiver;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("receiver"))), refVal_receiver );
        setReceiver(refVal_receiver);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuedAtUtc"))))
    {
        utility::datetime refVal_issuedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuedAtUtc"))), refVal_issuedAtUtc );
        setIssuedAtUtc(refVal_issuedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validFromUtc"))))
    {
        utility::datetime refVal_validFromUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validFromUtc"))), refVal_validFromUtc );
        setValidFromUtc(refVal_validFromUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        utility::datetime refVal_expiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAtUtc"))), refVal_expiresAtUtc );
        setExpiresAtUtc(refVal_expiresAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metaData"))))
    {
        std::shared_ptr<AnyType> refVal_metaData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metaData"))), refVal_metaData );
        setMetaData(refVal_metaData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        utility::datetime refVal_createdAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAtUtc"))), refVal_createdAtUtc );
        setCreatedAtUtc(refVal_createdAtUtc);
    }
    return ok;
}

utility::string_t DocumentIssueRequestDetails::getId() const
{
    return m_Id;
}

void DocumentIssueRequestDetails::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DocumentIssueRequestDetails::idIsSet() const
{
    return m_IdIsSet;
}

void DocumentIssueRequestDetails::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DocumentIssueRequestDetails::getDocumentTypeId() const
{
    return m_DocumentTypeId;
}

void DocumentIssueRequestDetails::setDocumentTypeId(const utility::string_t& value)
{
    m_DocumentTypeId = value;
    m_DocumentTypeIdIsSet = true;
}

bool DocumentIssueRequestDetails::documentTypeIdIsSet() const
{
    return m_DocumentTypeIdIsSet;
}

void DocumentIssueRequestDetails::unsetDocumentTypeId()
{
    m_DocumentTypeIdIsSet = false;
}
utility::string_t DocumentIssueRequestDetails::getRTypeName() const
{
    return m_r_typeName;
}

void DocumentIssueRequestDetails::setRTypeName(const utility::string_t& value)
{
    m_r_typeName = value;
    m_r_typeNameIsSet = true;
}

bool DocumentIssueRequestDetails::rTypeNameIsSet() const
{
    return m_r_typeNameIsSet;
}

void DocumentIssueRequestDetails::unsetr_typeName()
{
    m_r_typeNameIsSet = false;
}
utility::string_t DocumentIssueRequestDetails::getIdentifier() const
{
    return m_Identifier;
}

void DocumentIssueRequestDetails::setIdentifier(const utility::string_t& value)
{
    m_Identifier = value;
    m_IdentifierIsSet = true;
}

bool DocumentIssueRequestDetails::identifierIsSet() const
{
    return m_IdentifierIsSet;
}

void DocumentIssueRequestDetails::unsetIdentifier()
{
    m_IdentifierIsSet = false;
}
std::shared_ptr<DocumentIssueRequestStatus> DocumentIssueRequestDetails::getStatus() const
{
    return m_Status;
}

void DocumentIssueRequestDetails::setStatus(const std::shared_ptr<DocumentIssueRequestStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool DocumentIssueRequestDetails::statusIsSet() const
{
    return m_StatusIsSet;
}

void DocumentIssueRequestDetails::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t DocumentIssueRequestDetails::getDescription() const
{
    return m_Description;
}

void DocumentIssueRequestDetails::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool DocumentIssueRequestDetails::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void DocumentIssueRequestDetails::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<AnyType> DocumentIssueRequestDetails::getReceiver() const
{
    return m_Receiver;
}

void DocumentIssueRequestDetails::setReceiver(const std::shared_ptr<AnyType>& value)
{
    m_Receiver = value;
    m_ReceiverIsSet = true;
}

bool DocumentIssueRequestDetails::receiverIsSet() const
{
    return m_ReceiverIsSet;
}

void DocumentIssueRequestDetails::unsetReceiver()
{
    m_ReceiverIsSet = false;
}
utility::datetime DocumentIssueRequestDetails::getIssuedAtUtc() const
{
    return m_IssuedAtUtc;
}

void DocumentIssueRequestDetails::setIssuedAtUtc(const utility::datetime& value)
{
    m_IssuedAtUtc = value;
    m_IssuedAtUtcIsSet = true;
}

bool DocumentIssueRequestDetails::issuedAtUtcIsSet() const
{
    return m_IssuedAtUtcIsSet;
}

void DocumentIssueRequestDetails::unsetIssuedAtUtc()
{
    m_IssuedAtUtcIsSet = false;
}
utility::datetime DocumentIssueRequestDetails::getValidFromUtc() const
{
    return m_ValidFromUtc;
}

void DocumentIssueRequestDetails::setValidFromUtc(const utility::datetime& value)
{
    m_ValidFromUtc = value;
    m_ValidFromUtcIsSet = true;
}

bool DocumentIssueRequestDetails::validFromUtcIsSet() const
{
    return m_ValidFromUtcIsSet;
}

void DocumentIssueRequestDetails::unsetValidFromUtc()
{
    m_ValidFromUtcIsSet = false;
}
utility::datetime DocumentIssueRequestDetails::getExpiresAtUtc() const
{
    return m_ExpiresAtUtc;
}

void DocumentIssueRequestDetails::setExpiresAtUtc(const utility::datetime& value)
{
    m_ExpiresAtUtc = value;
    m_ExpiresAtUtcIsSet = true;
}

bool DocumentIssueRequestDetails::expiresAtUtcIsSet() const
{
    return m_ExpiresAtUtcIsSet;
}

void DocumentIssueRequestDetails::unsetExpiresAtUtc()
{
    m_ExpiresAtUtcIsSet = false;
}
std::shared_ptr<AnyType> DocumentIssueRequestDetails::getMetaData() const
{
    return m_MetaData;
}

void DocumentIssueRequestDetails::setMetaData(const std::shared_ptr<AnyType>& value)
{
    m_MetaData = value;
    m_MetaDataIsSet = true;
}

bool DocumentIssueRequestDetails::metaDataIsSet() const
{
    return m_MetaDataIsSet;
}

void DocumentIssueRequestDetails::unsetMetaData()
{
    m_MetaDataIsSet = false;
}
utility::datetime DocumentIssueRequestDetails::getCreatedAtUtc() const
{
    return m_CreatedAtUtc;
}

void DocumentIssueRequestDetails::setCreatedAtUtc(const utility::datetime& value)
{
    m_CreatedAtUtc = value;
    m_CreatedAtUtcIsSet = true;
}

bool DocumentIssueRequestDetails::createdAtUtcIsSet() const
{
    return m_CreatedAtUtcIsSet;
}

void DocumentIssueRequestDetails::unsetCreatedAtUtc()
{
    m_CreatedAtUtcIsSet = false;
}
}
}


