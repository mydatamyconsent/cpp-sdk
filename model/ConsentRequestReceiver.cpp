/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ConsentRequestReceiver.h"

namespace mydatamyconsent {
namespace models {




ConsentRequestReceiver::ConsentRequestReceiver()
{
    m_IdentifiersIsSet = false;
    m_IdentificationStrategyIsSet = false;
}

ConsentRequestReceiver::~ConsentRequestReceiver()
{
}

void ConsentRequestReceiver::validate()
{
    // TODO: implement validation
}

web::json::value ConsentRequestReceiver::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdentifiersIsSet)
    {
        val[utility::conversions::to_string_t(U("identifiers"))] = ModelBase::toJson(m_Identifiers);
    }
    if(m_IdentificationStrategyIsSet)
    {
        val[utility::conversions::to_string_t(U("identificationStrategy"))] = ModelBase::toJson(m_IdentificationStrategy);
    }

    return val;
}

bool ConsentRequestReceiver::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("identifiers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifiers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<StringStringKeyValuePair>> refVal_identifiers;
            ok &= ModelBase::fromJson(fieldValue, refVal_identifiers);
            setIdentifiers(refVal_identifiers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identificationStrategy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identificationStrategy")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<IdentificationStrategy> refVal_identificationStrategy;
            ok &= ModelBase::fromJson(fieldValue, refVal_identificationStrategy);
            setIdentificationStrategy(refVal_identificationStrategy);
        }
    }
    return ok;
}

void ConsentRequestReceiver::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdentifiersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifiers")), m_Identifiers));
    }
    if(m_IdentificationStrategyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identificationStrategy")), m_IdentificationStrategy));
    }
}

bool ConsentRequestReceiver::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("identifiers"))))
    {
        std::vector<std::shared_ptr<StringStringKeyValuePair>> refVal_identifiers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifiers"))), refVal_identifiers );
        setIdentifiers(refVal_identifiers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identificationStrategy"))))
    {
        std::shared_ptr<IdentificationStrategy> refVal_identificationStrategy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identificationStrategy"))), refVal_identificationStrategy );
        setIdentificationStrategy(refVal_identificationStrategy);
    }
    return ok;
}

std::vector<std::shared_ptr<StringStringKeyValuePair>>& ConsentRequestReceiver::getIdentifiers()
{
    return m_Identifiers;
}

void ConsentRequestReceiver::setIdentifiers(const std::vector<std::shared_ptr<StringStringKeyValuePair>>& value)
{
    m_Identifiers = value;
    m_IdentifiersIsSet = true;
}

bool ConsentRequestReceiver::identifiersIsSet() const
{
    return m_IdentifiersIsSet;
}

void ConsentRequestReceiver::unsetIdentifiers()
{
    m_IdentifiersIsSet = false;
}
std::shared_ptr<IdentificationStrategy> ConsentRequestReceiver::getIdentificationStrategy() const
{
    return m_IdentificationStrategy;
}

void ConsentRequestReceiver::setIdentificationStrategy(const std::shared_ptr<IdentificationStrategy>& value)
{
    m_IdentificationStrategy = value;
    m_IdentificationStrategyIsSet = true;
}

bool ConsentRequestReceiver::identificationStrategyIsSet() const
{
    return m_IdentificationStrategyIsSet;
}

void ConsentRequestReceiver::unsetIdentificationStrategy()
{
    m_IdentificationStrategyIsSet = false;
}
}
}


