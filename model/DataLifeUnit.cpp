/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataLifeUnit.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

DataLifeUnit::eDataLifeUnit toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("Month")))
        return DataLifeUnit::eDataLifeUnit::DataLifeUnit_MONTH;
    if (val == utility::conversions::to_string_t(U("Year")))
        return DataLifeUnit::eDataLifeUnit::DataLifeUnit_YEAR;
    if (val == utility::conversions::to_string_t(U("Day")))
        return DataLifeUnit::eDataLifeUnit::DataLifeUnit_DAY;
    if (val == utility::conversions::to_string_t(U("Forever")))
        return DataLifeUnit::eDataLifeUnit::DataLifeUnit_FOREVER;
    return {};
}

EnumUnderlyingType fromEnum(DataLifeUnit::eDataLifeUnit e)
{
    switch (e)
    {
    case DataLifeUnit::eDataLifeUnit::DataLifeUnit_MONTH:
        return U("Month");
    case DataLifeUnit::eDataLifeUnit::DataLifeUnit_YEAR:
        return U("Year");
    case DataLifeUnit::eDataLifeUnit::DataLifeUnit_DAY:
        return U("Day");
    case DataLifeUnit::eDataLifeUnit::DataLifeUnit_FOREVER:
        return U("Forever");
    default:
        break;
    }
    return {};
}
}

DataLifeUnit::DataLifeUnit()
{
}

DataLifeUnit::~DataLifeUnit()
{
}

void DataLifeUnit::validate()
{
    // TODO: implement validation
}

web::json::value DataLifeUnit::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool DataLifeUnit::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void DataLifeUnit::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool DataLifeUnit::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

DataLifeUnit::eDataLifeUnit DataLifeUnit::getValue() const
{
   return m_value;
}

void DataLifeUnit::setValue(DataLifeUnit::eDataLifeUnit const value)
{
   m_value = value;
}


}
}


