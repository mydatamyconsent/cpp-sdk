/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IdentityClaim.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

IdentityClaim::eIdentityClaim toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("Email")))
        return IdentityClaim::eIdentityClaim::IdentityClaim_EMAIL;
    if (val == utility::conversions::to_string_t(U("FirstName")))
        return IdentityClaim::eIdentityClaim::IdentityClaim_FIRSTNAME;
    if (val == utility::conversions::to_string_t(U("LastName")))
        return IdentityClaim::eIdentityClaim::IdentityClaim_LASTNAME;
    return {};
}

EnumUnderlyingType fromEnum(IdentityClaim::eIdentityClaim e)
{
    switch (e)
    {
    case IdentityClaim::eIdentityClaim::IdentityClaim_EMAIL:
        return U("Email");
    case IdentityClaim::eIdentityClaim::IdentityClaim_FIRSTNAME:
        return U("FirstName");
    case IdentityClaim::eIdentityClaim::IdentityClaim_LASTNAME:
        return U("LastName");
    default:
        break;
    }
    return {};
}
}

IdentityClaim::IdentityClaim()
{
}

IdentityClaim::~IdentityClaim()
{
}

void IdentityClaim::validate()
{
    // TODO: implement validation
}

web::json::value IdentityClaim::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool IdentityClaim::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void IdentityClaim::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool IdentityClaim::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

IdentityClaim::eIdentityClaim IdentityClaim::getValue() const
{
   return m_value;
}

void IdentityClaim::setValue(IdentityClaim::eIdentityClaim const value)
{
   m_value = value;
}


}
}


