/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataConsent.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_DataConsent_H_
#define MYDATAMYCONSENT_MODELS_DataConsent_H_


#include "ModelBase.h"

#include "model/DataConsentRequestedFinancialAccount.h"
#include "model/DataConsentIdentifier.h"
#include "model/DataFetchFrequencyUnit.h"
#include "model/DataConsentRequestedDocument.h"
#include "model/Organization.h"
#include <vector>
#include "model/DataFetchType.h"
#include "model/ApplicationUser.h"
#include "model/IdentityClaim.h"
#include "model/DataLifeUnit.h"
#include "model/DataProcessingAgreement.h"
#include <cpprest/details/basic_types.h>
#include "model/DataConsentStatus.h"

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  DataConsent
    : public ModelBase
{
public:
    DataConsent();
    virtual ~DataConsent();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DataConsent members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrganizationId() const;
    bool organizationIdIsSet() const;
    void unsetOrganizationId();

    void setOrganizationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRequestedByOrgId() const;
    bool requestedByOrgIdIsSet() const;
    void unsetRequestedByOrgId();

    void setRequestedByOrgId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTransactionId() const;
    bool transactionIdIsSet() const;
    void unsetTransactionId();

    void setTransactionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getStartDateTime() const;
    bool startDateTimeIsSet() const;
    void unsetStartDateTime();

    void setStartDateTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpiryDateTime() const;
    bool expiryDateTimeIsSet() const;
    void unsetExpiryDateTime();

    void setExpiryDateTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPurposeCode() const;
    bool purposeCodeIsSet() const;
    void unsetPurposeCode();

    void setPurposeCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPurposeLink() const;
    bool purposeLinkIsSet() const;
    void unsetPurposeLink();

    void setPurposeLink(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();

    void setLocation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAgreementId() const;
    bool agreementIdIsSet() const;
    void unsetAgreementId();

    void setAgreementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataLifeUnit> getDataLifeUnit() const;
    bool dataLifeUnitIsSet() const;
    void unsetDataLifeUnit();

    void setDataLifeUnit(const std::shared_ptr<DataLifeUnit>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDataLifeValue() const;
    bool dataLifeValueIsSet() const;
    void unsetDataLifeValue();

    void setDataLifeValue(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataFetchFrequencyUnit> getDataFetchFrequencyUnit() const;
    bool dataFetchFrequencyUnitIsSet() const;
    void unsetDataFetchFrequencyUnit();

    void setDataFetchFrequencyUnit(const std::shared_ptr<DataFetchFrequencyUnit>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDataFetchFrequencyUnitValue() const;
    bool dataFetchFrequencyUnitValueIsSet() const;
    void unsetDataFetchFrequencyUnitValue();

    void setDataFetchFrequencyUnitValue(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataFetchType> getDataFetchType() const;
    bool dataFetchTypeIsSet() const;
    void unsetDataFetchType();

    void setDataFetchType(const std::shared_ptr<DataFetchType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataConsentStatus> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<DataConsentStatus>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAtUtc() const;
    bool createdAtUtcIsSet() const;
    void unsetCreatedAtUtc();

    void setCreatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getApprovedAtUtc() const;
    bool approvedAtUtcIsSet() const;
    void unsetApprovedAtUtc();

    void setApprovedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRejectedAtUtc() const;
    bool rejectedAtUtcIsSet() const;
    void unsetRejectedAtUtc();

    void setRejectedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Organization> getOrganization() const;
    bool organizationIsSet() const;
    void unsetOrganization();

    void setOrganization(const std::shared_ptr<Organization>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Organization> getRequestedByOrg() const;
    bool requestedByOrgIsSet() const;
    void unsetRequestedByOrg();

    void setRequestedByOrg(const std::shared_ptr<Organization>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataProcessingAgreement> getAgreement() const;
    bool agreementIsSet() const;
    void unsetAgreement();

    void setAgreement(const std::shared_ptr<DataProcessingAgreement>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<IdentityClaim>>& getIdentityClaims();
    bool identityClaimsIsSet() const;
    void unsetIdentityClaims();

    void setIdentityClaims(const std::vector<std::shared_ptr<IdentityClaim>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DataConsentIdentifier>>& getIdentifiers();
    bool identifiersIsSet() const;
    void unsetIdentifiers();

    void setIdentifiers(const std::vector<std::shared_ptr<DataConsentIdentifier>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>>& getRequestedFinancialAccounts();
    bool requestedFinancialAccountsIsSet() const;
    void unsetRequestedFinancialAccounts();

    void setRequestedFinancialAccounts(const std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DataConsentRequestedDocument>>& getRequestedDocuments();
    bool requestedDocumentsIsSet() const;
    void unsetRequestedDocuments();

    void setRequestedDocuments(const std::vector<std::shared_ptr<DataConsentRequestedDocument>>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::string_t m_OrganizationId;
    bool m_OrganizationIdIsSet;
    utility::string_t m_RequestedByOrgId;
    bool m_RequestedByOrgIdIsSet;
    utility::string_t m_TransactionId;
    bool m_TransactionIdIsSet;
    utility::datetime m_StartDateTime;
    bool m_StartDateTimeIsSet;
    utility::datetime m_ExpiryDateTime;
    bool m_ExpiryDateTimeIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_PurposeCode;
    bool m_PurposeCodeIsSet;
    utility::string_t m_PurposeLink;
    bool m_PurposeLinkIsSet;
    utility::string_t m_Location;
    bool m_LocationIsSet;
    utility::string_t m_AgreementId;
    bool m_AgreementIdIsSet;
    std::shared_ptr<DataLifeUnit> m_DataLifeUnit;
    bool m_DataLifeUnitIsSet;
    int32_t m_DataLifeValue;
    bool m_DataLifeValueIsSet;
    std::shared_ptr<DataFetchFrequencyUnit> m_DataFetchFrequencyUnit;
    bool m_DataFetchFrequencyUnitIsSet;
    int32_t m_DataFetchFrequencyUnitValue;
    bool m_DataFetchFrequencyUnitValueIsSet;
    std::shared_ptr<DataFetchType> m_DataFetchType;
    bool m_DataFetchTypeIsSet;
    std::shared_ptr<DataConsentStatus> m_Status;
    bool m_StatusIsSet;
    utility::datetime m_CreatedAtUtc;
    bool m_CreatedAtUtcIsSet;
    utility::datetime m_ApprovedAtUtc;
    bool m_ApprovedAtUtcIsSet;
    utility::datetime m_RejectedAtUtc;
    bool m_RejectedAtUtcIsSet;
    std::shared_ptr<ApplicationUser> m_User;
    bool m_UserIsSet;
    std::shared_ptr<Organization> m_Organization;
    bool m_OrganizationIsSet;
    std::shared_ptr<Organization> m_RequestedByOrg;
    bool m_RequestedByOrgIsSet;
    std::shared_ptr<DataProcessingAgreement> m_Agreement;
    bool m_AgreementIsSet;
    std::vector<std::shared_ptr<IdentityClaim>> m_IdentityClaims;
    bool m_IdentityClaimsIsSet;
    std::vector<std::shared_ptr<DataConsentIdentifier>> m_Identifiers;
    bool m_IdentifiersIsSet;
    std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>> m_RequestedFinancialAccounts;
    bool m_RequestedFinancialAccountsIsSet;
    std::vector<std::shared_ptr<DataConsentRequestedDocument>> m_RequestedDocuments;
    bool m_RequestedDocumentsIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DataConsent_H_ */
