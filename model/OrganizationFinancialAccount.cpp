/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrganizationFinancialAccount.h"

namespace mydatamyconsent {
namespace models {




OrganizationFinancialAccount::OrganizationFinancialAccount()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_OrganizationId = utility::conversions::to_string_t("");
    m_OrganizationIdIsSet = false;
    m_BeneficiaryName = utility::conversions::to_string_t("");
    m_BeneficiaryNameIsSet = false;
    m_AccountNumber = utility::conversions::to_string_t("");
    m_AccountNumberIsSet = false;
    m_RoutingNumber = utility::conversions::to_string_t("");
    m_RoutingNumberIsSet = false;
    m_OrganizationIsSet = false;
    m_IsPrimary = false;
    m_IsPrimaryIsSet = false;
    m_IsVerified = false;
    m_IsVerifiedIsSet = false;
    m_LogoUrl = utility::conversions::to_string_t("");
    m_LogoUrlIsSet = false;
    m_BankName = utility::conversions::to_string_t("");
    m_BankNameIsSet = false;
    m_BankAccountProofUrl = utility::conversions::to_string_t("");
    m_BankAccountProofUrlIsSet = false;
    m_FileTypeIsSet = false;
    m_BankAccountTypeIsSet = false;
}

OrganizationFinancialAccount::~OrganizationFinancialAccount()
{
}

void OrganizationFinancialAccount::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationFinancialAccount::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OrganizationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationId"))] = ModelBase::toJson(m_OrganizationId);
    }
    if(m_BeneficiaryNameIsSet)
    {
        val[utility::conversions::to_string_t(U("beneficiaryName"))] = ModelBase::toJson(m_BeneficiaryName);
    }
    if(m_AccountNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("accountNumber"))] = ModelBase::toJson(m_AccountNumber);
    }
    if(m_RoutingNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("routingNumber"))] = ModelBase::toJson(m_RoutingNumber);
    }
    if(m_OrganizationIsSet)
    {
        val[utility::conversions::to_string_t(U("organization"))] = ModelBase::toJson(m_Organization);
    }
    if(m_IsPrimaryIsSet)
    {
        val[utility::conversions::to_string_t(U("isPrimary"))] = ModelBase::toJson(m_IsPrimary);
    }
    if(m_IsVerifiedIsSet)
    {
        val[utility::conversions::to_string_t(U("isVerified"))] = ModelBase::toJson(m_IsVerified);
    }
    if(m_LogoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("logoUrl"))] = ModelBase::toJson(m_LogoUrl);
    }
    if(m_BankNameIsSet)
    {
        val[utility::conversions::to_string_t(U("bankName"))] = ModelBase::toJson(m_BankName);
    }
    if(m_BankAccountProofUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("bankAccountProofUrl"))] = ModelBase::toJson(m_BankAccountProofUrl);
    }
    if(m_FileTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("fileType"))] = ModelBase::toJson(m_FileType);
    }
    if(m_BankAccountTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("bankAccountType"))] = ModelBase::toJson(m_BankAccountType);
    }

    return val;
}

bool OrganizationFinancialAccount::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organizationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationId);
            setOrganizationId(refVal_organizationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("beneficiaryName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("beneficiaryName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_beneficiaryName;
            ok &= ModelBase::fromJson(fieldValue, refVal_beneficiaryName);
            setBeneficiaryName(refVal_beneficiaryName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accountNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_accountNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_accountNumber);
            setAccountNumber(refVal_accountNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("routingNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("routingNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_routingNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_routingNumber);
            setRoutingNumber(refVal_routingNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Organization> refVal_organization;
            ok &= ModelBase::fromJson(fieldValue, refVal_organization);
            setOrganization(refVal_organization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isPrimary"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isPrimary")));
        if(!fieldValue.is_null())
        {
            bool refVal_isPrimary;
            ok &= ModelBase::fromJson(fieldValue, refVal_isPrimary);
            setIsPrimary(refVal_isPrimary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isVerified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isVerified")));
        if(!fieldValue.is_null())
        {
            bool refVal_isVerified;
            ok &= ModelBase::fromJson(fieldValue, refVal_isVerified);
            setIsVerified(refVal_isVerified);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_logoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_logoUrl);
            setLogoUrl(refVal_logoUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bankName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bankName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bankName;
            ok &= ModelBase::fromJson(fieldValue, refVal_bankName);
            setBankName(refVal_bankName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bankAccountProofUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bankAccountProofUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bankAccountProofUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_bankAccountProofUrl);
            setBankAccountProofUrl(refVal_bankAccountProofUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fileType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fileType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FileType> refVal_fileType;
            ok &= ModelBase::fromJson(fieldValue, refVal_fileType);
            setFileType(refVal_fileType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bankAccountType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bankAccountType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BankAccountType> refVal_bankAccountType;
            ok &= ModelBase::fromJson(fieldValue, refVal_bankAccountType);
            setBankAccountType(refVal_bankAccountType);
        }
    }
    return ok;
}

void OrganizationFinancialAccount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OrganizationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationId")), m_OrganizationId));
    }
    if(m_BeneficiaryNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("beneficiaryName")), m_BeneficiaryName));
    }
    if(m_AccountNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountNumber")), m_AccountNumber));
    }
    if(m_RoutingNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("routingNumber")), m_RoutingNumber));
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization")), m_Organization));
    }
    if(m_IsPrimaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isPrimary")), m_IsPrimary));
    }
    if(m_IsVerifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isVerified")), m_IsVerified));
    }
    if(m_LogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logoUrl")), m_LogoUrl));
    }
    if(m_BankNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bankName")), m_BankName));
    }
    if(m_BankAccountProofUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bankAccountProofUrl")), m_BankAccountProofUrl));
    }
    if(m_FileTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fileType")), m_FileType));
    }
    if(m_BankAccountTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bankAccountType")), m_BankAccountType));
    }
}

bool OrganizationFinancialAccount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationId"))))
    {
        utility::string_t refVal_organizationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationId"))), refVal_organizationId );
        setOrganizationId(refVal_organizationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("beneficiaryName"))))
    {
        utility::string_t refVal_beneficiaryName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("beneficiaryName"))), refVal_beneficiaryName );
        setBeneficiaryName(refVal_beneficiaryName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accountNumber"))))
    {
        utility::string_t refVal_accountNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountNumber"))), refVal_accountNumber );
        setAccountNumber(refVal_accountNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("routingNumber"))))
    {
        utility::string_t refVal_routingNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("routingNumber"))), refVal_routingNumber );
        setRoutingNumber(refVal_routingNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization"))))
    {
        std::shared_ptr<Organization> refVal_organization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization"))), refVal_organization );
        setOrganization(refVal_organization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isPrimary"))))
    {
        bool refVal_isPrimary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isPrimary"))), refVal_isPrimary );
        setIsPrimary(refVal_isPrimary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isVerified"))))
    {
        bool refVal_isVerified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isVerified"))), refVal_isVerified );
        setIsVerified(refVal_isVerified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logoUrl"))))
    {
        utility::string_t refVal_logoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logoUrl"))), refVal_logoUrl );
        setLogoUrl(refVal_logoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bankName"))))
    {
        utility::string_t refVal_bankName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bankName"))), refVal_bankName );
        setBankName(refVal_bankName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bankAccountProofUrl"))))
    {
        utility::string_t refVal_bankAccountProofUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bankAccountProofUrl"))), refVal_bankAccountProofUrl );
        setBankAccountProofUrl(refVal_bankAccountProofUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fileType"))))
    {
        std::shared_ptr<FileType> refVal_fileType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fileType"))), refVal_fileType );
        setFileType(refVal_fileType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bankAccountType"))))
    {
        std::shared_ptr<BankAccountType> refVal_bankAccountType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bankAccountType"))), refVal_bankAccountType );
        setBankAccountType(refVal_bankAccountType);
    }
    return ok;
}

utility::string_t OrganizationFinancialAccount::getId() const
{
    return m_Id;
}

void OrganizationFinancialAccount::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrganizationFinancialAccount::idIsSet() const
{
    return m_IdIsSet;
}

void OrganizationFinancialAccount::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrganizationFinancialAccount::getOrganizationId() const
{
    return m_OrganizationId;
}

void OrganizationFinancialAccount::setOrganizationId(const utility::string_t& value)
{
    m_OrganizationId = value;
    m_OrganizationIdIsSet = true;
}

bool OrganizationFinancialAccount::organizationIdIsSet() const
{
    return m_OrganizationIdIsSet;
}

void OrganizationFinancialAccount::unsetOrganizationId()
{
    m_OrganizationIdIsSet = false;
}
utility::string_t OrganizationFinancialAccount::getBeneficiaryName() const
{
    return m_BeneficiaryName;
}

void OrganizationFinancialAccount::setBeneficiaryName(const utility::string_t& value)
{
    m_BeneficiaryName = value;
    m_BeneficiaryNameIsSet = true;
}

bool OrganizationFinancialAccount::beneficiaryNameIsSet() const
{
    return m_BeneficiaryNameIsSet;
}

void OrganizationFinancialAccount::unsetBeneficiaryName()
{
    m_BeneficiaryNameIsSet = false;
}
utility::string_t OrganizationFinancialAccount::getAccountNumber() const
{
    return m_AccountNumber;
}

void OrganizationFinancialAccount::setAccountNumber(const utility::string_t& value)
{
    m_AccountNumber = value;
    m_AccountNumberIsSet = true;
}

bool OrganizationFinancialAccount::accountNumberIsSet() const
{
    return m_AccountNumberIsSet;
}

void OrganizationFinancialAccount::unsetAccountNumber()
{
    m_AccountNumberIsSet = false;
}
utility::string_t OrganizationFinancialAccount::getRoutingNumber() const
{
    return m_RoutingNumber;
}

void OrganizationFinancialAccount::setRoutingNumber(const utility::string_t& value)
{
    m_RoutingNumber = value;
    m_RoutingNumberIsSet = true;
}

bool OrganizationFinancialAccount::routingNumberIsSet() const
{
    return m_RoutingNumberIsSet;
}

void OrganizationFinancialAccount::unsetRoutingNumber()
{
    m_RoutingNumberIsSet = false;
}
std::shared_ptr<Organization> OrganizationFinancialAccount::getOrganization() const
{
    return m_Organization;
}

void OrganizationFinancialAccount::setOrganization(const std::shared_ptr<Organization>& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}

bool OrganizationFinancialAccount::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void OrganizationFinancialAccount::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
bool OrganizationFinancialAccount::isIsPrimary() const
{
    return m_IsPrimary;
}

void OrganizationFinancialAccount::setIsPrimary(bool value)
{
    m_IsPrimary = value;
    m_IsPrimaryIsSet = true;
}

bool OrganizationFinancialAccount::isPrimaryIsSet() const
{
    return m_IsPrimaryIsSet;
}

void OrganizationFinancialAccount::unsetIsPrimary()
{
    m_IsPrimaryIsSet = false;
}
bool OrganizationFinancialAccount::isIsVerified() const
{
    return m_IsVerified;
}

void OrganizationFinancialAccount::setIsVerified(bool value)
{
    m_IsVerified = value;
    m_IsVerifiedIsSet = true;
}

bool OrganizationFinancialAccount::isVerifiedIsSet() const
{
    return m_IsVerifiedIsSet;
}

void OrganizationFinancialAccount::unsetIsVerified()
{
    m_IsVerifiedIsSet = false;
}
utility::string_t OrganizationFinancialAccount::getLogoUrl() const
{
    return m_LogoUrl;
}

void OrganizationFinancialAccount::setLogoUrl(const utility::string_t& value)
{
    m_LogoUrl = value;
    m_LogoUrlIsSet = true;
}

bool OrganizationFinancialAccount::logoUrlIsSet() const
{
    return m_LogoUrlIsSet;
}

void OrganizationFinancialAccount::unsetLogoUrl()
{
    m_LogoUrlIsSet = false;
}
utility::string_t OrganizationFinancialAccount::getBankName() const
{
    return m_BankName;
}

void OrganizationFinancialAccount::setBankName(const utility::string_t& value)
{
    m_BankName = value;
    m_BankNameIsSet = true;
}

bool OrganizationFinancialAccount::bankNameIsSet() const
{
    return m_BankNameIsSet;
}

void OrganizationFinancialAccount::unsetBankName()
{
    m_BankNameIsSet = false;
}
utility::string_t OrganizationFinancialAccount::getBankAccountProofUrl() const
{
    return m_BankAccountProofUrl;
}

void OrganizationFinancialAccount::setBankAccountProofUrl(const utility::string_t& value)
{
    m_BankAccountProofUrl = value;
    m_BankAccountProofUrlIsSet = true;
}

bool OrganizationFinancialAccount::bankAccountProofUrlIsSet() const
{
    return m_BankAccountProofUrlIsSet;
}

void OrganizationFinancialAccount::unsetBankAccountProofUrl()
{
    m_BankAccountProofUrlIsSet = false;
}
std::shared_ptr<FileType> OrganizationFinancialAccount::getFileType() const
{
    return m_FileType;
}

void OrganizationFinancialAccount::setFileType(const std::shared_ptr<FileType>& value)
{
    m_FileType = value;
    m_FileTypeIsSet = true;
}

bool OrganizationFinancialAccount::fileTypeIsSet() const
{
    return m_FileTypeIsSet;
}

void OrganizationFinancialAccount::unsetFileType()
{
    m_FileTypeIsSet = false;
}
std::shared_ptr<BankAccountType> OrganizationFinancialAccount::getBankAccountType() const
{
    return m_BankAccountType;
}

void OrganizationFinancialAccount::setBankAccountType(const std::shared_ptr<BankAccountType>& value)
{
    m_BankAccountType = value;
    m_BankAccountTypeIsSet = true;
}

bool OrganizationFinancialAccount::bankAccountTypeIsSet() const
{
    return m_BankAccountTypeIsSet;
}

void OrganizationFinancialAccount::unsetBankAccountType()
{
    m_BankAccountTypeIsSet = false;
}
}
}


