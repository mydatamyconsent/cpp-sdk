/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CountryState.h"

namespace mydatamyconsent {
namespace models {




CountryState::CountryState()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_CountryId = utility::conversions::to_string_t("");
    m_CountryIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_FipsCode = 0;
    m_FipsCodeIsSet = false;
    m_CountryIsSet = false;
}

CountryState::~CountryState()
{
}

void CountryState::validate()
{
    // TODO: implement validation
}

web::json::value CountryState::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_CountryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("countryId"))] = ModelBase::toJson(m_CountryId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_FipsCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("fipsCode"))] = ModelBase::toJson(m_FipsCode);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }

    return val;
}

bool CountryState::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_countryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryId);
            setCountryId(refVal_countryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fipsCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fipsCode")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_fipsCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_fipsCode);
            setFipsCode(refVal_fipsCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> refVal_country;
            ok &= ModelBase::fromJson(fieldValue, refVal_country);
            setCountry(refVal_country);
        }
    }
    return ok;
}

void CountryState::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_CountryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryId")), m_CountryId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_FipsCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fipsCode")), m_FipsCode));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
}

bool CountryState::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryId"))))
    {
        utility::string_t refVal_countryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryId"))), refVal_countryId );
        setCountryId(refVal_countryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fipsCode"))))
    {
        int32_t refVal_fipsCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fipsCode"))), refVal_fipsCode );
        setFipsCode(refVal_fipsCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        std::shared_ptr<Country> refVal_country;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_country );
        setCountry(refVal_country);
    }
    return ok;
}

utility::string_t CountryState::getId() const
{
    return m_Id;
}

void CountryState::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CountryState::idIsSet() const
{
    return m_IdIsSet;
}

void CountryState::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t CountryState::getCountryId() const
{
    return m_CountryId;
}

void CountryState::setCountryId(const utility::string_t& value)
{
    m_CountryId = value;
    m_CountryIdIsSet = true;
}

bool CountryState::countryIdIsSet() const
{
    return m_CountryIdIsSet;
}

void CountryState::unsetCountryId()
{
    m_CountryIdIsSet = false;
}
utility::string_t CountryState::getName() const
{
    return m_Name;
}

void CountryState::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CountryState::nameIsSet() const
{
    return m_NameIsSet;
}

void CountryState::unsetName()
{
    m_NameIsSet = false;
}
int32_t CountryState::getFipsCode() const
{
    return m_FipsCode;
}

void CountryState::setFipsCode(int32_t value)
{
    m_FipsCode = value;
    m_FipsCodeIsSet = true;
}

bool CountryState::fipsCodeIsSet() const
{
    return m_FipsCodeIsSet;
}

void CountryState::unsetFipsCode()
{
    m_FipsCodeIsSet = false;
}
std::shared_ptr<Country> CountryState::getCountry() const
{
    return m_Country;
}

void CountryState::setCountry(const std::shared_ptr<Country>& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool CountryState::countryIsSet() const
{
    return m_CountryIsSet;
}

void CountryState::unsetCountry()
{
    m_CountryIsSet = false;
}
}
}


