/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GetConsentTemplateDetailsDto.h"

namespace mydatamyconsent {
namespace models {




GetConsentTemplateDetailsDto::GetConsentTemplateDetailsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ConsentPurpose = utility::conversions::to_string_t("");
    m_ConsentPurposeIsSet = false;
    m_CollectablesIsSet = false;
    m_FetchTypeIsSet = false;
    m_ShortId = utility::conversions::to_string_t("");
    m_ShortIdIsSet = false;
    m_CreatedBy = utility::conversions::to_string_t("");
    m_CreatedByIsSet = false;
    m_CreatedAtUtc = utility::datetime();
    m_CreatedAtUtcIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_TemplateTypeIsSet = false;
    m_FrequencyIsSet = false;
    m_IdentityIsSet = false;
    m_DocumentsIsSet = false;
    m_FinancialsIsSet = false;
}

GetConsentTemplateDetailsDto::~GetConsentTemplateDetailsDto()
{
}

void GetConsentTemplateDetailsDto::validate()
{
    // TODO: implement validation
}

web::json::value GetConsentTemplateDetailsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_ConsentPurposeIsSet)
    {
        val[utility::conversions::to_string_t(U("consentPurpose"))] = ModelBase::toJson(m_ConsentPurpose);
    }
    if(m_CollectablesIsSet)
    {
        val[utility::conversions::to_string_t(U("collectables"))] = ModelBase::toJson(m_Collectables);
    }
    if(m_FetchTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("fetchType"))] = ModelBase::toJson(m_FetchType);
    }
    if(m_ShortIdIsSet)
    {
        val[utility::conversions::to_string_t(U("shortId"))] = ModelBase::toJson(m_ShortId);
    }
    if(m_CreatedByIsSet)
    {
        val[utility::conversions::to_string_t(U("createdBy"))] = ModelBase::toJson(m_CreatedBy);
    }
    if(m_CreatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAtUtc"))] = ModelBase::toJson(m_CreatedAtUtc);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_TemplateTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("templateType"))] = ModelBase::toJson(m_TemplateType);
    }
    if(m_FrequencyIsSet)
    {
        val[utility::conversions::to_string_t(U("frequency"))] = ModelBase::toJson(m_Frequency);
    }
    if(m_IdentityIsSet)
    {
        val[utility::conversions::to_string_t(U("identity"))] = ModelBase::toJson(m_Identity);
    }
    if(m_DocumentsIsSet)
    {
        val[utility::conversions::to_string_t(U("documents"))] = ModelBase::toJson(m_Documents);
    }
    if(m_FinancialsIsSet)
    {
        val[utility::conversions::to_string_t(U("financials"))] = ModelBase::toJson(m_Financials);
    }

    return val;
}

bool GetConsentTemplateDetailsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consentPurpose"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consentPurpose")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_consentPurpose;
            ok &= ModelBase::fromJson(fieldValue, refVal_consentPurpose);
            setConsentPurpose(refVal_consentPurpose);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collectables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collectables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CollectibleTypes>> refVal_collectables;
            ok &= ModelBase::fromJson(fieldValue, refVal_collectables);
            setCollectables(refVal_collectables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fetchType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fetchType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FetchTypes> refVal_fetchType;
            ok &= ModelBase::fromJson(fieldValue, refVal_fetchType);
            setFetchType(refVal_fetchType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shortId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shortId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_shortId;
            ok &= ModelBase::fromJson(fieldValue, refVal_shortId);
            setShortId(refVal_shortId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_createdBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdBy);
            setCreatedBy(refVal_createdBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAtUtc);
            setCreatedAtUtc(refVal_createdAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConsentTemplateTypes> refVal_templateType;
            ok &= ModelBase::fromJson(fieldValue, refVal_templateType);
            setTemplateType(refVal_templateType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("frequency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("frequency")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Life> refVal_frequency;
            ok &= ModelBase::fromJson(fieldValue, refVal_frequency);
            setFrequency(refVal_frequency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identity")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IdentitySupportedFields>> refVal_identity;
            ok &= ModelBase::fromJson(fieldValue, refVal_identity);
            setIdentity(refVal_identity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documents")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Document>> refVal_documents;
            ok &= ModelBase::fromJson(fieldValue, refVal_documents);
            setDocuments(refVal_documents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("financials"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("financials")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Financial>> refVal_financials;
            ok &= ModelBase::fromJson(fieldValue, refVal_financials);
            setFinancials(refVal_financials);
        }
    }
    return ok;
}

void GetConsentTemplateDetailsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_ConsentPurposeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consentPurpose")), m_ConsentPurpose));
    }
    if(m_CollectablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collectables")), m_Collectables));
    }
    if(m_FetchTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fetchType")), m_FetchType));
    }
    if(m_ShortIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shortId")), m_ShortId));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdBy")), m_CreatedBy));
    }
    if(m_CreatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAtUtc")), m_CreatedAtUtc));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_TemplateTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateType")), m_TemplateType));
    }
    if(m_FrequencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("frequency")), m_Frequency));
    }
    if(m_IdentityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identity")), m_Identity));
    }
    if(m_DocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documents")), m_Documents));
    }
    if(m_FinancialsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("financials")), m_Financials));
    }
}

bool GetConsentTemplateDetailsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consentPurpose"))))
    {
        utility::string_t refVal_consentPurpose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consentPurpose"))), refVal_consentPurpose );
        setConsentPurpose(refVal_consentPurpose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collectables"))))
    {
        std::vector<std::shared_ptr<CollectibleTypes>> refVal_collectables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collectables"))), refVal_collectables );
        setCollectables(refVal_collectables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fetchType"))))
    {
        std::shared_ptr<FetchTypes> refVal_fetchType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fetchType"))), refVal_fetchType );
        setFetchType(refVal_fetchType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shortId"))))
    {
        utility::string_t refVal_shortId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shortId"))), refVal_shortId );
        setShortId(refVal_shortId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdBy"))))
    {
        utility::string_t refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdBy"))), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        utility::datetime refVal_createdAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAtUtc"))), refVal_createdAtUtc );
        setCreatedAtUtc(refVal_createdAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateType"))))
    {
        std::shared_ptr<ConsentTemplateTypes> refVal_templateType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateType"))), refVal_templateType );
        setTemplateType(refVal_templateType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("frequency"))))
    {
        std::shared_ptr<Life> refVal_frequency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("frequency"))), refVal_frequency );
        setFrequency(refVal_frequency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identity"))))
    {
        std::vector<std::shared_ptr<IdentitySupportedFields>> refVal_identity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identity"))), refVal_identity );
        setIdentity(refVal_identity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documents"))))
    {
        std::vector<std::shared_ptr<Document>> refVal_documents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documents"))), refVal_documents );
        setDocuments(refVal_documents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("financials"))))
    {
        std::vector<std::shared_ptr<Financial>> refVal_financials;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("financials"))), refVal_financials );
        setFinancials(refVal_financials);
    }
    return ok;
}

utility::string_t GetConsentTemplateDetailsDto::getId() const
{
    return m_Id;
}

void GetConsentTemplateDetailsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool GetConsentTemplateDetailsDto::idIsSet() const
{
    return m_IdIsSet;
}

void GetConsentTemplateDetailsDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t GetConsentTemplateDetailsDto::getName() const
{
    return m_Name;
}

void GetConsentTemplateDetailsDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool GetConsentTemplateDetailsDto::nameIsSet() const
{
    return m_NameIsSet;
}

void GetConsentTemplateDetailsDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t GetConsentTemplateDetailsDto::getDescription() const
{
    return m_Description;
}

void GetConsentTemplateDetailsDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool GetConsentTemplateDetailsDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void GetConsentTemplateDetailsDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t GetConsentTemplateDetailsDto::getConsentPurpose() const
{
    return m_ConsentPurpose;
}

void GetConsentTemplateDetailsDto::setConsentPurpose(const utility::string_t& value)
{
    m_ConsentPurpose = value;
    m_ConsentPurposeIsSet = true;
}

bool GetConsentTemplateDetailsDto::consentPurposeIsSet() const
{
    return m_ConsentPurposeIsSet;
}

void GetConsentTemplateDetailsDto::unsetConsentPurpose()
{
    m_ConsentPurposeIsSet = false;
}
std::vector<std::shared_ptr<CollectibleTypes>>& GetConsentTemplateDetailsDto::getCollectables()
{
    return m_Collectables;
}

void GetConsentTemplateDetailsDto::setCollectables(const std::vector<std::shared_ptr<CollectibleTypes>>& value)
{
    m_Collectables = value;
    m_CollectablesIsSet = true;
}

bool GetConsentTemplateDetailsDto::collectablesIsSet() const
{
    return m_CollectablesIsSet;
}

void GetConsentTemplateDetailsDto::unsetCollectables()
{
    m_CollectablesIsSet = false;
}
std::shared_ptr<FetchTypes> GetConsentTemplateDetailsDto::getFetchType() const
{
    return m_FetchType;
}

void GetConsentTemplateDetailsDto::setFetchType(const std::shared_ptr<FetchTypes>& value)
{
    m_FetchType = value;
    m_FetchTypeIsSet = true;
}

bool GetConsentTemplateDetailsDto::fetchTypeIsSet() const
{
    return m_FetchTypeIsSet;
}

void GetConsentTemplateDetailsDto::unsetFetchType()
{
    m_FetchTypeIsSet = false;
}
utility::string_t GetConsentTemplateDetailsDto::getShortId() const
{
    return m_ShortId;
}

void GetConsentTemplateDetailsDto::setShortId(const utility::string_t& value)
{
    m_ShortId = value;
    m_ShortIdIsSet = true;
}

bool GetConsentTemplateDetailsDto::shortIdIsSet() const
{
    return m_ShortIdIsSet;
}

void GetConsentTemplateDetailsDto::unsetShortId()
{
    m_ShortIdIsSet = false;
}
utility::string_t GetConsentTemplateDetailsDto::getCreatedBy() const
{
    return m_CreatedBy;
}

void GetConsentTemplateDetailsDto::setCreatedBy(const utility::string_t& value)
{
    m_CreatedBy = value;
    m_CreatedByIsSet = true;
}

bool GetConsentTemplateDetailsDto::createdByIsSet() const
{
    return m_CreatedByIsSet;
}

void GetConsentTemplateDetailsDto::unsetCreatedBy()
{
    m_CreatedByIsSet = false;
}
utility::datetime GetConsentTemplateDetailsDto::getCreatedAtUtc() const
{
    return m_CreatedAtUtc;
}

void GetConsentTemplateDetailsDto::setCreatedAtUtc(const utility::datetime& value)
{
    m_CreatedAtUtc = value;
    m_CreatedAtUtcIsSet = true;
}

bool GetConsentTemplateDetailsDto::createdAtUtcIsSet() const
{
    return m_CreatedAtUtcIsSet;
}

void GetConsentTemplateDetailsDto::unsetCreatedAtUtc()
{
    m_CreatedAtUtcIsSet = false;
}
utility::string_t GetConsentTemplateDetailsDto::getStatus() const
{
    return m_Status;
}

void GetConsentTemplateDetailsDto::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool GetConsentTemplateDetailsDto::statusIsSet() const
{
    return m_StatusIsSet;
}

void GetConsentTemplateDetailsDto::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<ConsentTemplateTypes> GetConsentTemplateDetailsDto::getTemplateType() const
{
    return m_TemplateType;
}

void GetConsentTemplateDetailsDto::setTemplateType(const std::shared_ptr<ConsentTemplateTypes>& value)
{
    m_TemplateType = value;
    m_TemplateTypeIsSet = true;
}

bool GetConsentTemplateDetailsDto::templateTypeIsSet() const
{
    return m_TemplateTypeIsSet;
}

void GetConsentTemplateDetailsDto::unsetTemplateType()
{
    m_TemplateTypeIsSet = false;
}
std::shared_ptr<Life> GetConsentTemplateDetailsDto::getFrequency() const
{
    return m_Frequency;
}

void GetConsentTemplateDetailsDto::setFrequency(const std::shared_ptr<Life>& value)
{
    m_Frequency = value;
    m_FrequencyIsSet = true;
}

bool GetConsentTemplateDetailsDto::frequencyIsSet() const
{
    return m_FrequencyIsSet;
}

void GetConsentTemplateDetailsDto::unsetFrequency()
{
    m_FrequencyIsSet = false;
}
std::vector<std::shared_ptr<IdentitySupportedFields>>& GetConsentTemplateDetailsDto::getIdentity()
{
    return m_Identity;
}

void GetConsentTemplateDetailsDto::setIdentity(const std::vector<std::shared_ptr<IdentitySupportedFields>>& value)
{
    m_Identity = value;
    m_IdentityIsSet = true;
}

bool GetConsentTemplateDetailsDto::identityIsSet() const
{
    return m_IdentityIsSet;
}

void GetConsentTemplateDetailsDto::unsetIdentity()
{
    m_IdentityIsSet = false;
}
std::vector<std::shared_ptr<Document>>& GetConsentTemplateDetailsDto::getDocuments()
{
    return m_Documents;
}

void GetConsentTemplateDetailsDto::setDocuments(const std::vector<std::shared_ptr<Document>>& value)
{
    m_Documents = value;
    m_DocumentsIsSet = true;
}

bool GetConsentTemplateDetailsDto::documentsIsSet() const
{
    return m_DocumentsIsSet;
}

void GetConsentTemplateDetailsDto::unsetDocuments()
{
    m_DocumentsIsSet = false;
}
std::vector<std::shared_ptr<Financial>>& GetConsentTemplateDetailsDto::getFinancials()
{
    return m_Financials;
}

void GetConsentTemplateDetailsDto::setFinancials(const std::vector<std::shared_ptr<Financial>>& value)
{
    m_Financials = value;
    m_FinancialsIsSet = true;
}

bool GetConsentTemplateDetailsDto::financialsIsSet() const
{
    return m_FinancialsIsSet;
}

void GetConsentTemplateDetailsDto::unsetFinancials()
{
    m_FinancialsIsSet = false;
}
}
}


