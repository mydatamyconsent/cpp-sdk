/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsent.h"

namespace mydatamyconsent {
namespace models {




DataConsent::DataConsent()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_OrganizationId = utility::conversions::to_string_t("");
    m_OrganizationIdIsSet = false;
    m_RequestedByOrgId = utility::conversions::to_string_t("");
    m_RequestedByOrgIdIsSet = false;
    m_TransactionId = utility::conversions::to_string_t("");
    m_TransactionIdIsSet = false;
    m_StartDateTime = utility::datetime();
    m_StartDateTimeIsSet = false;
    m_ExpiryDateTime = utility::datetime();
    m_ExpiryDateTimeIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_PurposeCode = utility::conversions::to_string_t("");
    m_PurposeCodeIsSet = false;
    m_PurposeLink = utility::conversions::to_string_t("");
    m_PurposeLinkIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
    m_AgreementId = utility::conversions::to_string_t("");
    m_AgreementIdIsSet = false;
    m_DataLifeUnitIsSet = false;
    m_DataLifeValue = 0;
    m_DataLifeValueIsSet = false;
    m_DataFetchFrequencyUnitIsSet = false;
    m_DataFetchFrequencyUnitValue = 0;
    m_DataFetchFrequencyUnitValueIsSet = false;
    m_DataFetchTypeIsSet = false;
    m_StatusIsSet = false;
    m_CreatedAtUtc = utility::datetime();
    m_CreatedAtUtcIsSet = false;
    m_ApprovedAtUtc = utility::datetime();
    m_ApprovedAtUtcIsSet = false;
    m_RejectedAtUtc = utility::datetime();
    m_RejectedAtUtcIsSet = false;
    m_UserIsSet = false;
    m_OrganizationIsSet = false;
    m_RequestedByOrgIsSet = false;
    m_AgreementIsSet = false;
    m_IdentityClaimsIsSet = false;
    m_IdentifiersIsSet = false;
    m_RequestedFinancialAccountsIsSet = false;
    m_RequestedDocumentsIsSet = false;
}

DataConsent::~DataConsent()
{
}

void DataConsent::validate()
{
    // TODO: implement validation
}

web::json::value DataConsent::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_OrganizationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationId"))] = ModelBase::toJson(m_OrganizationId);
    }
    if(m_RequestedByOrgIdIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedByOrgId"))] = ModelBase::toJson(m_RequestedByOrgId);
    }
    if(m_TransactionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("transactionId"))] = ModelBase::toJson(m_TransactionId);
    }
    if(m_StartDateTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("startDateTime"))] = ModelBase::toJson(m_StartDateTime);
    }
    if(m_ExpiryDateTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("expiryDateTime"))] = ModelBase::toJson(m_ExpiryDateTime);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_PurposeCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("purposeCode"))] = ModelBase::toJson(m_PurposeCode);
    }
    if(m_PurposeLinkIsSet)
    {
        val[utility::conversions::to_string_t(U("purposeLink"))] = ModelBase::toJson(m_PurposeLink);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t(U("location"))] = ModelBase::toJson(m_Location);
    }
    if(m_AgreementIdIsSet)
    {
        val[utility::conversions::to_string_t(U("agreementId"))] = ModelBase::toJson(m_AgreementId);
    }
    if(m_DataLifeUnitIsSet)
    {
        val[utility::conversions::to_string_t(U("dataLifeUnit"))] = ModelBase::toJson(m_DataLifeUnit);
    }
    if(m_DataLifeValueIsSet)
    {
        val[utility::conversions::to_string_t(U("dataLifeValue"))] = ModelBase::toJson(m_DataLifeValue);
    }
    if(m_DataFetchFrequencyUnitIsSet)
    {
        val[utility::conversions::to_string_t(U("dataFetchFrequencyUnit"))] = ModelBase::toJson(m_DataFetchFrequencyUnit);
    }
    if(m_DataFetchFrequencyUnitValueIsSet)
    {
        val[utility::conversions::to_string_t(U("dataFetchFrequencyUnitValue"))] = ModelBase::toJson(m_DataFetchFrequencyUnitValue);
    }
    if(m_DataFetchTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("dataFetchType"))] = ModelBase::toJson(m_DataFetchType);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_CreatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAtUtc"))] = ModelBase::toJson(m_CreatedAtUtc);
    }
    if(m_ApprovedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedAtUtc"))] = ModelBase::toJson(m_ApprovedAtUtc);
    }
    if(m_RejectedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("rejectedAtUtc"))] = ModelBase::toJson(m_RejectedAtUtc);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }
    if(m_OrganizationIsSet)
    {
        val[utility::conversions::to_string_t(U("organization"))] = ModelBase::toJson(m_Organization);
    }
    if(m_RequestedByOrgIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedByOrg"))] = ModelBase::toJson(m_RequestedByOrg);
    }
    if(m_AgreementIsSet)
    {
        val[utility::conversions::to_string_t(U("agreement"))] = ModelBase::toJson(m_Agreement);
    }
    if(m_IdentityClaimsIsSet)
    {
        val[utility::conversions::to_string_t(U("identityClaims"))] = ModelBase::toJson(m_IdentityClaims);
    }
    if(m_IdentifiersIsSet)
    {
        val[utility::conversions::to_string_t(U("identifiers"))] = ModelBase::toJson(m_Identifiers);
    }
    if(m_RequestedFinancialAccountsIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedFinancialAccounts"))] = ModelBase::toJson(m_RequestedFinancialAccounts);
    }
    if(m_RequestedDocumentsIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedDocuments"))] = ModelBase::toJson(m_RequestedDocuments);
    }

    return val;
}

bool DataConsent::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organizationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationId);
            setOrganizationId(refVal_organizationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedByOrgId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedByOrgId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_requestedByOrgId;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedByOrgId);
            setRequestedByOrgId(refVal_requestedByOrgId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transactionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transactionId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_transactionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_transactionId);
            setTransactionId(refVal_transactionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("startDateTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startDateTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_startDateTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_startDateTime);
            setStartDateTime(refVal_startDateTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiryDateTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiryDateTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expiryDateTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_expiryDateTime);
            setExpiryDateTime(refVal_expiryDateTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("purposeCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("purposeCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_purposeCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_purposeCode);
            setPurposeCode(refVal_purposeCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("purposeLink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("purposeLink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_purposeLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_purposeLink);
            setPurposeLink(refVal_purposeLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("location"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("location")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_location;
            ok &= ModelBase::fromJson(fieldValue, refVal_location);
            setLocation(refVal_location);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("agreementId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agreementId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_agreementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_agreementId);
            setAgreementId(refVal_agreementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataLifeUnit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataLifeUnit")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataLifeUnit> refVal_dataLifeUnit;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataLifeUnit);
            setDataLifeUnit(refVal_dataLifeUnit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataLifeValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataLifeValue")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_dataLifeValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataLifeValue);
            setDataLifeValue(refVal_dataLifeValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataFetchFrequencyUnit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataFetchFrequencyUnit")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataFetchFrequencyUnit> refVal_dataFetchFrequencyUnit;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataFetchFrequencyUnit);
            setDataFetchFrequencyUnit(refVal_dataFetchFrequencyUnit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataFetchFrequencyUnitValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataFetchFrequencyUnitValue")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_dataFetchFrequencyUnitValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataFetchFrequencyUnitValue);
            setDataFetchFrequencyUnitValue(refVal_dataFetchFrequencyUnitValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataFetchType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataFetchType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataFetchType> refVal_dataFetchType;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataFetchType);
            setDataFetchType(refVal_dataFetchType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataConsentStatus> refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAtUtc);
            setCreatedAtUtc(refVal_createdAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_approvedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvedAtUtc);
            setApprovedAtUtc(refVal_approvedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rejectedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejectedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_rejectedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_rejectedAtUtc);
            setRejectedAtUtc(refVal_rejectedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_user;
            ok &= ModelBase::fromJson(fieldValue, refVal_user);
            setUser(refVal_user);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Organization> refVal_organization;
            ok &= ModelBase::fromJson(fieldValue, refVal_organization);
            setOrganization(refVal_organization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedByOrg"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedByOrg")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Organization> refVal_requestedByOrg;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedByOrg);
            setRequestedByOrg(refVal_requestedByOrg);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("agreement"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agreement")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataProcessingAgreement> refVal_agreement;
            ok &= ModelBase::fromJson(fieldValue, refVal_agreement);
            setAgreement(refVal_agreement);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identityClaims"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identityClaims")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IdentityClaim>> refVal_identityClaims;
            ok &= ModelBase::fromJson(fieldValue, refVal_identityClaims);
            setIdentityClaims(refVal_identityClaims);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identifiers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifiers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DataConsentIdentifier>> refVal_identifiers;
            ok &= ModelBase::fromJson(fieldValue, refVal_identifiers);
            setIdentifiers(refVal_identifiers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedFinancialAccounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedFinancialAccounts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>> refVal_requestedFinancialAccounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedFinancialAccounts);
            setRequestedFinancialAccounts(refVal_requestedFinancialAccounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedDocuments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedDocuments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DataConsentRequestedDocument>> refVal_requestedDocuments;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedDocuments);
            setRequestedDocuments(refVal_requestedDocuments);
        }
    }
    return ok;
}

void DataConsent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_OrganizationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationId")), m_OrganizationId));
    }
    if(m_RequestedByOrgIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedByOrgId")), m_RequestedByOrgId));
    }
    if(m_TransactionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transactionId")), m_TransactionId));
    }
    if(m_StartDateTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startDateTime")), m_StartDateTime));
    }
    if(m_ExpiryDateTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiryDateTime")), m_ExpiryDateTime));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_PurposeCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("purposeCode")), m_PurposeCode));
    }
    if(m_PurposeLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("purposeLink")), m_PurposeLink));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("location")), m_Location));
    }
    if(m_AgreementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agreementId")), m_AgreementId));
    }
    if(m_DataLifeUnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataLifeUnit")), m_DataLifeUnit));
    }
    if(m_DataLifeValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataLifeValue")), m_DataLifeValue));
    }
    if(m_DataFetchFrequencyUnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataFetchFrequencyUnit")), m_DataFetchFrequencyUnit));
    }
    if(m_DataFetchFrequencyUnitValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataFetchFrequencyUnitValue")), m_DataFetchFrequencyUnitValue));
    }
    if(m_DataFetchTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataFetchType")), m_DataFetchType));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_CreatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAtUtc")), m_CreatedAtUtc));
    }
    if(m_ApprovedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedAtUtc")), m_ApprovedAtUtc));
    }
    if(m_RejectedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejectedAtUtc")), m_RejectedAtUtc));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization")), m_Organization));
    }
    if(m_RequestedByOrgIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedByOrg")), m_RequestedByOrg));
    }
    if(m_AgreementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agreement")), m_Agreement));
    }
    if(m_IdentityClaimsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identityClaims")), m_IdentityClaims));
    }
    if(m_IdentifiersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifiers")), m_Identifiers));
    }
    if(m_RequestedFinancialAccountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedFinancialAccounts")), m_RequestedFinancialAccounts));
    }
    if(m_RequestedDocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedDocuments")), m_RequestedDocuments));
    }
}

bool DataConsent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationId"))))
    {
        utility::string_t refVal_organizationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationId"))), refVal_organizationId );
        setOrganizationId(refVal_organizationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedByOrgId"))))
    {
        utility::string_t refVal_requestedByOrgId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedByOrgId"))), refVal_requestedByOrgId );
        setRequestedByOrgId(refVal_requestedByOrgId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transactionId"))))
    {
        utility::string_t refVal_transactionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transactionId"))), refVal_transactionId );
        setTransactionId(refVal_transactionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("startDateTime"))))
    {
        utility::datetime refVal_startDateTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startDateTime"))), refVal_startDateTime );
        setStartDateTime(refVal_startDateTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiryDateTime"))))
    {
        utility::datetime refVal_expiryDateTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiryDateTime"))), refVal_expiryDateTime );
        setExpiryDateTime(refVal_expiryDateTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("purposeCode"))))
    {
        utility::string_t refVal_purposeCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("purposeCode"))), refVal_purposeCode );
        setPurposeCode(refVal_purposeCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("purposeLink"))))
    {
        utility::string_t refVal_purposeLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("purposeLink"))), refVal_purposeLink );
        setPurposeLink(refVal_purposeLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("location"))))
    {
        utility::string_t refVal_location;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("location"))), refVal_location );
        setLocation(refVal_location);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("agreementId"))))
    {
        utility::string_t refVal_agreementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agreementId"))), refVal_agreementId );
        setAgreementId(refVal_agreementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataLifeUnit"))))
    {
        std::shared_ptr<DataLifeUnit> refVal_dataLifeUnit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataLifeUnit"))), refVal_dataLifeUnit );
        setDataLifeUnit(refVal_dataLifeUnit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataLifeValue"))))
    {
        int32_t refVal_dataLifeValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataLifeValue"))), refVal_dataLifeValue );
        setDataLifeValue(refVal_dataLifeValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataFetchFrequencyUnit"))))
    {
        std::shared_ptr<DataFetchFrequencyUnit> refVal_dataFetchFrequencyUnit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataFetchFrequencyUnit"))), refVal_dataFetchFrequencyUnit );
        setDataFetchFrequencyUnit(refVal_dataFetchFrequencyUnit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataFetchFrequencyUnitValue"))))
    {
        int32_t refVal_dataFetchFrequencyUnitValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataFetchFrequencyUnitValue"))), refVal_dataFetchFrequencyUnitValue );
        setDataFetchFrequencyUnitValue(refVal_dataFetchFrequencyUnitValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataFetchType"))))
    {
        std::shared_ptr<DataFetchType> refVal_dataFetchType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataFetchType"))), refVal_dataFetchType );
        setDataFetchType(refVal_dataFetchType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<DataConsentStatus> refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        utility::datetime refVal_createdAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAtUtc"))), refVal_createdAtUtc );
        setCreatedAtUtc(refVal_createdAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        utility::datetime refVal_approvedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedAtUtc"))), refVal_approvedAtUtc );
        setApprovedAtUtc(refVal_approvedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rejectedAtUtc"))))
    {
        utility::datetime refVal_rejectedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejectedAtUtc"))), refVal_rejectedAtUtc );
        setRejectedAtUtc(refVal_rejectedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        std::shared_ptr<ApplicationUser> refVal_user;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_user );
        setUser(refVal_user);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization"))))
    {
        std::shared_ptr<Organization> refVal_organization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization"))), refVal_organization );
        setOrganization(refVal_organization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedByOrg"))))
    {
        std::shared_ptr<Organization> refVal_requestedByOrg;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedByOrg"))), refVal_requestedByOrg );
        setRequestedByOrg(refVal_requestedByOrg);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("agreement"))))
    {
        std::shared_ptr<DataProcessingAgreement> refVal_agreement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agreement"))), refVal_agreement );
        setAgreement(refVal_agreement);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identityClaims"))))
    {
        std::vector<std::shared_ptr<IdentityClaim>> refVal_identityClaims;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identityClaims"))), refVal_identityClaims );
        setIdentityClaims(refVal_identityClaims);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identifiers"))))
    {
        std::vector<std::shared_ptr<DataConsentIdentifier>> refVal_identifiers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifiers"))), refVal_identifiers );
        setIdentifiers(refVal_identifiers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedFinancialAccounts"))))
    {
        std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>> refVal_requestedFinancialAccounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedFinancialAccounts"))), refVal_requestedFinancialAccounts );
        setRequestedFinancialAccounts(refVal_requestedFinancialAccounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedDocuments"))))
    {
        std::vector<std::shared_ptr<DataConsentRequestedDocument>> refVal_requestedDocuments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedDocuments"))), refVal_requestedDocuments );
        setRequestedDocuments(refVal_requestedDocuments);
    }
    return ok;
}

utility::string_t DataConsent::getId() const
{
    return m_Id;
}

void DataConsent::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DataConsent::idIsSet() const
{
    return m_IdIsSet;
}

void DataConsent::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DataConsent::getUserId() const
{
    return m_UserId;
}

void DataConsent::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool DataConsent::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void DataConsent::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t DataConsent::getOrganizationId() const
{
    return m_OrganizationId;
}

void DataConsent::setOrganizationId(const utility::string_t& value)
{
    m_OrganizationId = value;
    m_OrganizationIdIsSet = true;
}

bool DataConsent::organizationIdIsSet() const
{
    return m_OrganizationIdIsSet;
}

void DataConsent::unsetOrganizationId()
{
    m_OrganizationIdIsSet = false;
}
utility::string_t DataConsent::getRequestedByOrgId() const
{
    return m_RequestedByOrgId;
}

void DataConsent::setRequestedByOrgId(const utility::string_t& value)
{
    m_RequestedByOrgId = value;
    m_RequestedByOrgIdIsSet = true;
}

bool DataConsent::requestedByOrgIdIsSet() const
{
    return m_RequestedByOrgIdIsSet;
}

void DataConsent::unsetRequestedByOrgId()
{
    m_RequestedByOrgIdIsSet = false;
}
utility::string_t DataConsent::getTransactionId() const
{
    return m_TransactionId;
}

void DataConsent::setTransactionId(const utility::string_t& value)
{
    m_TransactionId = value;
    m_TransactionIdIsSet = true;
}

bool DataConsent::transactionIdIsSet() const
{
    return m_TransactionIdIsSet;
}

void DataConsent::unsetTransactionId()
{
    m_TransactionIdIsSet = false;
}
utility::datetime DataConsent::getStartDateTime() const
{
    return m_StartDateTime;
}

void DataConsent::setStartDateTime(const utility::datetime& value)
{
    m_StartDateTime = value;
    m_StartDateTimeIsSet = true;
}

bool DataConsent::startDateTimeIsSet() const
{
    return m_StartDateTimeIsSet;
}

void DataConsent::unsetStartDateTime()
{
    m_StartDateTimeIsSet = false;
}
utility::datetime DataConsent::getExpiryDateTime() const
{
    return m_ExpiryDateTime;
}

void DataConsent::setExpiryDateTime(const utility::datetime& value)
{
    m_ExpiryDateTime = value;
    m_ExpiryDateTimeIsSet = true;
}

bool DataConsent::expiryDateTimeIsSet() const
{
    return m_ExpiryDateTimeIsSet;
}

void DataConsent::unsetExpiryDateTime()
{
    m_ExpiryDateTimeIsSet = false;
}
utility::string_t DataConsent::getDescription() const
{
    return m_Description;
}

void DataConsent::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool DataConsent::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void DataConsent::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t DataConsent::getPurposeCode() const
{
    return m_PurposeCode;
}

void DataConsent::setPurposeCode(const utility::string_t& value)
{
    m_PurposeCode = value;
    m_PurposeCodeIsSet = true;
}

bool DataConsent::purposeCodeIsSet() const
{
    return m_PurposeCodeIsSet;
}

void DataConsent::unsetPurposeCode()
{
    m_PurposeCodeIsSet = false;
}
utility::string_t DataConsent::getPurposeLink() const
{
    return m_PurposeLink;
}

void DataConsent::setPurposeLink(const utility::string_t& value)
{
    m_PurposeLink = value;
    m_PurposeLinkIsSet = true;
}

bool DataConsent::purposeLinkIsSet() const
{
    return m_PurposeLinkIsSet;
}

void DataConsent::unsetPurposeLink()
{
    m_PurposeLinkIsSet = false;
}
utility::string_t DataConsent::getLocation() const
{
    return m_Location;
}

void DataConsent::setLocation(const utility::string_t& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool DataConsent::locationIsSet() const
{
    return m_LocationIsSet;
}

void DataConsent::unsetLocation()
{
    m_LocationIsSet = false;
}
utility::string_t DataConsent::getAgreementId() const
{
    return m_AgreementId;
}

void DataConsent::setAgreementId(const utility::string_t& value)
{
    m_AgreementId = value;
    m_AgreementIdIsSet = true;
}

bool DataConsent::agreementIdIsSet() const
{
    return m_AgreementIdIsSet;
}

void DataConsent::unsetAgreementId()
{
    m_AgreementIdIsSet = false;
}
std::shared_ptr<DataLifeUnit> DataConsent::getDataLifeUnit() const
{
    return m_DataLifeUnit;
}

void DataConsent::setDataLifeUnit(const std::shared_ptr<DataLifeUnit>& value)
{
    m_DataLifeUnit = value;
    m_DataLifeUnitIsSet = true;
}

bool DataConsent::dataLifeUnitIsSet() const
{
    return m_DataLifeUnitIsSet;
}

void DataConsent::unsetDataLifeUnit()
{
    m_DataLifeUnitIsSet = false;
}
int32_t DataConsent::getDataLifeValue() const
{
    return m_DataLifeValue;
}

void DataConsent::setDataLifeValue(int32_t value)
{
    m_DataLifeValue = value;
    m_DataLifeValueIsSet = true;
}

bool DataConsent::dataLifeValueIsSet() const
{
    return m_DataLifeValueIsSet;
}

void DataConsent::unsetDataLifeValue()
{
    m_DataLifeValueIsSet = false;
}
std::shared_ptr<DataFetchFrequencyUnit> DataConsent::getDataFetchFrequencyUnit() const
{
    return m_DataFetchFrequencyUnit;
}

void DataConsent::setDataFetchFrequencyUnit(const std::shared_ptr<DataFetchFrequencyUnit>& value)
{
    m_DataFetchFrequencyUnit = value;
    m_DataFetchFrequencyUnitIsSet = true;
}

bool DataConsent::dataFetchFrequencyUnitIsSet() const
{
    return m_DataFetchFrequencyUnitIsSet;
}

void DataConsent::unsetDataFetchFrequencyUnit()
{
    m_DataFetchFrequencyUnitIsSet = false;
}
int32_t DataConsent::getDataFetchFrequencyUnitValue() const
{
    return m_DataFetchFrequencyUnitValue;
}

void DataConsent::setDataFetchFrequencyUnitValue(int32_t value)
{
    m_DataFetchFrequencyUnitValue = value;
    m_DataFetchFrequencyUnitValueIsSet = true;
}

bool DataConsent::dataFetchFrequencyUnitValueIsSet() const
{
    return m_DataFetchFrequencyUnitValueIsSet;
}

void DataConsent::unsetDataFetchFrequencyUnitValue()
{
    m_DataFetchFrequencyUnitValueIsSet = false;
}
std::shared_ptr<DataFetchType> DataConsent::getDataFetchType() const
{
    return m_DataFetchType;
}

void DataConsent::setDataFetchType(const std::shared_ptr<DataFetchType>& value)
{
    m_DataFetchType = value;
    m_DataFetchTypeIsSet = true;
}

bool DataConsent::dataFetchTypeIsSet() const
{
    return m_DataFetchTypeIsSet;
}

void DataConsent::unsetDataFetchType()
{
    m_DataFetchTypeIsSet = false;
}
std::shared_ptr<DataConsentStatus> DataConsent::getStatus() const
{
    return m_Status;
}

void DataConsent::setStatus(const std::shared_ptr<DataConsentStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool DataConsent::statusIsSet() const
{
    return m_StatusIsSet;
}

void DataConsent::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::datetime DataConsent::getCreatedAtUtc() const
{
    return m_CreatedAtUtc;
}

void DataConsent::setCreatedAtUtc(const utility::datetime& value)
{
    m_CreatedAtUtc = value;
    m_CreatedAtUtcIsSet = true;
}

bool DataConsent::createdAtUtcIsSet() const
{
    return m_CreatedAtUtcIsSet;
}

void DataConsent::unsetCreatedAtUtc()
{
    m_CreatedAtUtcIsSet = false;
}
utility::datetime DataConsent::getApprovedAtUtc() const
{
    return m_ApprovedAtUtc;
}

void DataConsent::setApprovedAtUtc(const utility::datetime& value)
{
    m_ApprovedAtUtc = value;
    m_ApprovedAtUtcIsSet = true;
}

bool DataConsent::approvedAtUtcIsSet() const
{
    return m_ApprovedAtUtcIsSet;
}

void DataConsent::unsetApprovedAtUtc()
{
    m_ApprovedAtUtcIsSet = false;
}
utility::datetime DataConsent::getRejectedAtUtc() const
{
    return m_RejectedAtUtc;
}

void DataConsent::setRejectedAtUtc(const utility::datetime& value)
{
    m_RejectedAtUtc = value;
    m_RejectedAtUtcIsSet = true;
}

bool DataConsent::rejectedAtUtcIsSet() const
{
    return m_RejectedAtUtcIsSet;
}

void DataConsent::unsetRejectedAtUtc()
{
    m_RejectedAtUtcIsSet = false;
}
std::shared_ptr<ApplicationUser> DataConsent::getUser() const
{
    return m_User;
}

void DataConsent::setUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool DataConsent::userIsSet() const
{
    return m_UserIsSet;
}

void DataConsent::unsetUser()
{
    m_UserIsSet = false;
}
std::shared_ptr<Organization> DataConsent::getOrganization() const
{
    return m_Organization;
}

void DataConsent::setOrganization(const std::shared_ptr<Organization>& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}

bool DataConsent::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void DataConsent::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
std::shared_ptr<Organization> DataConsent::getRequestedByOrg() const
{
    return m_RequestedByOrg;
}

void DataConsent::setRequestedByOrg(const std::shared_ptr<Organization>& value)
{
    m_RequestedByOrg = value;
    m_RequestedByOrgIsSet = true;
}

bool DataConsent::requestedByOrgIsSet() const
{
    return m_RequestedByOrgIsSet;
}

void DataConsent::unsetRequestedByOrg()
{
    m_RequestedByOrgIsSet = false;
}
std::shared_ptr<DataProcessingAgreement> DataConsent::getAgreement() const
{
    return m_Agreement;
}

void DataConsent::setAgreement(const std::shared_ptr<DataProcessingAgreement>& value)
{
    m_Agreement = value;
    m_AgreementIsSet = true;
}

bool DataConsent::agreementIsSet() const
{
    return m_AgreementIsSet;
}

void DataConsent::unsetAgreement()
{
    m_AgreementIsSet = false;
}
std::vector<std::shared_ptr<IdentityClaim>>& DataConsent::getIdentityClaims()
{
    return m_IdentityClaims;
}

void DataConsent::setIdentityClaims(const std::vector<std::shared_ptr<IdentityClaim>>& value)
{
    m_IdentityClaims = value;
    m_IdentityClaimsIsSet = true;
}

bool DataConsent::identityClaimsIsSet() const
{
    return m_IdentityClaimsIsSet;
}

void DataConsent::unsetIdentityClaims()
{
    m_IdentityClaimsIsSet = false;
}
std::vector<std::shared_ptr<DataConsentIdentifier>>& DataConsent::getIdentifiers()
{
    return m_Identifiers;
}

void DataConsent::setIdentifiers(const std::vector<std::shared_ptr<DataConsentIdentifier>>& value)
{
    m_Identifiers = value;
    m_IdentifiersIsSet = true;
}

bool DataConsent::identifiersIsSet() const
{
    return m_IdentifiersIsSet;
}

void DataConsent::unsetIdentifiers()
{
    m_IdentifiersIsSet = false;
}
std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>>& DataConsent::getRequestedFinancialAccounts()
{
    return m_RequestedFinancialAccounts;
}

void DataConsent::setRequestedFinancialAccounts(const std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>>& value)
{
    m_RequestedFinancialAccounts = value;
    m_RequestedFinancialAccountsIsSet = true;
}

bool DataConsent::requestedFinancialAccountsIsSet() const
{
    return m_RequestedFinancialAccountsIsSet;
}

void DataConsent::unsetRequestedFinancialAccounts()
{
    m_RequestedFinancialAccountsIsSet = false;
}
std::vector<std::shared_ptr<DataConsentRequestedDocument>>& DataConsent::getRequestedDocuments()
{
    return m_RequestedDocuments;
}

void DataConsent::setRequestedDocuments(const std::vector<std::shared_ptr<DataConsentRequestedDocument>>& value)
{
    m_RequestedDocuments = value;
    m_RequestedDocumentsIsSet = true;
}

bool DataConsent::requestedDocumentsIsSet() const
{
    return m_RequestedDocumentsIsSet;
}

void DataConsent::unsetRequestedDocuments()
{
    m_RequestedDocumentsIsSet = false;
}
}
}


