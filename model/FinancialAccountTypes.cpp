/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FinancialAccountTypes.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

FinancialAccountTypes::eFinancialAccountTypes toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("SavingsBankAccount")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_SAVINGSBANKACCOUNT;
    if (val == utility::conversions::to_string_t(U("MutualFund")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_MUTUALFUND;
    if (val == utility::conversions::to_string_t(U("EquityShare")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_EQUITYSHARE;
    if (val == utility::conversions::to_string_t(U("NationalPensionScheme")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_NATIONALPENSIONSCHEME;
    if (val == utility::conversions::to_string_t(U("InsurancePolicy")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_INSURANCEPOLICY;
    if (val == utility::conversions::to_string_t(U("Demat")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_DEMAT;
    if (val == utility::conversions::to_string_t(U("CreditCard")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_CREDITCARD;
    if (val == utility::conversions::to_string_t(U("Loan")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_LOAN;
    if (val == utility::conversions::to_string_t(U("Bond")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_BOND;
    if (val == utility::conversions::to_string_t(U("Debenture")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_DEBENTURE;
    if (val == utility::conversions::to_string_t(U("Deposit")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_DEPOSIT;
    if (val == utility::conversions::to_string_t(U("GovernmentSecurity")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_GOVERNMENTSECURITY;
    if (val == utility::conversions::to_string_t(U("IndianDepositoryReceipt")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_INDIANDEPOSITORYRECEIPT;
    if (val == utility::conversions::to_string_t(U("Invit")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_INVIT;
    if (val == utility::conversions::to_string_t(U("Reit")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_REIT;
    if (val == utility::conversions::to_string_t(U("PublicProvidentFund")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_PUBLICPROVIDENTFUND;
    if (val == utility::conversions::to_string_t(U("SystematicInvestmentPlan")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_SYSTEMATICINVESTMENTPLAN;
    if (val == utility::conversions::to_string_t(U("TermDeposit")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_TERMDEPOSIT;
    if (val == utility::conversions::to_string_t(U("UnitLinkedInsurancePlan")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_UNITLINKEDINSURANCEPLAN;
    if (val == utility::conversions::to_string_t(U("RecurringDeposit")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_RECURRINGDEPOSIT;
    if (val == utility::conversions::to_string_t(U("AlternativeInvestmentFund")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_ALTERNATIVEINVESTMENTFUND;
    if (val == utility::conversions::to_string_t(U("CreditScoreReport")))
        return FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_CREDITSCOREREPORT;
    return {};
}

EnumUnderlyingType fromEnum(FinancialAccountTypes::eFinancialAccountTypes e)
{
    switch (e)
    {
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_SAVINGSBANKACCOUNT:
        return U("SavingsBankAccount");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_MUTUALFUND:
        return U("MutualFund");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_EQUITYSHARE:
        return U("EquityShare");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_NATIONALPENSIONSCHEME:
        return U("NationalPensionScheme");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_INSURANCEPOLICY:
        return U("InsurancePolicy");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_DEMAT:
        return U("Demat");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_CREDITCARD:
        return U("CreditCard");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_LOAN:
        return U("Loan");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_BOND:
        return U("Bond");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_DEBENTURE:
        return U("Debenture");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_DEPOSIT:
        return U("Deposit");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_GOVERNMENTSECURITY:
        return U("GovernmentSecurity");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_INDIANDEPOSITORYRECEIPT:
        return U("IndianDepositoryReceipt");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_INVIT:
        return U("Invit");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_REIT:
        return U("Reit");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_PUBLICPROVIDENTFUND:
        return U("PublicProvidentFund");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_SYSTEMATICINVESTMENTPLAN:
        return U("SystematicInvestmentPlan");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_TERMDEPOSIT:
        return U("TermDeposit");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_UNITLINKEDINSURANCEPLAN:
        return U("UnitLinkedInsurancePlan");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_RECURRINGDEPOSIT:
        return U("RecurringDeposit");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_ALTERNATIVEINVESTMENTFUND:
        return U("AlternativeInvestmentFund");
    case FinancialAccountTypes::eFinancialAccountTypes::FinancialAccountTypes_CREDITSCOREREPORT:
        return U("CreditScoreReport");
    default:
        break;
    }
    return {};
}
}

FinancialAccountTypes::FinancialAccountTypes()
{
}

FinancialAccountTypes::~FinancialAccountTypes()
{
}

void FinancialAccountTypes::validate()
{
    // TODO: implement validation
}

web::json::value FinancialAccountTypes::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool FinancialAccountTypes::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void FinancialAccountTypes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool FinancialAccountTypes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

FinancialAccountTypes::eFinancialAccountTypes FinancialAccountTypes::getValue() const
{
   return m_value;
}

void FinancialAccountTypes::setValue(FinancialAccountTypes::eFinancialAccountTypes const value)
{
   m_value = value;
}


}
}


