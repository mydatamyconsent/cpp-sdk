/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Document.h"

namespace mydatamyconsent {
namespace models {




Document::Document()
{
    m_DocumentField = utility::conversions::to_string_t("");
    m_DocumentFieldIsSet = false;
    m_CustomKey = utility::conversions::to_string_t("");
    m_CustomKeyIsSet = false;
    m_DrnIsSet = false;
    m_RequirementIsSet = false;
}

Document::~Document()
{
}

void Document::validate()
{
    // TODO: implement validation
}

web::json::value Document::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentFieldIsSet)
    {
        val[utility::conversions::to_string_t(U("documentField"))] = ModelBase::toJson(m_DocumentField);
    }
    if(m_CustomKeyIsSet)
    {
        val[utility::conversions::to_string_t(U("customKey"))] = ModelBase::toJson(m_CustomKey);
    }
    if(m_DrnIsSet)
    {
        val[utility::conversions::to_string_t(U("drn"))] = ModelBase::toJson(m_Drn);
    }
    if(m_RequirementIsSet)
    {
        val[utility::conversions::to_string_t(U("requirement"))] = ModelBase::toJson(m_Requirement);
    }

    return val;
}

bool Document::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("documentField"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentField")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentField;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentField);
            setDocumentField(refVal_documentField);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_customKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_customKey);
            setCustomKey(refVal_customKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("drn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("drn")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_drn;
            ok &= ModelBase::fromJson(fieldValue, refVal_drn);
            setDrn(refVal_drn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requirement"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requirement")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentsRequired> refVal_requirement;
            ok &= ModelBase::fromJson(fieldValue, refVal_requirement);
            setRequirement(refVal_requirement);
        }
    }
    return ok;
}

void Document::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DocumentFieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentField")), m_DocumentField));
    }
    if(m_CustomKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customKey")), m_CustomKey));
    }
    if(m_DrnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("drn")), m_Drn));
    }
    if(m_RequirementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requirement")), m_Requirement));
    }
}

bool Document::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("documentField"))))
    {
        utility::string_t refVal_documentField;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentField"))), refVal_documentField );
        setDocumentField(refVal_documentField);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customKey"))))
    {
        utility::string_t refVal_customKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customKey"))), refVal_customKey );
        setCustomKey(refVal_customKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("drn"))))
    {
        std::vector<utility::string_t> refVal_drn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("drn"))), refVal_drn );
        setDrn(refVal_drn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requirement"))))
    {
        std::shared_ptr<DocumentsRequired> refVal_requirement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requirement"))), refVal_requirement );
        setRequirement(refVal_requirement);
    }
    return ok;
}

utility::string_t Document::getDocumentField() const
{
    return m_DocumentField;
}

void Document::setDocumentField(const utility::string_t& value)
{
    m_DocumentField = value;
    m_DocumentFieldIsSet = true;
}

bool Document::documentFieldIsSet() const
{
    return m_DocumentFieldIsSet;
}

void Document::unsetDocumentField()
{
    m_DocumentFieldIsSet = false;
}
utility::string_t Document::getCustomKey() const
{
    return m_CustomKey;
}

void Document::setCustomKey(const utility::string_t& value)
{
    m_CustomKey = value;
    m_CustomKeyIsSet = true;
}

bool Document::customKeyIsSet() const
{
    return m_CustomKeyIsSet;
}

void Document::unsetCustomKey()
{
    m_CustomKeyIsSet = false;
}
std::vector<utility::string_t>& Document::getDrn()
{
    return m_Drn;
}

void Document::setDrn(const std::vector<utility::string_t>& value)
{
    m_Drn = value;
    m_DrnIsSet = true;
}

bool Document::drnIsSet() const
{
    return m_DrnIsSet;
}

void Document::unsetDrn()
{
    m_DrnIsSet = false;
}
std::shared_ptr<DocumentsRequired> Document::getRequirement() const
{
    return m_Requirement;
}

void Document::setRequirement(const std::shared_ptr<DocumentsRequired>& value)
{
    m_Requirement = value;
    m_RequirementIsSet = true;
}

bool Document::requirementIsSet() const
{
    return m_RequirementIsSet;
}

void Document::unsetRequirement()
{
    m_RequirementIsSet = false;
}
}
}


