/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrganizationMetaData.h"

namespace mydatamyconsent {
namespace models {




OrganizationMetaData::OrganizationMetaData()
{
    m_DigiLockerMetadataIsSet = false;
}

OrganizationMetaData::~OrganizationMetaData()
{
}

void OrganizationMetaData::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationMetaData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DigiLockerMetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("digiLockerMetadata"))] = ModelBase::toJson(m_DigiLockerMetadata);
    }

    return val;
}

bool OrganizationMetaData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("digiLockerMetadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("digiLockerMetadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_digiLockerMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_digiLockerMetadata);
            setDigiLockerMetadata(refVal_digiLockerMetadata);
        }
    }
    return ok;
}

void OrganizationMetaData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DigiLockerMetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("digiLockerMetadata")), m_DigiLockerMetadata));
    }
}

bool OrganizationMetaData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("digiLockerMetadata"))))
    {
        std::shared_ptr<AnyType> refVal_digiLockerMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("digiLockerMetadata"))), refVal_digiLockerMetadata );
        setDigiLockerMetadata(refVal_digiLockerMetadata);
    }
    return ok;
}

std::shared_ptr<AnyType> OrganizationMetaData::getDigiLockerMetadata() const
{
    return m_DigiLockerMetadata;
}

void OrganizationMetaData::setDigiLockerMetadata(const std::shared_ptr<AnyType>& value)
{
    m_DigiLockerMetadata = value;
    m_DigiLockerMetadataIsSet = true;
}

bool OrganizationMetaData::digiLockerMetadataIsSet() const
{
    return m_DigiLockerMetadataIsSet;
}

void OrganizationMetaData::unsetDigiLockerMetadata()
{
    m_DigiLockerMetadataIsSet = false;
}
}
}


