/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataProcessingAgreement.h"

namespace mydatamyconsent {
namespace models {




DataProcessingAgreement::DataProcessingAgreement()
{
    m_CreatedBy = utility::conversions::to_string_t("");
    m_CreatedByIsSet = false;
    m_CreatedAtUtc = utility::datetime();
    m_CreatedAtUtcIsSet = false;
    m_UpdatedBy = utility::conversions::to_string_t("");
    m_UpdatedByIsSet = false;
    m_UpdatedAtUtc = utility::datetime();
    m_UpdatedAtUtcIsSet = false;
    m_CreatedByUserIsSet = false;
    m_UpdatedByUserIsSet = false;
    m_DeletedBy = utility::conversions::to_string_t("");
    m_DeletedByIsSet = false;
    m_DeletedAtUtc = utility::datetime();
    m_DeletedAtUtcIsSet = false;
    m_DeletedByUserIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_OrganizationId = utility::conversions::to_string_t("");
    m_OrganizationIdIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_AttachmentUrl = utility::conversions::to_string_t("");
    m_AttachmentUrlIsSet = false;
    m_OrganizationIsSet = false;
}

DataProcessingAgreement::~DataProcessingAgreement()
{
}

void DataProcessingAgreement::validate()
{
    // TODO: implement validation
}

web::json::value DataProcessingAgreement::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreatedByIsSet)
    {
        val[utility::conversions::to_string_t(U("createdBy"))] = ModelBase::toJson(m_CreatedBy);
    }
    if(m_CreatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAtUtc"))] = ModelBase::toJson(m_CreatedAtUtc);
    }
    if(m_UpdatedByIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedBy"))] = ModelBase::toJson(m_UpdatedBy);
    }
    if(m_UpdatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAtUtc"))] = ModelBase::toJson(m_UpdatedAtUtc);
    }
    if(m_CreatedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("createdByUser"))] = ModelBase::toJson(m_CreatedByUser);
    }
    if(m_UpdatedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedByUser"))] = ModelBase::toJson(m_UpdatedByUser);
    }
    if(m_DeletedByIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedBy"))] = ModelBase::toJson(m_DeletedBy);
    }
    if(m_DeletedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedAtUtc"))] = ModelBase::toJson(m_DeletedAtUtc);
    }
    if(m_DeletedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedByUser"))] = ModelBase::toJson(m_DeletedByUser);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OrganizationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationId"))] = ModelBase::toJson(m_OrganizationId);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_AttachmentUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("attachmentUrl"))] = ModelBase::toJson(m_AttachmentUrl);
    }
    if(m_OrganizationIsSet)
    {
        val[utility::conversions::to_string_t(U("organization"))] = ModelBase::toJson(m_Organization);
    }

    return val;
}

bool DataProcessingAgreement::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("createdBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_createdBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdBy);
            setCreatedBy(refVal_createdBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAtUtc);
            setCreatedAtUtc(refVal_createdAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_updatedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedBy);
            setUpdatedBy(refVal_updatedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAtUtc);
            setUpdatedAtUtc(refVal_updatedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_createdByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdByUser);
            setCreatedByUser(refVal_createdByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_updatedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedByUser);
            setUpdatedByUser(refVal_updatedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_deletedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedBy);
            setDeletedBy(refVal_deletedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_deletedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedAtUtc);
            setDeletedAtUtc(refVal_deletedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_deletedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedByUser);
            setDeletedByUser(refVal_deletedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organizationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationId);
            setOrganizationId(refVal_organizationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_body);
            setBody(refVal_body);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attachmentUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attachmentUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_attachmentUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_attachmentUrl);
            setAttachmentUrl(refVal_attachmentUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Organization> refVal_organization;
            ok &= ModelBase::fromJson(fieldValue, refVal_organization);
            setOrganization(refVal_organization);
        }
    }
    return ok;
}

void DataProcessingAgreement::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdBy")), m_CreatedBy));
    }
    if(m_CreatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAtUtc")), m_CreatedAtUtc));
    }
    if(m_UpdatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedBy")), m_UpdatedBy));
    }
    if(m_UpdatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAtUtc")), m_UpdatedAtUtc));
    }
    if(m_CreatedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdByUser")), m_CreatedByUser));
    }
    if(m_UpdatedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedByUser")), m_UpdatedByUser));
    }
    if(m_DeletedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedBy")), m_DeletedBy));
    }
    if(m_DeletedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedAtUtc")), m_DeletedAtUtc));
    }
    if(m_DeletedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedByUser")), m_DeletedByUser));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OrganizationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationId")), m_OrganizationId));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_AttachmentUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attachmentUrl")), m_AttachmentUrl));
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization")), m_Organization));
    }
}

bool DataProcessingAgreement::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("createdBy"))))
    {
        utility::string_t refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdBy"))), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        utility::datetime refVal_createdAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAtUtc"))), refVal_createdAtUtc );
        setCreatedAtUtc(refVal_createdAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedBy"))))
    {
        utility::string_t refVal_updatedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedBy"))), refVal_updatedBy );
        setUpdatedBy(refVal_updatedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAtUtc"))))
    {
        utility::datetime refVal_updatedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAtUtc"))), refVal_updatedAtUtc );
        setUpdatedAtUtc(refVal_updatedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_createdByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdByUser"))), refVal_createdByUser );
        setCreatedByUser(refVal_createdByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_updatedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedByUser"))), refVal_updatedByUser );
        setUpdatedByUser(refVal_updatedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedBy"))))
    {
        utility::string_t refVal_deletedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedBy"))), refVal_deletedBy );
        setDeletedBy(refVal_deletedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedAtUtc"))))
    {
        utility::datetime refVal_deletedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedAtUtc"))), refVal_deletedAtUtc );
        setDeletedAtUtc(refVal_deletedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_deletedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedByUser"))), refVal_deletedByUser );
        setDeletedByUser(refVal_deletedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationId"))))
    {
        utility::string_t refVal_organizationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationId"))), refVal_organizationId );
        setOrganizationId(refVal_organizationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attachmentUrl"))))
    {
        utility::string_t refVal_attachmentUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attachmentUrl"))), refVal_attachmentUrl );
        setAttachmentUrl(refVal_attachmentUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization"))))
    {
        std::shared_ptr<Organization> refVal_organization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization"))), refVal_organization );
        setOrganization(refVal_organization);
    }
    return ok;
}

utility::string_t DataProcessingAgreement::getCreatedBy() const
{
    return m_CreatedBy;
}

void DataProcessingAgreement::setCreatedBy(const utility::string_t& value)
{
    m_CreatedBy = value;
    m_CreatedByIsSet = true;
}

bool DataProcessingAgreement::createdByIsSet() const
{
    return m_CreatedByIsSet;
}

void DataProcessingAgreement::unsetCreatedBy()
{
    m_CreatedByIsSet = false;
}
utility::datetime DataProcessingAgreement::getCreatedAtUtc() const
{
    return m_CreatedAtUtc;
}

void DataProcessingAgreement::setCreatedAtUtc(const utility::datetime& value)
{
    m_CreatedAtUtc = value;
    m_CreatedAtUtcIsSet = true;
}

bool DataProcessingAgreement::createdAtUtcIsSet() const
{
    return m_CreatedAtUtcIsSet;
}

void DataProcessingAgreement::unsetCreatedAtUtc()
{
    m_CreatedAtUtcIsSet = false;
}
utility::string_t DataProcessingAgreement::getUpdatedBy() const
{
    return m_UpdatedBy;
}

void DataProcessingAgreement::setUpdatedBy(const utility::string_t& value)
{
    m_UpdatedBy = value;
    m_UpdatedByIsSet = true;
}

bool DataProcessingAgreement::updatedByIsSet() const
{
    return m_UpdatedByIsSet;
}

void DataProcessingAgreement::unsetUpdatedBy()
{
    m_UpdatedByIsSet = false;
}
utility::datetime DataProcessingAgreement::getUpdatedAtUtc() const
{
    return m_UpdatedAtUtc;
}

void DataProcessingAgreement::setUpdatedAtUtc(const utility::datetime& value)
{
    m_UpdatedAtUtc = value;
    m_UpdatedAtUtcIsSet = true;
}

bool DataProcessingAgreement::updatedAtUtcIsSet() const
{
    return m_UpdatedAtUtcIsSet;
}

void DataProcessingAgreement::unsetUpdatedAtUtc()
{
    m_UpdatedAtUtcIsSet = false;
}
std::shared_ptr<ApplicationUser> DataProcessingAgreement::getCreatedByUser() const
{
    return m_CreatedByUser;
}

void DataProcessingAgreement::setCreatedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_CreatedByUser = value;
    m_CreatedByUserIsSet = true;
}

bool DataProcessingAgreement::createdByUserIsSet() const
{
    return m_CreatedByUserIsSet;
}

void DataProcessingAgreement::unsetCreatedByUser()
{
    m_CreatedByUserIsSet = false;
}
std::shared_ptr<ApplicationUser> DataProcessingAgreement::getUpdatedByUser() const
{
    return m_UpdatedByUser;
}

void DataProcessingAgreement::setUpdatedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_UpdatedByUser = value;
    m_UpdatedByUserIsSet = true;
}

bool DataProcessingAgreement::updatedByUserIsSet() const
{
    return m_UpdatedByUserIsSet;
}

void DataProcessingAgreement::unsetUpdatedByUser()
{
    m_UpdatedByUserIsSet = false;
}
utility::string_t DataProcessingAgreement::getDeletedBy() const
{
    return m_DeletedBy;
}

void DataProcessingAgreement::setDeletedBy(const utility::string_t& value)
{
    m_DeletedBy = value;
    m_DeletedByIsSet = true;
}

bool DataProcessingAgreement::deletedByIsSet() const
{
    return m_DeletedByIsSet;
}

void DataProcessingAgreement::unsetDeletedBy()
{
    m_DeletedByIsSet = false;
}
utility::datetime DataProcessingAgreement::getDeletedAtUtc() const
{
    return m_DeletedAtUtc;
}

void DataProcessingAgreement::setDeletedAtUtc(const utility::datetime& value)
{
    m_DeletedAtUtc = value;
    m_DeletedAtUtcIsSet = true;
}

bool DataProcessingAgreement::deletedAtUtcIsSet() const
{
    return m_DeletedAtUtcIsSet;
}

void DataProcessingAgreement::unsetDeletedAtUtc()
{
    m_DeletedAtUtcIsSet = false;
}
std::shared_ptr<ApplicationUser> DataProcessingAgreement::getDeletedByUser() const
{
    return m_DeletedByUser;
}

void DataProcessingAgreement::setDeletedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_DeletedByUser = value;
    m_DeletedByUserIsSet = true;
}

bool DataProcessingAgreement::deletedByUserIsSet() const
{
    return m_DeletedByUserIsSet;
}

void DataProcessingAgreement::unsetDeletedByUser()
{
    m_DeletedByUserIsSet = false;
}
utility::string_t DataProcessingAgreement::getId() const
{
    return m_Id;
}

void DataProcessingAgreement::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DataProcessingAgreement::idIsSet() const
{
    return m_IdIsSet;
}

void DataProcessingAgreement::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DataProcessingAgreement::getOrganizationId() const
{
    return m_OrganizationId;
}

void DataProcessingAgreement::setOrganizationId(const utility::string_t& value)
{
    m_OrganizationId = value;
    m_OrganizationIdIsSet = true;
}

bool DataProcessingAgreement::organizationIdIsSet() const
{
    return m_OrganizationIdIsSet;
}

void DataProcessingAgreement::unsetOrganizationId()
{
    m_OrganizationIdIsSet = false;
}
utility::string_t DataProcessingAgreement::getVersion() const
{
    return m_Version;
}

void DataProcessingAgreement::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool DataProcessingAgreement::versionIsSet() const
{
    return m_VersionIsSet;
}

void DataProcessingAgreement::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t DataProcessingAgreement::getBody() const
{
    return m_Body;
}

void DataProcessingAgreement::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool DataProcessingAgreement::bodyIsSet() const
{
    return m_BodyIsSet;
}

void DataProcessingAgreement::unsetBody()
{
    m_BodyIsSet = false;
}
utility::string_t DataProcessingAgreement::getAttachmentUrl() const
{
    return m_AttachmentUrl;
}

void DataProcessingAgreement::setAttachmentUrl(const utility::string_t& value)
{
    m_AttachmentUrl = value;
    m_AttachmentUrlIsSet = true;
}

bool DataProcessingAgreement::attachmentUrlIsSet() const
{
    return m_AttachmentUrlIsSet;
}

void DataProcessingAgreement::unsetAttachmentUrl()
{
    m_AttachmentUrlIsSet = false;
}
std::shared_ptr<Organization> DataProcessingAgreement::getOrganization() const
{
    return m_Organization;
}

void DataProcessingAgreement::setOrganization(const std::shared_ptr<Organization>& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}

bool DataProcessingAgreement::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void DataProcessingAgreement::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
}
}


