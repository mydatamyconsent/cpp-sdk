/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrganizationDocumentDetailsDto.h"

namespace mydatamyconsent {
namespace models {




OrganizationDocumentDetailsDto::OrganizationDocumentDetailsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_OrganizationId = utility::conversions::to_string_t("");
    m_OrganizationIdIsSet = false;
    m_OrganizationName = utility::conversions::to_string_t("");
    m_OrganizationNameIsSet = false;
    m_r_typeId = utility::conversions::to_string_t("");
    m_r_typeIdIsSet = false;
    m_r_typeName = utility::conversions::to_string_t("");
    m_r_typeNameIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Identifier = utility::conversions::to_string_t("");
    m_IdentifierIsSet = false;
    m_StorageUrl = utility::conversions::to_string_t("");
    m_StorageUrlIsSet = false;
    m_CountryIso2 = utility::conversions::to_string_t("");
    m_CountryIso2IsSet = false;
    m_IssuerId = utility::conversions::to_string_t("");
    m_IssuerIdIsSet = false;
    m_IssuerName = utility::conversions::to_string_t("");
    m_IssuerNameIsSet = false;
}

OrganizationDocumentDetailsDto::~OrganizationDocumentDetailsDto()
{
}

void OrganizationDocumentDetailsDto::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationDocumentDetailsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OrganizationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationId"))] = ModelBase::toJson(m_OrganizationId);
    }
    if(m_OrganizationNameIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationName"))] = ModelBase::toJson(m_OrganizationName);
    }
    if(m_r_typeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("typeId"))] = ModelBase::toJson(m_r_typeId);
    }
    if(m_r_typeNameIsSet)
    {
        val[utility::conversions::to_string_t(U("typeName"))] = ModelBase::toJson(m_r_typeName);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_IdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("identifier"))] = ModelBase::toJson(m_Identifier);
    }
    if(m_StorageUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("storageUrl"))] = ModelBase::toJson(m_StorageUrl);
    }
    if(m_CountryIso2IsSet)
    {
        val[utility::conversions::to_string_t(U("countryIso2"))] = ModelBase::toJson(m_CountryIso2);
    }
    if(m_IssuerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("issuerId"))] = ModelBase::toJson(m_IssuerId);
    }
    if(m_IssuerNameIsSet)
    {
        val[utility::conversions::to_string_t(U("issuerName"))] = ModelBase::toJson(m_IssuerName);
    }

    return val;
}

bool OrganizationDocumentDetailsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organizationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationId);
            setOrganizationId(refVal_organizationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organizationName;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationName);
            setOrganizationName(refVal_organizationName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("typeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("typeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeId);
            setRTypeId(refVal_typeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("typeName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("typeName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeName);
            setRTypeName(refVal_typeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_identifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_identifier);
            setIdentifier(refVal_identifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("storageUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("storageUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_storageUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_storageUrl);
            setStorageUrl(refVal_storageUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryIso2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryIso2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_countryIso2;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryIso2);
            setCountryIso2(refVal_countryIso2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_issuerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuerId);
            setIssuerId(refVal_issuerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuerName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuerName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_issuerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuerName);
            setIssuerName(refVal_issuerName);
        }
    }
    return ok;
}

void OrganizationDocumentDetailsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OrganizationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationId")), m_OrganizationId));
    }
    if(m_OrganizationNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationName")), m_OrganizationName));
    }
    if(m_r_typeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("typeId")), m_r_typeId));
    }
    if(m_r_typeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("typeName")), m_r_typeName));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_IdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifier")), m_Identifier));
    }
    if(m_StorageUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("storageUrl")), m_StorageUrl));
    }
    if(m_CountryIso2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryIso2")), m_CountryIso2));
    }
    if(m_IssuerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuerId")), m_IssuerId));
    }
    if(m_IssuerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuerName")), m_IssuerName));
    }
}

bool OrganizationDocumentDetailsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationId"))))
    {
        utility::string_t refVal_organizationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationId"))), refVal_organizationId );
        setOrganizationId(refVal_organizationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationName"))))
    {
        utility::string_t refVal_organizationName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationName"))), refVal_organizationName );
        setOrganizationName(refVal_organizationName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("typeId"))))
    {
        utility::string_t refVal_typeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("typeId"))), refVal_typeId );
        setRTypeId(refVal_typeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("typeName"))))
    {
        utility::string_t refVal_typeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("typeName"))), refVal_typeName );
        setRTypeName(refVal_typeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identifier"))))
    {
        utility::string_t refVal_identifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifier"))), refVal_identifier );
        setIdentifier(refVal_identifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("storageUrl"))))
    {
        utility::string_t refVal_storageUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("storageUrl"))), refVal_storageUrl );
        setStorageUrl(refVal_storageUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryIso2"))))
    {
        utility::string_t refVal_countryIso2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryIso2"))), refVal_countryIso2 );
        setCountryIso2(refVal_countryIso2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuerId"))))
    {
        utility::string_t refVal_issuerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuerId"))), refVal_issuerId );
        setIssuerId(refVal_issuerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuerName"))))
    {
        utility::string_t refVal_issuerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuerName"))), refVal_issuerName );
        setIssuerName(refVal_issuerName);
    }
    return ok;
}

utility::string_t OrganizationDocumentDetailsDto::getId() const
{
    return m_Id;
}

void OrganizationDocumentDetailsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrganizationDocumentDetailsDto::idIsSet() const
{
    return m_IdIsSet;
}

void OrganizationDocumentDetailsDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrganizationDocumentDetailsDto::getOrganizationId() const
{
    return m_OrganizationId;
}

void OrganizationDocumentDetailsDto::setOrganizationId(const utility::string_t& value)
{
    m_OrganizationId = value;
    m_OrganizationIdIsSet = true;
}

bool OrganizationDocumentDetailsDto::organizationIdIsSet() const
{
    return m_OrganizationIdIsSet;
}

void OrganizationDocumentDetailsDto::unsetOrganizationId()
{
    m_OrganizationIdIsSet = false;
}
utility::string_t OrganizationDocumentDetailsDto::getOrganizationName() const
{
    return m_OrganizationName;
}

void OrganizationDocumentDetailsDto::setOrganizationName(const utility::string_t& value)
{
    m_OrganizationName = value;
    m_OrganizationNameIsSet = true;
}

bool OrganizationDocumentDetailsDto::organizationNameIsSet() const
{
    return m_OrganizationNameIsSet;
}

void OrganizationDocumentDetailsDto::unsetOrganizationName()
{
    m_OrganizationNameIsSet = false;
}
utility::string_t OrganizationDocumentDetailsDto::getRTypeId() const
{
    return m_r_typeId;
}

void OrganizationDocumentDetailsDto::setRTypeId(const utility::string_t& value)
{
    m_r_typeId = value;
    m_r_typeIdIsSet = true;
}

bool OrganizationDocumentDetailsDto::rTypeIdIsSet() const
{
    return m_r_typeIdIsSet;
}

void OrganizationDocumentDetailsDto::unsetr_typeId()
{
    m_r_typeIdIsSet = false;
}
utility::string_t OrganizationDocumentDetailsDto::getRTypeName() const
{
    return m_r_typeName;
}

void OrganizationDocumentDetailsDto::setRTypeName(const utility::string_t& value)
{
    m_r_typeName = value;
    m_r_typeNameIsSet = true;
}

bool OrganizationDocumentDetailsDto::rTypeNameIsSet() const
{
    return m_r_typeNameIsSet;
}

void OrganizationDocumentDetailsDto::unsetr_typeName()
{
    m_r_typeNameIsSet = false;
}
utility::string_t OrganizationDocumentDetailsDto::getName() const
{
    return m_Name;
}

void OrganizationDocumentDetailsDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool OrganizationDocumentDetailsDto::nameIsSet() const
{
    return m_NameIsSet;
}

void OrganizationDocumentDetailsDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t OrganizationDocumentDetailsDto::getIdentifier() const
{
    return m_Identifier;
}

void OrganizationDocumentDetailsDto::setIdentifier(const utility::string_t& value)
{
    m_Identifier = value;
    m_IdentifierIsSet = true;
}

bool OrganizationDocumentDetailsDto::identifierIsSet() const
{
    return m_IdentifierIsSet;
}

void OrganizationDocumentDetailsDto::unsetIdentifier()
{
    m_IdentifierIsSet = false;
}
utility::string_t OrganizationDocumentDetailsDto::getStorageUrl() const
{
    return m_StorageUrl;
}

void OrganizationDocumentDetailsDto::setStorageUrl(const utility::string_t& value)
{
    m_StorageUrl = value;
    m_StorageUrlIsSet = true;
}

bool OrganizationDocumentDetailsDto::storageUrlIsSet() const
{
    return m_StorageUrlIsSet;
}

void OrganizationDocumentDetailsDto::unsetStorageUrl()
{
    m_StorageUrlIsSet = false;
}
utility::string_t OrganizationDocumentDetailsDto::getCountryIso2() const
{
    return m_CountryIso2;
}

void OrganizationDocumentDetailsDto::setCountryIso2(const utility::string_t& value)
{
    m_CountryIso2 = value;
    m_CountryIso2IsSet = true;
}

bool OrganizationDocumentDetailsDto::countryIso2IsSet() const
{
    return m_CountryIso2IsSet;
}

void OrganizationDocumentDetailsDto::unsetCountryIso2()
{
    m_CountryIso2IsSet = false;
}
utility::string_t OrganizationDocumentDetailsDto::getIssuerId() const
{
    return m_IssuerId;
}

void OrganizationDocumentDetailsDto::setIssuerId(const utility::string_t& value)
{
    m_IssuerId = value;
    m_IssuerIdIsSet = true;
}

bool OrganizationDocumentDetailsDto::issuerIdIsSet() const
{
    return m_IssuerIdIsSet;
}

void OrganizationDocumentDetailsDto::unsetIssuerId()
{
    m_IssuerIdIsSet = false;
}
utility::string_t OrganizationDocumentDetailsDto::getIssuerName() const
{
    return m_IssuerName;
}

void OrganizationDocumentDetailsDto::setIssuerName(const utility::string_t& value)
{
    m_IssuerName = value;
    m_IssuerNameIsSet = true;
}

bool OrganizationDocumentDetailsDto::issuerNameIsSet() const
{
    return m_IssuerNameIsSet;
}

void OrganizationDocumentDetailsDto::unsetIssuerName()
{
    m_IssuerNameIsSet = false;
}
}
}


