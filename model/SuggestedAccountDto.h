/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SuggestedAccountDto.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_SuggestedAccountDto_H_
#define MYDATAMYCONSENT_MODELS_SuggestedAccountDto_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  SuggestedAccountDto
    : public ModelBase
{
public:
    SuggestedAccountDto();
    virtual ~SuggestedAccountDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SuggestedAccountDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIssuerId() const;
    bool issuerIdIsSet() const;
    void unsetIssuerId();

    void setIssuerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccountId() const;
    bool accountIdIsSet() const;
    void unsetAccountId();

    void setAccountId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIssuerName() const;
    bool issuerNameIsSet() const;
    void unsetIssuerName();

    void setIssuerName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccountLogoUrl() const;
    bool accountLogoUrlIsSet() const;
    void unsetAccountLogoUrl();

    void setAccountLogoUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccountNumber() const;
    bool accountNumberIsSet() const;
    void unsetAccountNumber();

    void setAccountNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccountCategory() const;
    bool accountCategoryIsSet() const;
    void unsetAccountCategory();

    void setAccountCategory(const utility::string_t& value);


protected:
    utility::string_t m_IssuerId;
    bool m_IssuerIdIsSet;
    utility::string_t m_AccountId;
    bool m_AccountIdIsSet;
    utility::string_t m_IssuerName;
    bool m_IssuerNameIsSet;
    utility::string_t m_AccountLogoUrl;
    bool m_AccountLogoUrlIsSet;
    utility::string_t m_AccountNumber;
    bool m_AccountNumberIsSet;
    utility::string_t m_AccountCategory;
    bool m_AccountCategoryIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_SuggestedAccountDto_H_ */
