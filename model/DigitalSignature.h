/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DigitalSignature.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_DigitalSignature_H_
#define MYDATAMYCONSENT_MODELS_DigitalSignature_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  DigitalSignature
    : public ModelBase
{
public:
    DigitalSignature();
    virtual ~DigitalSignature();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DigitalSignature members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSignedBy() const;
    bool signedByIsSet() const;
    void unsetSignedBy();

    void setSignedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCertIssuedBy() const;
    bool certIssuedByIsSet() const;
    void unsetCertIssuedBy();

    void setCertIssuedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getValidFrom() const;
    bool validFromIsSet() const;
    void unsetValidFrom();

    void setValidFrom(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getValidTill() const;
    bool validTillIsSet() const;
    void unsetValidTill();

    void setValidTill(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReason() const;
    bool reasonIsSet() const;
    void unsetReason();

    void setReason(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();

    void setLocation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSha1Digest() const;
    bool sha1DigestIsSet() const;
    void unsetSha1Digest();

    void setSha1Digest(const utility::string_t& value);


protected:
    utility::string_t m_SignedBy;
    bool m_SignedByIsSet;
    utility::string_t m_CertIssuedBy;
    bool m_CertIssuedByIsSet;
    utility::datetime m_ValidFrom;
    bool m_ValidFromIsSet;
    utility::datetime m_ValidTill;
    bool m_ValidTillIsSet;
    utility::string_t m_Reason;
    bool m_ReasonIsSet;
    utility::string_t m_Location;
    bool m_LocationIsSet;
    utility::string_t m_Sha1Digest;
    bool m_Sha1DigestIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DigitalSignature_H_ */
