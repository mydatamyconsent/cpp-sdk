/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Organization.h"

namespace mydatamyconsent {
namespace models {




Organization::Organization()
{
    m_CreatedBy = utility::conversions::to_string_t("");
    m_CreatedByIsSet = false;
    m_CreatedAtUtc = utility::datetime();
    m_CreatedAtUtcIsSet = false;
    m_UpdatedBy = utility::conversions::to_string_t("");
    m_UpdatedByIsSet = false;
    m_UpdatedAtUtc = utility::datetime();
    m_UpdatedAtUtcIsSet = false;
    m_CreatedByUserIsSet = false;
    m_UpdatedByUserIsSet = false;
    m_DeletedBy = utility::conversions::to_string_t("");
    m_DeletedByIsSet = false;
    m_DeletedAtUtc = utility::datetime();
    m_DeletedAtUtcIsSet = false;
    m_DeletedByUserIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_DataPartnerId = utility::conversions::to_string_t("");
    m_DataPartnerIdIsSet = false;
    m_r_typeId = utility::conversions::to_string_t("");
    m_r_typeIdIsSet = false;
    m_CategoryId = utility::conversions::to_string_t("");
    m_CategoryIdIsSet = false;
    m_DocumentProviderCategoryId = utility::conversions::to_string_t("");
    m_DocumentProviderCategoryIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_RegulatorName = utility::conversions::to_string_t("");
    m_RegulatorNameIsSet = false;
    m_BrandName = utility::conversions::to_string_t("");
    m_BrandNameIsSet = false;
    m_AuthorizedPersonnelTaxId = utility::conversions::to_string_t("");
    m_AuthorizedPersonnelTaxIdIsSet = false;
    m_AuthorizedPersonnelName = utility::conversions::to_string_t("");
    m_AuthorizedPersonnelNameIsSet = false;
    m_AuthorizedPersonnelKycDocumentTypeIsSet = false;
    m_RegistrationId = utility::conversions::to_string_t("");
    m_RegistrationIdIsSet = false;
    m_VatId = utility::conversions::to_string_t("");
    m_VatIdIsSet = false;
    m_TaxId = utility::conversions::to_string_t("");
    m_TaxIdIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_LogoUrl = utility::conversions::to_string_t("");
    m_LogoUrlIsSet = false;
    m_ContactEmail = utility::conversions::to_string_t("");
    m_ContactEmailIsSet = false;
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_CountryId = utility::conversions::to_string_t("");
    m_CountryIdIsSet = false;
    m_StateId = utility::conversions::to_string_t("");
    m_StateIdIsSet = false;
    m_StatusIsSet = false;
    m_CompanyCode = utility::conversions::to_string_t("");
    m_CompanyCodeIsSet = false;
    m_PrivacyPolicyUrl = utility::conversions::to_string_t("");
    m_PrivacyPolicyUrlIsSet = false;
    m_TermsOfServiceUrl = utility::conversions::to_string_t("");
    m_TermsOfServiceUrlIsSet = false;
    m_WebsiteUrl = utility::conversions::to_string_t("");
    m_WebsiteUrlIsSet = false;
    m_HelpLineNumber = utility::conversions::to_string_t("");
    m_HelpLineNumberIsSet = false;
    m_SupportEmail = utility::conversions::to_string_t("");
    m_SupportEmailIsSet = false;
    m_IsGovernmentOrganization = false;
    m_IsGovernmentOrganizationIsSet = false;
    m_DlApiKey = utility::conversions::to_string_t("");
    m_DlApiKeyIsSet = false;
    m_IsKyoCompleted = false;
    m_IsKyoCompletedIsSet = false;
    m_IsEnabled = false;
    m_IsEnabledIsSet = false;
    m_IsDataProvider = false;
    m_IsDataProviderIsSet = false;
    m_IsDataConsumer = false;
    m_IsDataConsumerIsSet = false;
    m_SubmittedAtUtc = utility::datetime();
    m_SubmittedAtUtcIsSet = false;
    m_ApprovedBy = utility::conversions::to_string_t("");
    m_ApprovedByIsSet = false;
    m_ApprovedAtUtc = utility::datetime();
    m_ApprovedAtUtcIsSet = false;
    m_IsDigiLockerOrganization = false;
    m_IsDigiLockerOrganizationIsSet = false;
    m_IsMdmcMaintained = false;
    m_IsMdmcMaintainedIsSet = false;
    m_IsBbps = false;
    m_IsBbpsIsSet = false;
    m_MetaDataIsSet = false;
    m_CountryCode = utility::conversions::to_string_t("");
    m_CountryCodeIsSet = false;
    m_OrganizationTypeIsSet = false;
    m_OrganizationCategoryIsSet = false;
    m_DocumentProviderCategoryIsSet = false;
    m_AddressesIsSet = false;
    m_FinancialAccountsIsSet = false;
    m_CountryStateIsSet = false;
    m_ApprovedByUserIsSet = false;
    m_KyoDocumentsIsSet = false;
    m_IsDelete = false;
    m_IsDeleteIsSet = false;
    m_RecoveryToken = utility::conversions::to_string_t("");
    m_RecoveryTokenIsSet = false;
}

Organization::~Organization()
{
}

void Organization::validate()
{
    // TODO: implement validation
}

web::json::value Organization::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreatedByIsSet)
    {
        val[utility::conversions::to_string_t(U("createdBy"))] = ModelBase::toJson(m_CreatedBy);
    }
    if(m_CreatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAtUtc"))] = ModelBase::toJson(m_CreatedAtUtc);
    }
    if(m_UpdatedByIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedBy"))] = ModelBase::toJson(m_UpdatedBy);
    }
    if(m_UpdatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAtUtc"))] = ModelBase::toJson(m_UpdatedAtUtc);
    }
    if(m_CreatedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("createdByUser"))] = ModelBase::toJson(m_CreatedByUser);
    }
    if(m_UpdatedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedByUser"))] = ModelBase::toJson(m_UpdatedByUser);
    }
    if(m_DeletedByIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedBy"))] = ModelBase::toJson(m_DeletedBy);
    }
    if(m_DeletedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedAtUtc"))] = ModelBase::toJson(m_DeletedAtUtc);
    }
    if(m_DeletedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedByUser"))] = ModelBase::toJson(m_DeletedByUser);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DataPartnerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("dataPartnerId"))] = ModelBase::toJson(m_DataPartnerId);
    }
    if(m_r_typeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("typeId"))] = ModelBase::toJson(m_r_typeId);
    }
    if(m_CategoryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryId"))] = ModelBase::toJson(m_CategoryId);
    }
    if(m_DocumentProviderCategoryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("documentProviderCategoryId"))] = ModelBase::toJson(m_DocumentProviderCategoryId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_RegulatorNameIsSet)
    {
        val[utility::conversions::to_string_t(U("regulatorName"))] = ModelBase::toJson(m_RegulatorName);
    }
    if(m_BrandNameIsSet)
    {
        val[utility::conversions::to_string_t(U("brandName"))] = ModelBase::toJson(m_BrandName);
    }
    if(m_AuthorizedPersonnelTaxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("authorizedPersonnelTaxId"))] = ModelBase::toJson(m_AuthorizedPersonnelTaxId);
    }
    if(m_AuthorizedPersonnelNameIsSet)
    {
        val[utility::conversions::to_string_t(U("authorizedPersonnelName"))] = ModelBase::toJson(m_AuthorizedPersonnelName);
    }
    if(m_AuthorizedPersonnelKycDocumentTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("authorizedPersonnelKycDocumentType"))] = ModelBase::toJson(m_AuthorizedPersonnelKycDocumentType);
    }
    if(m_RegistrationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("registrationId"))] = ModelBase::toJson(m_RegistrationId);
    }
    if(m_VatIdIsSet)
    {
        val[utility::conversions::to_string_t(U("vatId"))] = ModelBase::toJson(m_VatId);
    }
    if(m_TaxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("taxId"))] = ModelBase::toJson(m_TaxId);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_LogoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("logoUrl"))] = ModelBase::toJson(m_LogoUrl);
    }
    if(m_ContactEmailIsSet)
    {
        val[utility::conversions::to_string_t(U("contactEmail"))] = ModelBase::toJson(m_ContactEmail);
    }
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumber"))] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_CountryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("countryId"))] = ModelBase::toJson(m_CountryId);
    }
    if(m_StateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("stateId"))] = ModelBase::toJson(m_StateId);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_CompanyCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("companyCode"))] = ModelBase::toJson(m_CompanyCode);
    }
    if(m_PrivacyPolicyUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("privacyPolicyUrl"))] = ModelBase::toJson(m_PrivacyPolicyUrl);
    }
    if(m_TermsOfServiceUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("termsOfServiceUrl"))] = ModelBase::toJson(m_TermsOfServiceUrl);
    }
    if(m_WebsiteUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("websiteUrl"))] = ModelBase::toJson(m_WebsiteUrl);
    }
    if(m_HelpLineNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("helpLineNumber"))] = ModelBase::toJson(m_HelpLineNumber);
    }
    if(m_SupportEmailIsSet)
    {
        val[utility::conversions::to_string_t(U("supportEmail"))] = ModelBase::toJson(m_SupportEmail);
    }
    if(m_IsGovernmentOrganizationIsSet)
    {
        val[utility::conversions::to_string_t(U("isGovernmentOrganization"))] = ModelBase::toJson(m_IsGovernmentOrganization);
    }
    if(m_DlApiKeyIsSet)
    {
        val[utility::conversions::to_string_t(U("dlApiKey"))] = ModelBase::toJson(m_DlApiKey);
    }
    if(m_IsKyoCompletedIsSet)
    {
        val[utility::conversions::to_string_t(U("isKyoCompleted"))] = ModelBase::toJson(m_IsKyoCompleted);
    }
    if(m_IsEnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("isEnabled"))] = ModelBase::toJson(m_IsEnabled);
    }
    if(m_IsDataProviderIsSet)
    {
        val[utility::conversions::to_string_t(U("isDataProvider"))] = ModelBase::toJson(m_IsDataProvider);
    }
    if(m_IsDataConsumerIsSet)
    {
        val[utility::conversions::to_string_t(U("isDataConsumer"))] = ModelBase::toJson(m_IsDataConsumer);
    }
    if(m_SubmittedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("submittedAtUtc"))] = ModelBase::toJson(m_SubmittedAtUtc);
    }
    if(m_ApprovedByIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedBy"))] = ModelBase::toJson(m_ApprovedBy);
    }
    if(m_ApprovedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedAtUtc"))] = ModelBase::toJson(m_ApprovedAtUtc);
    }
    if(m_IsDigiLockerOrganizationIsSet)
    {
        val[utility::conversions::to_string_t(U("isDigiLockerOrganization"))] = ModelBase::toJson(m_IsDigiLockerOrganization);
    }
    if(m_IsMdmcMaintainedIsSet)
    {
        val[utility::conversions::to_string_t(U("isMdmcMaintained"))] = ModelBase::toJson(m_IsMdmcMaintained);
    }
    if(m_IsBbpsIsSet)
    {
        val[utility::conversions::to_string_t(U("isBbps"))] = ModelBase::toJson(m_IsBbps);
    }
    if(m_MetaDataIsSet)
    {
        val[utility::conversions::to_string_t(U("metaData"))] = ModelBase::toJson(m_MetaData);
    }
    if(m_CountryCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("countryCode"))] = ModelBase::toJson(m_CountryCode);
    }
    if(m_OrganizationTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationType"))] = ModelBase::toJson(m_OrganizationType);
    }
    if(m_OrganizationCategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationCategory"))] = ModelBase::toJson(m_OrganizationCategory);
    }
    if(m_DocumentProviderCategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("documentProviderCategory"))] = ModelBase::toJson(m_DocumentProviderCategory);
    }
    if(m_AddressesIsSet)
    {
        val[utility::conversions::to_string_t(U("addresses"))] = ModelBase::toJson(m_Addresses);
    }
    if(m_FinancialAccountsIsSet)
    {
        val[utility::conversions::to_string_t(U("financialAccounts"))] = ModelBase::toJson(m_FinancialAccounts);
    }
    if(m_CountryStateIsSet)
    {
        val[utility::conversions::to_string_t(U("countryState"))] = ModelBase::toJson(m_CountryState);
    }
    if(m_ApprovedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedByUser"))] = ModelBase::toJson(m_ApprovedByUser);
    }
    if(m_KyoDocumentsIsSet)
    {
        val[utility::conversions::to_string_t(U("kyoDocuments"))] = ModelBase::toJson(m_KyoDocuments);
    }
    if(m_IsDeleteIsSet)
    {
        val[utility::conversions::to_string_t(U("isDelete"))] = ModelBase::toJson(m_IsDelete);
    }
    if(m_RecoveryTokenIsSet)
    {
        val[utility::conversions::to_string_t(U("recoveryToken"))] = ModelBase::toJson(m_RecoveryToken);
    }

    return val;
}

bool Organization::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("createdBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_createdBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdBy);
            setCreatedBy(refVal_createdBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAtUtc);
            setCreatedAtUtc(refVal_createdAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_updatedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedBy);
            setUpdatedBy(refVal_updatedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAtUtc);
            setUpdatedAtUtc(refVal_updatedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_createdByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdByUser);
            setCreatedByUser(refVal_createdByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_updatedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedByUser);
            setUpdatedByUser(refVal_updatedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_deletedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedBy);
            setDeletedBy(refVal_deletedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_deletedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedAtUtc);
            setDeletedAtUtc(refVal_deletedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_deletedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedByUser);
            setDeletedByUser(refVal_deletedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataPartnerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataPartnerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dataPartnerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataPartnerId);
            setDataPartnerId(refVal_dataPartnerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("typeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("typeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeId);
            setRTypeId(refVal_typeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_categoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_categoryId);
            setCategoryId(refVal_categoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentProviderCategoryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentProviderCategoryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentProviderCategoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentProviderCategoryId);
            setDocumentProviderCategoryId(refVal_documentProviderCategoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("regulatorName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("regulatorName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_regulatorName;
            ok &= ModelBase::fromJson(fieldValue, refVal_regulatorName);
            setRegulatorName(refVal_regulatorName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("brandName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("brandName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_brandName;
            ok &= ModelBase::fromJson(fieldValue, refVal_brandName);
            setBrandName(refVal_brandName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("authorizedPersonnelTaxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("authorizedPersonnelTaxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_authorizedPersonnelTaxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_authorizedPersonnelTaxId);
            setAuthorizedPersonnelTaxId(refVal_authorizedPersonnelTaxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("authorizedPersonnelName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("authorizedPersonnelName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_authorizedPersonnelName;
            ok &= ModelBase::fromJson(fieldValue, refVal_authorizedPersonnelName);
            setAuthorizedPersonnelName(refVal_authorizedPersonnelName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("authorizedPersonnelKycDocumentType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("authorizedPersonnelKycDocumentType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AuthorizedPersonnelKycDocumentType> refVal_authorizedPersonnelKycDocumentType;
            ok &= ModelBase::fromJson(fieldValue, refVal_authorizedPersonnelKycDocumentType);
            setAuthorizedPersonnelKycDocumentType(refVal_authorizedPersonnelKycDocumentType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("registrationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("registrationId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_registrationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_registrationId);
            setRegistrationId(refVal_registrationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vatId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vatId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_vatId;
            ok &= ModelBase::fromJson(fieldValue, refVal_vatId);
            setVatId(refVal_vatId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("taxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("taxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_taxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_taxId);
            setTaxId(refVal_taxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_logoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_logoUrl);
            setLogoUrl(refVal_logoUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contactEmail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contactEmail")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_contactEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_contactEmail);
            setContactEmail(refVal_contactEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_phoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_phoneNumber);
            setPhoneNumber(refVal_phoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_countryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryId);
            setCountryId(refVal_countryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stateId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_stateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_stateId);
            setStateId(refVal_stateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrganizationStatus> refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("companyCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("companyCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyCode);
            setCompanyCode(refVal_companyCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("privacyPolicyUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("privacyPolicyUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_privacyPolicyUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_privacyPolicyUrl);
            setPrivacyPolicyUrl(refVal_privacyPolicyUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("termsOfServiceUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("termsOfServiceUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_termsOfServiceUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_termsOfServiceUrl);
            setTermsOfServiceUrl(refVal_termsOfServiceUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("websiteUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("websiteUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_websiteUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_websiteUrl);
            setWebsiteUrl(refVal_websiteUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("helpLineNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("helpLineNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_helpLineNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_helpLineNumber);
            setHelpLineNumber(refVal_helpLineNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportEmail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportEmail")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supportEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportEmail);
            setSupportEmail(refVal_supportEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isGovernmentOrganization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isGovernmentOrganization")));
        if(!fieldValue.is_null())
        {
            bool refVal_isGovernmentOrganization;
            ok &= ModelBase::fromJson(fieldValue, refVal_isGovernmentOrganization);
            setIsGovernmentOrganization(refVal_isGovernmentOrganization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dlApiKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dlApiKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dlApiKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_dlApiKey);
            setDlApiKey(refVal_dlApiKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isKyoCompleted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isKyoCompleted")));
        if(!fieldValue.is_null())
        {
            bool refVal_isKyoCompleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_isKyoCompleted);
            setIsKyoCompleted(refVal_isKyoCompleted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isEnabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isEnabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_isEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_isEnabled);
            setIsEnabled(refVal_isEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isDataProvider"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isDataProvider")));
        if(!fieldValue.is_null())
        {
            bool refVal_isDataProvider;
            ok &= ModelBase::fromJson(fieldValue, refVal_isDataProvider);
            setIsDataProvider(refVal_isDataProvider);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isDataConsumer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isDataConsumer")));
        if(!fieldValue.is_null())
        {
            bool refVal_isDataConsumer;
            ok &= ModelBase::fromJson(fieldValue, refVal_isDataConsumer);
            setIsDataConsumer(refVal_isDataConsumer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("submittedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("submittedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_submittedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_submittedAtUtc);
            setSubmittedAtUtc(refVal_submittedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_approvedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvedBy);
            setApprovedBy(refVal_approvedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_approvedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvedAtUtc);
            setApprovedAtUtc(refVal_approvedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isDigiLockerOrganization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isDigiLockerOrganization")));
        if(!fieldValue.is_null())
        {
            bool refVal_isDigiLockerOrganization;
            ok &= ModelBase::fromJson(fieldValue, refVal_isDigiLockerOrganization);
            setIsDigiLockerOrganization(refVal_isDigiLockerOrganization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isMdmcMaintained"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isMdmcMaintained")));
        if(!fieldValue.is_null())
        {
            bool refVal_isMdmcMaintained;
            ok &= ModelBase::fromJson(fieldValue, refVal_isMdmcMaintained);
            setIsMdmcMaintained(refVal_isMdmcMaintained);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isBbps"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isBbps")));
        if(!fieldValue.is_null())
        {
            bool refVal_isBbps;
            ok &= ModelBase::fromJson(fieldValue, refVal_isBbps);
            setIsBbps(refVal_isBbps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metaData"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metaData")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrganizationMetaData> refVal_metaData;
            ok &= ModelBase::fromJson(fieldValue, refVal_metaData);
            setMetaData(refVal_metaData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_countryCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryCode);
            setCountryCode(refVal_countryCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrganizationType> refVal_organizationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationType);
            setOrganizationType(refVal_organizationType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationCategory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationCategory")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrganizationCategory> refVal_organizationCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationCategory);
            setOrganizationCategory(refVal_organizationCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentProviderCategory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentProviderCategory")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentProviderCategory> refVal_documentProviderCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentProviderCategory);
            setDocumentProviderCategory(refVal_documentProviderCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addresses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addresses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrganizationAddress>> refVal_addresses;
            ok &= ModelBase::fromJson(fieldValue, refVal_addresses);
            setAddresses(refVal_addresses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("financialAccounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("financialAccounts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrganizationFinancialAccount>> refVal_financialAccounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_financialAccounts);
            setFinancialAccounts(refVal_financialAccounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryState"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryState")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> refVal_countryState;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryState);
            setCountryState(refVal_countryState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_approvedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvedByUser);
            setApprovedByUser(refVal_approvedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("kyoDocuments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("kyoDocuments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrganizationKyoDocument>> refVal_kyoDocuments;
            ok &= ModelBase::fromJson(fieldValue, refVal_kyoDocuments);
            setKyoDocuments(refVal_kyoDocuments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isDelete"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isDelete")));
        if(!fieldValue.is_null())
        {
            bool refVal_isDelete;
            ok &= ModelBase::fromJson(fieldValue, refVal_isDelete);
            setIsDelete(refVal_isDelete);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recoveryToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recoveryToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_recoveryToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_recoveryToken);
            setRecoveryToken(refVal_recoveryToken);
        }
    }
    return ok;
}

void Organization::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdBy")), m_CreatedBy));
    }
    if(m_CreatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAtUtc")), m_CreatedAtUtc));
    }
    if(m_UpdatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedBy")), m_UpdatedBy));
    }
    if(m_UpdatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAtUtc")), m_UpdatedAtUtc));
    }
    if(m_CreatedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdByUser")), m_CreatedByUser));
    }
    if(m_UpdatedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedByUser")), m_UpdatedByUser));
    }
    if(m_DeletedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedBy")), m_DeletedBy));
    }
    if(m_DeletedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedAtUtc")), m_DeletedAtUtc));
    }
    if(m_DeletedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedByUser")), m_DeletedByUser));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DataPartnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataPartnerId")), m_DataPartnerId));
    }
    if(m_r_typeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("typeId")), m_r_typeId));
    }
    if(m_CategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryId")), m_CategoryId));
    }
    if(m_DocumentProviderCategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentProviderCategoryId")), m_DocumentProviderCategoryId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_RegulatorNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("regulatorName")), m_RegulatorName));
    }
    if(m_BrandNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("brandName")), m_BrandName));
    }
    if(m_AuthorizedPersonnelTaxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("authorizedPersonnelTaxId")), m_AuthorizedPersonnelTaxId));
    }
    if(m_AuthorizedPersonnelNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("authorizedPersonnelName")), m_AuthorizedPersonnelName));
    }
    if(m_AuthorizedPersonnelKycDocumentTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("authorizedPersonnelKycDocumentType")), m_AuthorizedPersonnelKycDocumentType));
    }
    if(m_RegistrationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("registrationId")), m_RegistrationId));
    }
    if(m_VatIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vatId")), m_VatId));
    }
    if(m_TaxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("taxId")), m_TaxId));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_LogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logoUrl")), m_LogoUrl));
    }
    if(m_ContactEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contactEmail")), m_ContactEmail));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumber")), m_PhoneNumber));
    }
    if(m_CountryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryId")), m_CountryId));
    }
    if(m_StateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stateId")), m_StateId));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_CompanyCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("companyCode")), m_CompanyCode));
    }
    if(m_PrivacyPolicyUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("privacyPolicyUrl")), m_PrivacyPolicyUrl));
    }
    if(m_TermsOfServiceUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("termsOfServiceUrl")), m_TermsOfServiceUrl));
    }
    if(m_WebsiteUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("websiteUrl")), m_WebsiteUrl));
    }
    if(m_HelpLineNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("helpLineNumber")), m_HelpLineNumber));
    }
    if(m_SupportEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportEmail")), m_SupportEmail));
    }
    if(m_IsGovernmentOrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isGovernmentOrganization")), m_IsGovernmentOrganization));
    }
    if(m_DlApiKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dlApiKey")), m_DlApiKey));
    }
    if(m_IsKyoCompletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isKyoCompleted")), m_IsKyoCompleted));
    }
    if(m_IsEnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isEnabled")), m_IsEnabled));
    }
    if(m_IsDataProviderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isDataProvider")), m_IsDataProvider));
    }
    if(m_IsDataConsumerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isDataConsumer")), m_IsDataConsumer));
    }
    if(m_SubmittedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("submittedAtUtc")), m_SubmittedAtUtc));
    }
    if(m_ApprovedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedBy")), m_ApprovedBy));
    }
    if(m_ApprovedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedAtUtc")), m_ApprovedAtUtc));
    }
    if(m_IsDigiLockerOrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isDigiLockerOrganization")), m_IsDigiLockerOrganization));
    }
    if(m_IsMdmcMaintainedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isMdmcMaintained")), m_IsMdmcMaintained));
    }
    if(m_IsBbpsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isBbps")), m_IsBbps));
    }
    if(m_MetaDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metaData")), m_MetaData));
    }
    if(m_CountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryCode")), m_CountryCode));
    }
    if(m_OrganizationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationType")), m_OrganizationType));
    }
    if(m_OrganizationCategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationCategory")), m_OrganizationCategory));
    }
    if(m_DocumentProviderCategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentProviderCategory")), m_DocumentProviderCategory));
    }
    if(m_AddressesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addresses")), m_Addresses));
    }
    if(m_FinancialAccountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("financialAccounts")), m_FinancialAccounts));
    }
    if(m_CountryStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryState")), m_CountryState));
    }
    if(m_ApprovedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedByUser")), m_ApprovedByUser));
    }
    if(m_KyoDocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("kyoDocuments")), m_KyoDocuments));
    }
    if(m_IsDeleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isDelete")), m_IsDelete));
    }
    if(m_RecoveryTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recoveryToken")), m_RecoveryToken));
    }
}

bool Organization::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("createdBy"))))
    {
        utility::string_t refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdBy"))), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        utility::datetime refVal_createdAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAtUtc"))), refVal_createdAtUtc );
        setCreatedAtUtc(refVal_createdAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedBy"))))
    {
        utility::string_t refVal_updatedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedBy"))), refVal_updatedBy );
        setUpdatedBy(refVal_updatedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAtUtc"))))
    {
        utility::datetime refVal_updatedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAtUtc"))), refVal_updatedAtUtc );
        setUpdatedAtUtc(refVal_updatedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_createdByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdByUser"))), refVal_createdByUser );
        setCreatedByUser(refVal_createdByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_updatedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedByUser"))), refVal_updatedByUser );
        setUpdatedByUser(refVal_updatedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedBy"))))
    {
        utility::string_t refVal_deletedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedBy"))), refVal_deletedBy );
        setDeletedBy(refVal_deletedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedAtUtc"))))
    {
        utility::datetime refVal_deletedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedAtUtc"))), refVal_deletedAtUtc );
        setDeletedAtUtc(refVal_deletedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_deletedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedByUser"))), refVal_deletedByUser );
        setDeletedByUser(refVal_deletedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataPartnerId"))))
    {
        utility::string_t refVal_dataPartnerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataPartnerId"))), refVal_dataPartnerId );
        setDataPartnerId(refVal_dataPartnerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("typeId"))))
    {
        utility::string_t refVal_typeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("typeId"))), refVal_typeId );
        setRTypeId(refVal_typeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryId"))))
    {
        utility::string_t refVal_categoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryId"))), refVal_categoryId );
        setCategoryId(refVal_categoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentProviderCategoryId"))))
    {
        utility::string_t refVal_documentProviderCategoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentProviderCategoryId"))), refVal_documentProviderCategoryId );
        setDocumentProviderCategoryId(refVal_documentProviderCategoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("regulatorName"))))
    {
        utility::string_t refVal_regulatorName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("regulatorName"))), refVal_regulatorName );
        setRegulatorName(refVal_regulatorName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("brandName"))))
    {
        utility::string_t refVal_brandName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("brandName"))), refVal_brandName );
        setBrandName(refVal_brandName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("authorizedPersonnelTaxId"))))
    {
        utility::string_t refVal_authorizedPersonnelTaxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("authorizedPersonnelTaxId"))), refVal_authorizedPersonnelTaxId );
        setAuthorizedPersonnelTaxId(refVal_authorizedPersonnelTaxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("authorizedPersonnelName"))))
    {
        utility::string_t refVal_authorizedPersonnelName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("authorizedPersonnelName"))), refVal_authorizedPersonnelName );
        setAuthorizedPersonnelName(refVal_authorizedPersonnelName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("authorizedPersonnelKycDocumentType"))))
    {
        std::shared_ptr<AuthorizedPersonnelKycDocumentType> refVal_authorizedPersonnelKycDocumentType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("authorizedPersonnelKycDocumentType"))), refVal_authorizedPersonnelKycDocumentType );
        setAuthorizedPersonnelKycDocumentType(refVal_authorizedPersonnelKycDocumentType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("registrationId"))))
    {
        utility::string_t refVal_registrationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("registrationId"))), refVal_registrationId );
        setRegistrationId(refVal_registrationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vatId"))))
    {
        utility::string_t refVal_vatId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vatId"))), refVal_vatId );
        setVatId(refVal_vatId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("taxId"))))
    {
        utility::string_t refVal_taxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("taxId"))), refVal_taxId );
        setTaxId(refVal_taxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logoUrl"))))
    {
        utility::string_t refVal_logoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logoUrl"))), refVal_logoUrl );
        setLogoUrl(refVal_logoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contactEmail"))))
    {
        utility::string_t refVal_contactEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contactEmail"))), refVal_contactEmail );
        setContactEmail(refVal_contactEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        utility::string_t refVal_phoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumber"))), refVal_phoneNumber );
        setPhoneNumber(refVal_phoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryId"))))
    {
        utility::string_t refVal_countryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryId"))), refVal_countryId );
        setCountryId(refVal_countryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stateId"))))
    {
        utility::string_t refVal_stateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stateId"))), refVal_stateId );
        setStateId(refVal_stateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<OrganizationStatus> refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("companyCode"))))
    {
        utility::string_t refVal_companyCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("companyCode"))), refVal_companyCode );
        setCompanyCode(refVal_companyCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("privacyPolicyUrl"))))
    {
        utility::string_t refVal_privacyPolicyUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("privacyPolicyUrl"))), refVal_privacyPolicyUrl );
        setPrivacyPolicyUrl(refVal_privacyPolicyUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("termsOfServiceUrl"))))
    {
        utility::string_t refVal_termsOfServiceUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("termsOfServiceUrl"))), refVal_termsOfServiceUrl );
        setTermsOfServiceUrl(refVal_termsOfServiceUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("websiteUrl"))))
    {
        utility::string_t refVal_websiteUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("websiteUrl"))), refVal_websiteUrl );
        setWebsiteUrl(refVal_websiteUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("helpLineNumber"))))
    {
        utility::string_t refVal_helpLineNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("helpLineNumber"))), refVal_helpLineNumber );
        setHelpLineNumber(refVal_helpLineNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportEmail"))))
    {
        utility::string_t refVal_supportEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportEmail"))), refVal_supportEmail );
        setSupportEmail(refVal_supportEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isGovernmentOrganization"))))
    {
        bool refVal_isGovernmentOrganization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isGovernmentOrganization"))), refVal_isGovernmentOrganization );
        setIsGovernmentOrganization(refVal_isGovernmentOrganization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dlApiKey"))))
    {
        utility::string_t refVal_dlApiKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dlApiKey"))), refVal_dlApiKey );
        setDlApiKey(refVal_dlApiKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isKyoCompleted"))))
    {
        bool refVal_isKyoCompleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isKyoCompleted"))), refVal_isKyoCompleted );
        setIsKyoCompleted(refVal_isKyoCompleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isEnabled"))))
    {
        bool refVal_isEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isEnabled"))), refVal_isEnabled );
        setIsEnabled(refVal_isEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isDataProvider"))))
    {
        bool refVal_isDataProvider;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isDataProvider"))), refVal_isDataProvider );
        setIsDataProvider(refVal_isDataProvider);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isDataConsumer"))))
    {
        bool refVal_isDataConsumer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isDataConsumer"))), refVal_isDataConsumer );
        setIsDataConsumer(refVal_isDataConsumer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("submittedAtUtc"))))
    {
        utility::datetime refVal_submittedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("submittedAtUtc"))), refVal_submittedAtUtc );
        setSubmittedAtUtc(refVal_submittedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedBy"))))
    {
        utility::string_t refVal_approvedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedBy"))), refVal_approvedBy );
        setApprovedBy(refVal_approvedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        utility::datetime refVal_approvedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedAtUtc"))), refVal_approvedAtUtc );
        setApprovedAtUtc(refVal_approvedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isDigiLockerOrganization"))))
    {
        bool refVal_isDigiLockerOrganization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isDigiLockerOrganization"))), refVal_isDigiLockerOrganization );
        setIsDigiLockerOrganization(refVal_isDigiLockerOrganization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isMdmcMaintained"))))
    {
        bool refVal_isMdmcMaintained;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isMdmcMaintained"))), refVal_isMdmcMaintained );
        setIsMdmcMaintained(refVal_isMdmcMaintained);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isBbps"))))
    {
        bool refVal_isBbps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isBbps"))), refVal_isBbps );
        setIsBbps(refVal_isBbps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metaData"))))
    {
        std::shared_ptr<OrganizationMetaData> refVal_metaData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metaData"))), refVal_metaData );
        setMetaData(refVal_metaData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryCode"))))
    {
        utility::string_t refVal_countryCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryCode"))), refVal_countryCode );
        setCountryCode(refVal_countryCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationType"))))
    {
        std::shared_ptr<OrganizationType> refVal_organizationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationType"))), refVal_organizationType );
        setOrganizationType(refVal_organizationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationCategory"))))
    {
        std::shared_ptr<OrganizationCategory> refVal_organizationCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationCategory"))), refVal_organizationCategory );
        setOrganizationCategory(refVal_organizationCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentProviderCategory"))))
    {
        std::shared_ptr<DocumentProviderCategory> refVal_documentProviderCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentProviderCategory"))), refVal_documentProviderCategory );
        setDocumentProviderCategory(refVal_documentProviderCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addresses"))))
    {
        std::vector<std::shared_ptr<OrganizationAddress>> refVal_addresses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addresses"))), refVal_addresses );
        setAddresses(refVal_addresses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("financialAccounts"))))
    {
        std::vector<std::shared_ptr<OrganizationFinancialAccount>> refVal_financialAccounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("financialAccounts"))), refVal_financialAccounts );
        setFinancialAccounts(refVal_financialAccounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryState"))))
    {
        std::shared_ptr<Country> refVal_countryState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryState"))), refVal_countryState );
        setCountryState(refVal_countryState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_approvedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedByUser"))), refVal_approvedByUser );
        setApprovedByUser(refVal_approvedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("kyoDocuments"))))
    {
        std::vector<std::shared_ptr<OrganizationKyoDocument>> refVal_kyoDocuments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("kyoDocuments"))), refVal_kyoDocuments );
        setKyoDocuments(refVal_kyoDocuments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isDelete"))))
    {
        bool refVal_isDelete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isDelete"))), refVal_isDelete );
        setIsDelete(refVal_isDelete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recoveryToken"))))
    {
        utility::string_t refVal_recoveryToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recoveryToken"))), refVal_recoveryToken );
        setRecoveryToken(refVal_recoveryToken);
    }
    return ok;
}

utility::string_t Organization::getCreatedBy() const
{
    return m_CreatedBy;
}

void Organization::setCreatedBy(const utility::string_t& value)
{
    m_CreatedBy = value;
    m_CreatedByIsSet = true;
}

bool Organization::createdByIsSet() const
{
    return m_CreatedByIsSet;
}

void Organization::unsetCreatedBy()
{
    m_CreatedByIsSet = false;
}
utility::datetime Organization::getCreatedAtUtc() const
{
    return m_CreatedAtUtc;
}

void Organization::setCreatedAtUtc(const utility::datetime& value)
{
    m_CreatedAtUtc = value;
    m_CreatedAtUtcIsSet = true;
}

bool Organization::createdAtUtcIsSet() const
{
    return m_CreatedAtUtcIsSet;
}

void Organization::unsetCreatedAtUtc()
{
    m_CreatedAtUtcIsSet = false;
}
utility::string_t Organization::getUpdatedBy() const
{
    return m_UpdatedBy;
}

void Organization::setUpdatedBy(const utility::string_t& value)
{
    m_UpdatedBy = value;
    m_UpdatedByIsSet = true;
}

bool Organization::updatedByIsSet() const
{
    return m_UpdatedByIsSet;
}

void Organization::unsetUpdatedBy()
{
    m_UpdatedByIsSet = false;
}
utility::datetime Organization::getUpdatedAtUtc() const
{
    return m_UpdatedAtUtc;
}

void Organization::setUpdatedAtUtc(const utility::datetime& value)
{
    m_UpdatedAtUtc = value;
    m_UpdatedAtUtcIsSet = true;
}

bool Organization::updatedAtUtcIsSet() const
{
    return m_UpdatedAtUtcIsSet;
}

void Organization::unsetUpdatedAtUtc()
{
    m_UpdatedAtUtcIsSet = false;
}
std::shared_ptr<ApplicationUser> Organization::getCreatedByUser() const
{
    return m_CreatedByUser;
}

void Organization::setCreatedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_CreatedByUser = value;
    m_CreatedByUserIsSet = true;
}

bool Organization::createdByUserIsSet() const
{
    return m_CreatedByUserIsSet;
}

void Organization::unsetCreatedByUser()
{
    m_CreatedByUserIsSet = false;
}
std::shared_ptr<ApplicationUser> Organization::getUpdatedByUser() const
{
    return m_UpdatedByUser;
}

void Organization::setUpdatedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_UpdatedByUser = value;
    m_UpdatedByUserIsSet = true;
}

bool Organization::updatedByUserIsSet() const
{
    return m_UpdatedByUserIsSet;
}

void Organization::unsetUpdatedByUser()
{
    m_UpdatedByUserIsSet = false;
}
utility::string_t Organization::getDeletedBy() const
{
    return m_DeletedBy;
}

void Organization::setDeletedBy(const utility::string_t& value)
{
    m_DeletedBy = value;
    m_DeletedByIsSet = true;
}

bool Organization::deletedByIsSet() const
{
    return m_DeletedByIsSet;
}

void Organization::unsetDeletedBy()
{
    m_DeletedByIsSet = false;
}
utility::datetime Organization::getDeletedAtUtc() const
{
    return m_DeletedAtUtc;
}

void Organization::setDeletedAtUtc(const utility::datetime& value)
{
    m_DeletedAtUtc = value;
    m_DeletedAtUtcIsSet = true;
}

bool Organization::deletedAtUtcIsSet() const
{
    return m_DeletedAtUtcIsSet;
}

void Organization::unsetDeletedAtUtc()
{
    m_DeletedAtUtcIsSet = false;
}
std::shared_ptr<ApplicationUser> Organization::getDeletedByUser() const
{
    return m_DeletedByUser;
}

void Organization::setDeletedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_DeletedByUser = value;
    m_DeletedByUserIsSet = true;
}

bool Organization::deletedByUserIsSet() const
{
    return m_DeletedByUserIsSet;
}

void Organization::unsetDeletedByUser()
{
    m_DeletedByUserIsSet = false;
}
utility::string_t Organization::getId() const
{
    return m_Id;
}

void Organization::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Organization::idIsSet() const
{
    return m_IdIsSet;
}

void Organization::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Organization::getDataPartnerId() const
{
    return m_DataPartnerId;
}

void Organization::setDataPartnerId(const utility::string_t& value)
{
    m_DataPartnerId = value;
    m_DataPartnerIdIsSet = true;
}

bool Organization::dataPartnerIdIsSet() const
{
    return m_DataPartnerIdIsSet;
}

void Organization::unsetDataPartnerId()
{
    m_DataPartnerIdIsSet = false;
}
utility::string_t Organization::getRTypeId() const
{
    return m_r_typeId;
}

void Organization::setRTypeId(const utility::string_t& value)
{
    m_r_typeId = value;
    m_r_typeIdIsSet = true;
}

bool Organization::rTypeIdIsSet() const
{
    return m_r_typeIdIsSet;
}

void Organization::unsetr_typeId()
{
    m_r_typeIdIsSet = false;
}
utility::string_t Organization::getCategoryId() const
{
    return m_CategoryId;
}

void Organization::setCategoryId(const utility::string_t& value)
{
    m_CategoryId = value;
    m_CategoryIdIsSet = true;
}

bool Organization::categoryIdIsSet() const
{
    return m_CategoryIdIsSet;
}

void Organization::unsetCategoryId()
{
    m_CategoryIdIsSet = false;
}
utility::string_t Organization::getDocumentProviderCategoryId() const
{
    return m_DocumentProviderCategoryId;
}

void Organization::setDocumentProviderCategoryId(const utility::string_t& value)
{
    m_DocumentProviderCategoryId = value;
    m_DocumentProviderCategoryIdIsSet = true;
}

bool Organization::documentProviderCategoryIdIsSet() const
{
    return m_DocumentProviderCategoryIdIsSet;
}

void Organization::unsetDocumentProviderCategoryId()
{
    m_DocumentProviderCategoryIdIsSet = false;
}
utility::string_t Organization::getName() const
{
    return m_Name;
}

void Organization::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Organization::nameIsSet() const
{
    return m_NameIsSet;
}

void Organization::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Organization::getRegulatorName() const
{
    return m_RegulatorName;
}

void Organization::setRegulatorName(const utility::string_t& value)
{
    m_RegulatorName = value;
    m_RegulatorNameIsSet = true;
}

bool Organization::regulatorNameIsSet() const
{
    return m_RegulatorNameIsSet;
}

void Organization::unsetRegulatorName()
{
    m_RegulatorNameIsSet = false;
}
utility::string_t Organization::getBrandName() const
{
    return m_BrandName;
}

void Organization::setBrandName(const utility::string_t& value)
{
    m_BrandName = value;
    m_BrandNameIsSet = true;
}

bool Organization::brandNameIsSet() const
{
    return m_BrandNameIsSet;
}

void Organization::unsetBrandName()
{
    m_BrandNameIsSet = false;
}
utility::string_t Organization::getAuthorizedPersonnelTaxId() const
{
    return m_AuthorizedPersonnelTaxId;
}

void Organization::setAuthorizedPersonnelTaxId(const utility::string_t& value)
{
    m_AuthorizedPersonnelTaxId = value;
    m_AuthorizedPersonnelTaxIdIsSet = true;
}

bool Organization::authorizedPersonnelTaxIdIsSet() const
{
    return m_AuthorizedPersonnelTaxIdIsSet;
}

void Organization::unsetAuthorizedPersonnelTaxId()
{
    m_AuthorizedPersonnelTaxIdIsSet = false;
}
utility::string_t Organization::getAuthorizedPersonnelName() const
{
    return m_AuthorizedPersonnelName;
}

void Organization::setAuthorizedPersonnelName(const utility::string_t& value)
{
    m_AuthorizedPersonnelName = value;
    m_AuthorizedPersonnelNameIsSet = true;
}

bool Organization::authorizedPersonnelNameIsSet() const
{
    return m_AuthorizedPersonnelNameIsSet;
}

void Organization::unsetAuthorizedPersonnelName()
{
    m_AuthorizedPersonnelNameIsSet = false;
}
std::shared_ptr<AuthorizedPersonnelKycDocumentType> Organization::getAuthorizedPersonnelKycDocumentType() const
{
    return m_AuthorizedPersonnelKycDocumentType;
}

void Organization::setAuthorizedPersonnelKycDocumentType(const std::shared_ptr<AuthorizedPersonnelKycDocumentType>& value)
{
    m_AuthorizedPersonnelKycDocumentType = value;
    m_AuthorizedPersonnelKycDocumentTypeIsSet = true;
}

bool Organization::authorizedPersonnelKycDocumentTypeIsSet() const
{
    return m_AuthorizedPersonnelKycDocumentTypeIsSet;
}

void Organization::unsetAuthorizedPersonnelKycDocumentType()
{
    m_AuthorizedPersonnelKycDocumentTypeIsSet = false;
}
utility::string_t Organization::getRegistrationId() const
{
    return m_RegistrationId;
}

void Organization::setRegistrationId(const utility::string_t& value)
{
    m_RegistrationId = value;
    m_RegistrationIdIsSet = true;
}

bool Organization::registrationIdIsSet() const
{
    return m_RegistrationIdIsSet;
}

void Organization::unsetRegistrationId()
{
    m_RegistrationIdIsSet = false;
}
utility::string_t Organization::getVatId() const
{
    return m_VatId;
}

void Organization::setVatId(const utility::string_t& value)
{
    m_VatId = value;
    m_VatIdIsSet = true;
}

bool Organization::vatIdIsSet() const
{
    return m_VatIdIsSet;
}

void Organization::unsetVatId()
{
    m_VatIdIsSet = false;
}
utility::string_t Organization::getTaxId() const
{
    return m_TaxId;
}

void Organization::setTaxId(const utility::string_t& value)
{
    m_TaxId = value;
    m_TaxIdIsSet = true;
}

bool Organization::taxIdIsSet() const
{
    return m_TaxIdIsSet;
}

void Organization::unsetTaxId()
{
    m_TaxIdIsSet = false;
}
utility::string_t Organization::getDescription() const
{
    return m_Description;
}

void Organization::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Organization::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Organization::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Organization::getLogoUrl() const
{
    return m_LogoUrl;
}

void Organization::setLogoUrl(const utility::string_t& value)
{
    m_LogoUrl = value;
    m_LogoUrlIsSet = true;
}

bool Organization::logoUrlIsSet() const
{
    return m_LogoUrlIsSet;
}

void Organization::unsetLogoUrl()
{
    m_LogoUrlIsSet = false;
}
utility::string_t Organization::getContactEmail() const
{
    return m_ContactEmail;
}

void Organization::setContactEmail(const utility::string_t& value)
{
    m_ContactEmail = value;
    m_ContactEmailIsSet = true;
}

bool Organization::contactEmailIsSet() const
{
    return m_ContactEmailIsSet;
}

void Organization::unsetContactEmail()
{
    m_ContactEmailIsSet = false;
}
utility::string_t Organization::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void Organization::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool Organization::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void Organization::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
utility::string_t Organization::getCountryId() const
{
    return m_CountryId;
}

void Organization::setCountryId(const utility::string_t& value)
{
    m_CountryId = value;
    m_CountryIdIsSet = true;
}

bool Organization::countryIdIsSet() const
{
    return m_CountryIdIsSet;
}

void Organization::unsetCountryId()
{
    m_CountryIdIsSet = false;
}
utility::string_t Organization::getStateId() const
{
    return m_StateId;
}

void Organization::setStateId(const utility::string_t& value)
{
    m_StateId = value;
    m_StateIdIsSet = true;
}

bool Organization::stateIdIsSet() const
{
    return m_StateIdIsSet;
}

void Organization::unsetStateId()
{
    m_StateIdIsSet = false;
}
std::shared_ptr<OrganizationStatus> Organization::getStatus() const
{
    return m_Status;
}

void Organization::setStatus(const std::shared_ptr<OrganizationStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Organization::statusIsSet() const
{
    return m_StatusIsSet;
}

void Organization::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Organization::getCompanyCode() const
{
    return m_CompanyCode;
}

void Organization::setCompanyCode(const utility::string_t& value)
{
    m_CompanyCode = value;
    m_CompanyCodeIsSet = true;
}

bool Organization::companyCodeIsSet() const
{
    return m_CompanyCodeIsSet;
}

void Organization::unsetCompanyCode()
{
    m_CompanyCodeIsSet = false;
}
utility::string_t Organization::getPrivacyPolicyUrl() const
{
    return m_PrivacyPolicyUrl;
}

void Organization::setPrivacyPolicyUrl(const utility::string_t& value)
{
    m_PrivacyPolicyUrl = value;
    m_PrivacyPolicyUrlIsSet = true;
}

bool Organization::privacyPolicyUrlIsSet() const
{
    return m_PrivacyPolicyUrlIsSet;
}

void Organization::unsetPrivacyPolicyUrl()
{
    m_PrivacyPolicyUrlIsSet = false;
}
utility::string_t Organization::getTermsOfServiceUrl() const
{
    return m_TermsOfServiceUrl;
}

void Organization::setTermsOfServiceUrl(const utility::string_t& value)
{
    m_TermsOfServiceUrl = value;
    m_TermsOfServiceUrlIsSet = true;
}

bool Organization::termsOfServiceUrlIsSet() const
{
    return m_TermsOfServiceUrlIsSet;
}

void Organization::unsetTermsOfServiceUrl()
{
    m_TermsOfServiceUrlIsSet = false;
}
utility::string_t Organization::getWebsiteUrl() const
{
    return m_WebsiteUrl;
}

void Organization::setWebsiteUrl(const utility::string_t& value)
{
    m_WebsiteUrl = value;
    m_WebsiteUrlIsSet = true;
}

bool Organization::websiteUrlIsSet() const
{
    return m_WebsiteUrlIsSet;
}

void Organization::unsetWebsiteUrl()
{
    m_WebsiteUrlIsSet = false;
}
utility::string_t Organization::getHelpLineNumber() const
{
    return m_HelpLineNumber;
}

void Organization::setHelpLineNumber(const utility::string_t& value)
{
    m_HelpLineNumber = value;
    m_HelpLineNumberIsSet = true;
}

bool Organization::helpLineNumberIsSet() const
{
    return m_HelpLineNumberIsSet;
}

void Organization::unsetHelpLineNumber()
{
    m_HelpLineNumberIsSet = false;
}
utility::string_t Organization::getSupportEmail() const
{
    return m_SupportEmail;
}

void Organization::setSupportEmail(const utility::string_t& value)
{
    m_SupportEmail = value;
    m_SupportEmailIsSet = true;
}

bool Organization::supportEmailIsSet() const
{
    return m_SupportEmailIsSet;
}

void Organization::unsetSupportEmail()
{
    m_SupportEmailIsSet = false;
}
bool Organization::isIsGovernmentOrganization() const
{
    return m_IsGovernmentOrganization;
}

void Organization::setIsGovernmentOrganization(bool value)
{
    m_IsGovernmentOrganization = value;
    m_IsGovernmentOrganizationIsSet = true;
}

bool Organization::isGovernmentOrganizationIsSet() const
{
    return m_IsGovernmentOrganizationIsSet;
}

void Organization::unsetIsGovernmentOrganization()
{
    m_IsGovernmentOrganizationIsSet = false;
}
utility::string_t Organization::getDlApiKey() const
{
    return m_DlApiKey;
}

void Organization::setDlApiKey(const utility::string_t& value)
{
    m_DlApiKey = value;
    m_DlApiKeyIsSet = true;
}

bool Organization::dlApiKeyIsSet() const
{
    return m_DlApiKeyIsSet;
}

void Organization::unsetDlApiKey()
{
    m_DlApiKeyIsSet = false;
}
bool Organization::isIsKyoCompleted() const
{
    return m_IsKyoCompleted;
}

void Organization::setIsKyoCompleted(bool value)
{
    m_IsKyoCompleted = value;
    m_IsKyoCompletedIsSet = true;
}

bool Organization::isKyoCompletedIsSet() const
{
    return m_IsKyoCompletedIsSet;
}

void Organization::unsetIsKyoCompleted()
{
    m_IsKyoCompletedIsSet = false;
}
bool Organization::isIsEnabled() const
{
    return m_IsEnabled;
}

void Organization::setIsEnabled(bool value)
{
    m_IsEnabled = value;
    m_IsEnabledIsSet = true;
}

bool Organization::isEnabledIsSet() const
{
    return m_IsEnabledIsSet;
}

void Organization::unsetIsEnabled()
{
    m_IsEnabledIsSet = false;
}
bool Organization::isIsDataProvider() const
{
    return m_IsDataProvider;
}

void Organization::setIsDataProvider(bool value)
{
    m_IsDataProvider = value;
    m_IsDataProviderIsSet = true;
}

bool Organization::isDataProviderIsSet() const
{
    return m_IsDataProviderIsSet;
}

void Organization::unsetIsDataProvider()
{
    m_IsDataProviderIsSet = false;
}
bool Organization::isIsDataConsumer() const
{
    return m_IsDataConsumer;
}

void Organization::setIsDataConsumer(bool value)
{
    m_IsDataConsumer = value;
    m_IsDataConsumerIsSet = true;
}

bool Organization::isDataConsumerIsSet() const
{
    return m_IsDataConsumerIsSet;
}

void Organization::unsetIsDataConsumer()
{
    m_IsDataConsumerIsSet = false;
}
utility::datetime Organization::getSubmittedAtUtc() const
{
    return m_SubmittedAtUtc;
}

void Organization::setSubmittedAtUtc(const utility::datetime& value)
{
    m_SubmittedAtUtc = value;
    m_SubmittedAtUtcIsSet = true;
}

bool Organization::submittedAtUtcIsSet() const
{
    return m_SubmittedAtUtcIsSet;
}

void Organization::unsetSubmittedAtUtc()
{
    m_SubmittedAtUtcIsSet = false;
}
utility::string_t Organization::getApprovedBy() const
{
    return m_ApprovedBy;
}

void Organization::setApprovedBy(const utility::string_t& value)
{
    m_ApprovedBy = value;
    m_ApprovedByIsSet = true;
}

bool Organization::approvedByIsSet() const
{
    return m_ApprovedByIsSet;
}

void Organization::unsetApprovedBy()
{
    m_ApprovedByIsSet = false;
}
utility::datetime Organization::getApprovedAtUtc() const
{
    return m_ApprovedAtUtc;
}

void Organization::setApprovedAtUtc(const utility::datetime& value)
{
    m_ApprovedAtUtc = value;
    m_ApprovedAtUtcIsSet = true;
}

bool Organization::approvedAtUtcIsSet() const
{
    return m_ApprovedAtUtcIsSet;
}

void Organization::unsetApprovedAtUtc()
{
    m_ApprovedAtUtcIsSet = false;
}
bool Organization::isIsDigiLockerOrganization() const
{
    return m_IsDigiLockerOrganization;
}

void Organization::setIsDigiLockerOrganization(bool value)
{
    m_IsDigiLockerOrganization = value;
    m_IsDigiLockerOrganizationIsSet = true;
}

bool Organization::isDigiLockerOrganizationIsSet() const
{
    return m_IsDigiLockerOrganizationIsSet;
}

void Organization::unsetIsDigiLockerOrganization()
{
    m_IsDigiLockerOrganizationIsSet = false;
}
bool Organization::isIsMdmcMaintained() const
{
    return m_IsMdmcMaintained;
}

void Organization::setIsMdmcMaintained(bool value)
{
    m_IsMdmcMaintained = value;
    m_IsMdmcMaintainedIsSet = true;
}

bool Organization::isMdmcMaintainedIsSet() const
{
    return m_IsMdmcMaintainedIsSet;
}

void Organization::unsetIsMdmcMaintained()
{
    m_IsMdmcMaintainedIsSet = false;
}
bool Organization::isIsBbps() const
{
    return m_IsBbps;
}

void Organization::setIsBbps(bool value)
{
    m_IsBbps = value;
    m_IsBbpsIsSet = true;
}

bool Organization::isBbpsIsSet() const
{
    return m_IsBbpsIsSet;
}

void Organization::unsetIsBbps()
{
    m_IsBbpsIsSet = false;
}
std::shared_ptr<OrganizationMetaData> Organization::getMetaData() const
{
    return m_MetaData;
}

void Organization::setMetaData(const std::shared_ptr<OrganizationMetaData>& value)
{
    m_MetaData = value;
    m_MetaDataIsSet = true;
}

bool Organization::metaDataIsSet() const
{
    return m_MetaDataIsSet;
}

void Organization::unsetMetaData()
{
    m_MetaDataIsSet = false;
}
utility::string_t Organization::getCountryCode() const
{
    return m_CountryCode;
}

void Organization::setCountryCode(const utility::string_t& value)
{
    m_CountryCode = value;
    m_CountryCodeIsSet = true;
}

bool Organization::countryCodeIsSet() const
{
    return m_CountryCodeIsSet;
}

void Organization::unsetCountryCode()
{
    m_CountryCodeIsSet = false;
}
std::shared_ptr<OrganizationType> Organization::getOrganizationType() const
{
    return m_OrganizationType;
}

void Organization::setOrganizationType(const std::shared_ptr<OrganizationType>& value)
{
    m_OrganizationType = value;
    m_OrganizationTypeIsSet = true;
}

bool Organization::organizationTypeIsSet() const
{
    return m_OrganizationTypeIsSet;
}

void Organization::unsetOrganizationType()
{
    m_OrganizationTypeIsSet = false;
}
std::shared_ptr<OrganizationCategory> Organization::getOrganizationCategory() const
{
    return m_OrganizationCategory;
}

void Organization::setOrganizationCategory(const std::shared_ptr<OrganizationCategory>& value)
{
    m_OrganizationCategory = value;
    m_OrganizationCategoryIsSet = true;
}

bool Organization::organizationCategoryIsSet() const
{
    return m_OrganizationCategoryIsSet;
}

void Organization::unsetOrganizationCategory()
{
    m_OrganizationCategoryIsSet = false;
}
std::shared_ptr<DocumentProviderCategory> Organization::getDocumentProviderCategory() const
{
    return m_DocumentProviderCategory;
}

void Organization::setDocumentProviderCategory(const std::shared_ptr<DocumentProviderCategory>& value)
{
    m_DocumentProviderCategory = value;
    m_DocumentProviderCategoryIsSet = true;
}

bool Organization::documentProviderCategoryIsSet() const
{
    return m_DocumentProviderCategoryIsSet;
}

void Organization::unsetDocumentProviderCategory()
{
    m_DocumentProviderCategoryIsSet = false;
}
std::vector<std::shared_ptr<OrganizationAddress>>& Organization::getAddresses()
{
    return m_Addresses;
}

void Organization::setAddresses(const std::vector<std::shared_ptr<OrganizationAddress>>& value)
{
    m_Addresses = value;
    m_AddressesIsSet = true;
}

bool Organization::addressesIsSet() const
{
    return m_AddressesIsSet;
}

void Organization::unsetAddresses()
{
    m_AddressesIsSet = false;
}
std::vector<std::shared_ptr<OrganizationFinancialAccount>>& Organization::getFinancialAccounts()
{
    return m_FinancialAccounts;
}

void Organization::setFinancialAccounts(const std::vector<std::shared_ptr<OrganizationFinancialAccount>>& value)
{
    m_FinancialAccounts = value;
    m_FinancialAccountsIsSet = true;
}

bool Organization::financialAccountsIsSet() const
{
    return m_FinancialAccountsIsSet;
}

void Organization::unsetFinancialAccounts()
{
    m_FinancialAccountsIsSet = false;
}
std::shared_ptr<Country> Organization::getCountryState() const
{
    return m_CountryState;
}

void Organization::setCountryState(const std::shared_ptr<Country>& value)
{
    m_CountryState = value;
    m_CountryStateIsSet = true;
}

bool Organization::countryStateIsSet() const
{
    return m_CountryStateIsSet;
}

void Organization::unsetCountryState()
{
    m_CountryStateIsSet = false;
}
std::shared_ptr<ApplicationUser> Organization::getApprovedByUser() const
{
    return m_ApprovedByUser;
}

void Organization::setApprovedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_ApprovedByUser = value;
    m_ApprovedByUserIsSet = true;
}

bool Organization::approvedByUserIsSet() const
{
    return m_ApprovedByUserIsSet;
}

void Organization::unsetApprovedByUser()
{
    m_ApprovedByUserIsSet = false;
}
std::vector<std::shared_ptr<OrganizationKyoDocument>>& Organization::getKyoDocuments()
{
    return m_KyoDocuments;
}

void Organization::setKyoDocuments(const std::vector<std::shared_ptr<OrganizationKyoDocument>>& value)
{
    m_KyoDocuments = value;
    m_KyoDocumentsIsSet = true;
}

bool Organization::kyoDocumentsIsSet() const
{
    return m_KyoDocumentsIsSet;
}

void Organization::unsetKyoDocuments()
{
    m_KyoDocumentsIsSet = false;
}
bool Organization::isIsDelete() const
{
    return m_IsDelete;
}

void Organization::setIsDelete(bool value)
{
    m_IsDelete = value;
    m_IsDeleteIsSet = true;
}

bool Organization::isDeleteIsSet() const
{
    return m_IsDeleteIsSet;
}

void Organization::unsetIsDelete()
{
    m_IsDeleteIsSet = false;
}
utility::string_t Organization::getRecoveryToken() const
{
    return m_RecoveryToken;
}

void Organization::setRecoveryToken(const utility::string_t& value)
{
    m_RecoveryToken = value;
    m_RecoveryTokenIsSet = true;
}

bool Organization::recoveryTokenIsSet() const
{
    return m_RecoveryTokenIsSet;
}

void Organization::unsetRecoveryToken()
{
    m_RecoveryTokenIsSet = false;
}
}
}


