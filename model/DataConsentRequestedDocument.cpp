/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsentRequestedDocument.h"

namespace mydatamyconsent {
namespace models {




DataConsentRequestedDocument::DataConsentRequestedDocument()
{
    m_CustomKey = utility::conversions::to_string_t("");
    m_CustomKeyIsSet = false;
    m_Drn = utility::conversions::to_string_t("");
    m_DrnIsSet = false;
    m_DocumentTypeId = utility::conversions::to_string_t("");
    m_DocumentTypeIdIsSet = false;
    m_DocumentIdentifier = utility::conversions::to_string_t("");
    m_DocumentIdentifierIsSet = false;
}

DataConsentRequestedDocument::~DataConsentRequestedDocument()
{
}

void DataConsentRequestedDocument::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentRequestedDocument::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CustomKeyIsSet)
    {
        val[utility::conversions::to_string_t(U("customKey"))] = ModelBase::toJson(m_CustomKey);
    }
    if(m_DrnIsSet)
    {
        val[utility::conversions::to_string_t(U("drn"))] = ModelBase::toJson(m_Drn);
    }
    if(m_DocumentTypeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("documentTypeId"))] = ModelBase::toJson(m_DocumentTypeId);
    }
    if(m_DocumentIdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("documentIdentifier"))] = ModelBase::toJson(m_DocumentIdentifier);
    }

    return val;
}

bool DataConsentRequestedDocument::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("customKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_customKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_customKey);
            setCustomKey(refVal_customKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("drn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("drn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_drn;
            ok &= ModelBase::fromJson(fieldValue, refVal_drn);
            setDrn(refVal_drn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentTypeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentTypeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentTypeId);
            setDocumentTypeId(refVal_documentTypeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentIdentifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentIdentifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentIdentifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentIdentifier);
            setDocumentIdentifier(refVal_documentIdentifier);
        }
    }
    return ok;
}

void DataConsentRequestedDocument::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CustomKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customKey")), m_CustomKey));
    }
    if(m_DrnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("drn")), m_Drn));
    }
    if(m_DocumentTypeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentTypeId")), m_DocumentTypeId));
    }
    if(m_DocumentIdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentIdentifier")), m_DocumentIdentifier));
    }
}

bool DataConsentRequestedDocument::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("customKey"))))
    {
        utility::string_t refVal_customKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customKey"))), refVal_customKey );
        setCustomKey(refVal_customKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("drn"))))
    {
        utility::string_t refVal_drn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("drn"))), refVal_drn );
        setDrn(refVal_drn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentTypeId"))))
    {
        utility::string_t refVal_documentTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentTypeId"))), refVal_documentTypeId );
        setDocumentTypeId(refVal_documentTypeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentIdentifier"))))
    {
        utility::string_t refVal_documentIdentifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentIdentifier"))), refVal_documentIdentifier );
        setDocumentIdentifier(refVal_documentIdentifier);
    }
    return ok;
}

utility::string_t DataConsentRequestedDocument::getCustomKey() const
{
    return m_CustomKey;
}

void DataConsentRequestedDocument::setCustomKey(const utility::string_t& value)
{
    m_CustomKey = value;
    m_CustomKeyIsSet = true;
}

bool DataConsentRequestedDocument::customKeyIsSet() const
{
    return m_CustomKeyIsSet;
}

void DataConsentRequestedDocument::unsetCustomKey()
{
    m_CustomKeyIsSet = false;
}
utility::string_t DataConsentRequestedDocument::getDrn() const
{
    return m_Drn;
}

void DataConsentRequestedDocument::setDrn(const utility::string_t& value)
{
    m_Drn = value;
    m_DrnIsSet = true;
}

bool DataConsentRequestedDocument::drnIsSet() const
{
    return m_DrnIsSet;
}

void DataConsentRequestedDocument::unsetDrn()
{
    m_DrnIsSet = false;
}
utility::string_t DataConsentRequestedDocument::getDocumentTypeId() const
{
    return m_DocumentTypeId;
}

void DataConsentRequestedDocument::setDocumentTypeId(const utility::string_t& value)
{
    m_DocumentTypeId = value;
    m_DocumentTypeIdIsSet = true;
}

bool DataConsentRequestedDocument::documentTypeIdIsSet() const
{
    return m_DocumentTypeIdIsSet;
}

void DataConsentRequestedDocument::unsetDocumentTypeId()
{
    m_DocumentTypeIdIsSet = false;
}
utility::string_t DataConsentRequestedDocument::getDocumentIdentifier() const
{
    return m_DocumentIdentifier;
}

void DataConsentRequestedDocument::setDocumentIdentifier(const utility::string_t& value)
{
    m_DocumentIdentifier = value;
    m_DocumentIdentifierIsSet = true;
}

bool DataConsentRequestedDocument::documentIdentifierIsSet() const
{
    return m_DocumentIdentifierIsSet;
}

void DataConsentRequestedDocument::unsetDocumentIdentifier()
{
    m_DocumentIdentifierIsSet = false;
}
}
}


