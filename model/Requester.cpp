/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Requester.h"

namespace mydatamyconsent {
namespace models {




Requester::Requester()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_LogoUrl = utility::conversions::to_string_t("");
    m_LogoUrlIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
    m_WebsiteUrl = utility::conversions::to_string_t("");
    m_WebsiteUrlIsSet = false;
    m_SupportEmail = utility::conversions::to_string_t("");
    m_SupportEmailIsSet = false;
    m_HelpLineNumber = utility::conversions::to_string_t("");
    m_HelpLineNumberIsSet = false;
}

Requester::~Requester()
{
}

void Requester::validate()
{
    // TODO: implement validation
}

web::json::value Requester::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_LogoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("logoUrl"))] = ModelBase::toJson(m_LogoUrl);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t(U("location"))] = ModelBase::toJson(m_Location);
    }
    if(m_WebsiteUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("websiteUrl"))] = ModelBase::toJson(m_WebsiteUrl);
    }
    if(m_SupportEmailIsSet)
    {
        val[utility::conversions::to_string_t(U("supportEmail"))] = ModelBase::toJson(m_SupportEmail);
    }
    if(m_HelpLineNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("helpLineNumber"))] = ModelBase::toJson(m_HelpLineNumber);
    }

    return val;
}

bool Requester::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_logoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_logoUrl);
            setLogoUrl(refVal_logoUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("location"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("location")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_location;
            ok &= ModelBase::fromJson(fieldValue, refVal_location);
            setLocation(refVal_location);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("websiteUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("websiteUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_websiteUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_websiteUrl);
            setWebsiteUrl(refVal_websiteUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportEmail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportEmail")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supportEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportEmail);
            setSupportEmail(refVal_supportEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("helpLineNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("helpLineNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_helpLineNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_helpLineNumber);
            setHelpLineNumber(refVal_helpLineNumber);
        }
    }
    return ok;
}

void Requester::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_LogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logoUrl")), m_LogoUrl));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("location")), m_Location));
    }
    if(m_WebsiteUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("websiteUrl")), m_WebsiteUrl));
    }
    if(m_SupportEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportEmail")), m_SupportEmail));
    }
    if(m_HelpLineNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("helpLineNumber")), m_HelpLineNumber));
    }
}

bool Requester::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logoUrl"))))
    {
        utility::string_t refVal_logoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logoUrl"))), refVal_logoUrl );
        setLogoUrl(refVal_logoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("location"))))
    {
        utility::string_t refVal_location;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("location"))), refVal_location );
        setLocation(refVal_location);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("websiteUrl"))))
    {
        utility::string_t refVal_websiteUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("websiteUrl"))), refVal_websiteUrl );
        setWebsiteUrl(refVal_websiteUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportEmail"))))
    {
        utility::string_t refVal_supportEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportEmail"))), refVal_supportEmail );
        setSupportEmail(refVal_supportEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("helpLineNumber"))))
    {
        utility::string_t refVal_helpLineNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("helpLineNumber"))), refVal_helpLineNumber );
        setHelpLineNumber(refVal_helpLineNumber);
    }
    return ok;
}

utility::string_t Requester::getId() const
{
    return m_Id;
}

void Requester::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Requester::idIsSet() const
{
    return m_IdIsSet;
}

void Requester::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Requester::getName() const
{
    return m_Name;
}

void Requester::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Requester::nameIsSet() const
{
    return m_NameIsSet;
}

void Requester::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Requester::getLogoUrl() const
{
    return m_LogoUrl;
}

void Requester::setLogoUrl(const utility::string_t& value)
{
    m_LogoUrl = value;
    m_LogoUrlIsSet = true;
}

bool Requester::logoUrlIsSet() const
{
    return m_LogoUrlIsSet;
}

void Requester::unsetLogoUrl()
{
    m_LogoUrlIsSet = false;
}
utility::string_t Requester::getDescription() const
{
    return m_Description;
}

void Requester::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Requester::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Requester::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Requester::getLocation() const
{
    return m_Location;
}

void Requester::setLocation(const utility::string_t& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool Requester::locationIsSet() const
{
    return m_LocationIsSet;
}

void Requester::unsetLocation()
{
    m_LocationIsSet = false;
}
utility::string_t Requester::getWebsiteUrl() const
{
    return m_WebsiteUrl;
}

void Requester::setWebsiteUrl(const utility::string_t& value)
{
    m_WebsiteUrl = value;
    m_WebsiteUrlIsSet = true;
}

bool Requester::websiteUrlIsSet() const
{
    return m_WebsiteUrlIsSet;
}

void Requester::unsetWebsiteUrl()
{
    m_WebsiteUrlIsSet = false;
}
utility::string_t Requester::getSupportEmail() const
{
    return m_SupportEmail;
}

void Requester::setSupportEmail(const utility::string_t& value)
{
    m_SupportEmail = value;
    m_SupportEmailIsSet = true;
}

bool Requester::supportEmailIsSet() const
{
    return m_SupportEmailIsSet;
}

void Requester::unsetSupportEmail()
{
    m_SupportEmailIsSet = false;
}
utility::string_t Requester::getHelpLineNumber() const
{
    return m_HelpLineNumber;
}

void Requester::setHelpLineNumber(const utility::string_t& value)
{
    m_HelpLineNumber = value;
    m_HelpLineNumberIsSet = true;
}

bool Requester::helpLineNumberIsSet() const
{
    return m_HelpLineNumberIsSet;
}

void Requester::unsetHelpLineNumber()
{
    m_HelpLineNumberIsSet = false;
}
}
}


