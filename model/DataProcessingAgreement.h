/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataProcessingAgreement.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_DataProcessingAgreement_H_
#define MYDATAMYCONSENT_MODELS_DataProcessingAgreement_H_


#include "ModelBase.h"

#include "model/ApplicationUser.h"
#include <cpprest/details/basic_types.h>
#include "model/Organization.h"

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  DataProcessingAgreement
    : public ModelBase
{
public:
    DataProcessingAgreement();
    virtual ~DataProcessingAgreement();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DataProcessingAgreement members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreatedBy() const;
    bool createdByIsSet() const;
    void unsetCreatedBy();

    void setCreatedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAtUtc() const;
    bool createdAtUtcIsSet() const;
    void unsetCreatedAtUtc();

    void setCreatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUpdatedBy() const;
    bool updatedByIsSet() const;
    void unsetUpdatedBy();

    void setUpdatedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getUpdatedAtUtc() const;
    bool updatedAtUtcIsSet() const;
    void unsetUpdatedAtUtc();

    void setUpdatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getCreatedByUser() const;
    bool createdByUserIsSet() const;
    void unsetCreatedByUser();

    void setCreatedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getUpdatedByUser() const;
    bool updatedByUserIsSet() const;
    void unsetUpdatedByUser();

    void setUpdatedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeletedBy() const;
    bool deletedByIsSet() const;
    void unsetDeletedBy();

    void setDeletedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDeletedAtUtc() const;
    bool deletedAtUtcIsSet() const;
    void unsetDeletedAtUtc();

    void setDeletedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getDeletedByUser() const;
    bool deletedByUserIsSet() const;
    void unsetDeletedByUser();

    void setDeletedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrganizationId() const;
    bool organizationIdIsSet() const;
    void unsetOrganizationId();

    void setOrganizationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBody() const;
    bool bodyIsSet() const;
    void unsetBody();

    void setBody(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAttachmentUrl() const;
    bool attachmentUrlIsSet() const;
    void unsetAttachmentUrl();

    void setAttachmentUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Organization> getOrganization() const;
    bool organizationIsSet() const;
    void unsetOrganization();

    void setOrganization(const std::shared_ptr<Organization>& value);


protected:
    utility::string_t m_CreatedBy;
    bool m_CreatedByIsSet;
    utility::datetime m_CreatedAtUtc;
    bool m_CreatedAtUtcIsSet;
    utility::string_t m_UpdatedBy;
    bool m_UpdatedByIsSet;
    utility::datetime m_UpdatedAtUtc;
    bool m_UpdatedAtUtcIsSet;
    std::shared_ptr<ApplicationUser> m_CreatedByUser;
    bool m_CreatedByUserIsSet;
    std::shared_ptr<ApplicationUser> m_UpdatedByUser;
    bool m_UpdatedByUserIsSet;
    utility::string_t m_DeletedBy;
    bool m_DeletedByIsSet;
    utility::datetime m_DeletedAtUtc;
    bool m_DeletedAtUtcIsSet;
    std::shared_ptr<ApplicationUser> m_DeletedByUser;
    bool m_DeletedByUserIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_OrganizationId;
    bool m_OrganizationIdIsSet;
    utility::string_t m_Version;
    bool m_VersionIsSet;
    utility::string_t m_Body;
    bool m_BodyIsSet;
    utility::string_t m_AttachmentUrl;
    bool m_AttachmentUrlIsSet;
    std::shared_ptr<Organization> m_Organization;
    bool m_OrganizationIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DataProcessingAgreement_H_ */
