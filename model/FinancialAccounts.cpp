/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FinancialAccounts.h"

namespace mydatamyconsent {
namespace models {




FinancialAccounts::FinancialAccounts()
{
    m_Drn = utility::conversions::to_string_t("");
    m_DrnIsSet = false;
    m_Required_detailsIsSet = false;
    m_Start_date = utility::datetime();
    m_Start_dateIsSet = false;
    m_End_date = utility::datetime();
    m_End_dateIsSet = false;
}

FinancialAccounts::~FinancialAccounts()
{
}

void FinancialAccounts::validate()
{
    // TODO: implement validation
}

web::json::value FinancialAccounts::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DrnIsSet)
    {
        val[utility::conversions::to_string_t(U("drn"))] = ModelBase::toJson(m_Drn);
    }
    if(m_Required_detailsIsSet)
    {
        val[utility::conversions::to_string_t(U("required_details"))] = ModelBase::toJson(m_Required_details);
    }
    if(m_Start_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("start_date"))] = ModelBase::toJson(m_Start_date);
    }
    if(m_End_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("end_date"))] = ModelBase::toJson(m_End_date);
    }

    return val;
}

bool FinancialAccounts::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("drn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("drn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_drn;
            ok &= ModelBase::fromJson(fieldValue, refVal_drn);
            setDrn(refVal_drn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required_details"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required_details")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FinancialAccountDetailsRequired>> refVal_required_details;
            ok &= ModelBase::fromJson(fieldValue, refVal_required_details);
            setRequiredDetails(refVal_required_details);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_start_date;
            ok &= ModelBase::fromJson(fieldValue, refVal_start_date);
            setStartDate(refVal_start_date);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_end_date;
            ok &= ModelBase::fromJson(fieldValue, refVal_end_date);
            setEndDate(refVal_end_date);
        }
    }
    return ok;
}

void FinancialAccounts::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DrnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("drn")), m_Drn));
    }
    if(m_Required_detailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required_details")), m_Required_details));
    }
    if(m_Start_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_date")), m_Start_date));
    }
    if(m_End_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_date")), m_End_date));
    }
}

bool FinancialAccounts::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("drn"))))
    {
        utility::string_t refVal_drn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("drn"))), refVal_drn );
        setDrn(refVal_drn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required_details"))))
    {
        std::vector<std::shared_ptr<FinancialAccountDetailsRequired>> refVal_required_details;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required_details"))), refVal_required_details );
        setRequiredDetails(refVal_required_details);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start_date"))))
    {
        utility::datetime refVal_start_date;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_date"))), refVal_start_date );
        setStartDate(refVal_start_date);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_date"))))
    {
        utility::datetime refVal_end_date;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_date"))), refVal_end_date );
        setEndDate(refVal_end_date);
    }
    return ok;
}

utility::string_t FinancialAccounts::getDrn() const
{
    return m_Drn;
}

void FinancialAccounts::setDrn(const utility::string_t& value)
{
    m_Drn = value;
    m_DrnIsSet = true;
}

bool FinancialAccounts::drnIsSet() const
{
    return m_DrnIsSet;
}

void FinancialAccounts::unsetDrn()
{
    m_DrnIsSet = false;
}
std::vector<std::shared_ptr<FinancialAccountDetailsRequired>>& FinancialAccounts::getRequiredDetails()
{
    return m_Required_details;
}

void FinancialAccounts::setRequiredDetails(const std::vector<std::shared_ptr<FinancialAccountDetailsRequired>>& value)
{
    m_Required_details = value;
    m_Required_detailsIsSet = true;
}

bool FinancialAccounts::requiredDetailsIsSet() const
{
    return m_Required_detailsIsSet;
}

void FinancialAccounts::unsetRequired_details()
{
    m_Required_detailsIsSet = false;
}
utility::datetime FinancialAccounts::getStartDate() const
{
    return m_Start_date;
}

void FinancialAccounts::setStartDate(const utility::datetime& value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}

bool FinancialAccounts::startDateIsSet() const
{
    return m_Start_dateIsSet;
}

void FinancialAccounts::unsetStart_date()
{
    m_Start_dateIsSet = false;
}
utility::datetime FinancialAccounts::getEndDate() const
{
    return m_End_date;
}

void FinancialAccounts::setEndDate(const utility::datetime& value)
{
    m_End_date = value;
    m_End_dateIsSet = true;
}

bool FinancialAccounts::endDateIsSet() const
{
    return m_End_dateIsSet;
}

void FinancialAccounts::unsetEnd_date()
{
    m_End_dateIsSet = false;
}
}
}


