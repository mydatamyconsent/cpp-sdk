/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsentDocumentDetailsDto.h"

namespace mydatamyconsent {
namespace models {




DataConsentDocumentDetailsDto::DataConsentDocumentDetailsDto()
{
    m_FieldTitle = utility::conversions::to_string_t("");
    m_FieldTitleIsSet = false;
    m_FieldSlug = utility::conversions::to_string_t("");
    m_FieldSlugIsSet = false;
    m_SupportedDocumentTypeCategoryDetailsIsSet = false;
    m_RequirementIsSet = false;
}

DataConsentDocumentDetailsDto::~DataConsentDocumentDetailsDto()
{
}

void DataConsentDocumentDetailsDto::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentDocumentDetailsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FieldTitleIsSet)
    {
        val[utility::conversions::to_string_t(U("fieldTitle"))] = ModelBase::toJson(m_FieldTitle);
    }
    if(m_FieldSlugIsSet)
    {
        val[utility::conversions::to_string_t(U("fieldSlug"))] = ModelBase::toJson(m_FieldSlug);
    }
    if(m_SupportedDocumentTypeCategoryDetailsIsSet)
    {
        val[utility::conversions::to_string_t(U("supportedDocumentTypeCategoryDetails"))] = ModelBase::toJson(m_SupportedDocumentTypeCategoryDetails);
    }
    if(m_RequirementIsSet)
    {
        val[utility::conversions::to_string_t(U("requirement"))] = ModelBase::toJson(m_Requirement);
    }

    return val;
}

bool DataConsentDocumentDetailsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fieldTitle"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fieldTitle")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fieldTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_fieldTitle);
            setFieldTitle(refVal_fieldTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fieldSlug"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fieldSlug")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fieldSlug;
            ok &= ModelBase::fromJson(fieldValue, refVal_fieldSlug);
            setFieldSlug(refVal_fieldSlug);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportedDocumentTypeCategoryDetails"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportedDocumentTypeCategoryDetails")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SupportedDocumentTypeCategoryDetailsDto>> refVal_supportedDocumentTypeCategoryDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportedDocumentTypeCategoryDetails);
            setSupportedDocumentTypeCategoryDetails(refVal_supportedDocumentTypeCategoryDetails);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requirement"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requirement")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentsRequired> refVal_requirement;
            ok &= ModelBase::fromJson(fieldValue, refVal_requirement);
            setRequirement(refVal_requirement);
        }
    }
    return ok;
}

void DataConsentDocumentDetailsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FieldTitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fieldTitle")), m_FieldTitle));
    }
    if(m_FieldSlugIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fieldSlug")), m_FieldSlug));
    }
    if(m_SupportedDocumentTypeCategoryDetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportedDocumentTypeCategoryDetails")), m_SupportedDocumentTypeCategoryDetails));
    }
    if(m_RequirementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requirement")), m_Requirement));
    }
}

bool DataConsentDocumentDetailsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fieldTitle"))))
    {
        utility::string_t refVal_fieldTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fieldTitle"))), refVal_fieldTitle );
        setFieldTitle(refVal_fieldTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fieldSlug"))))
    {
        utility::string_t refVal_fieldSlug;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fieldSlug"))), refVal_fieldSlug );
        setFieldSlug(refVal_fieldSlug);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportedDocumentTypeCategoryDetails"))))
    {
        std::vector<std::shared_ptr<SupportedDocumentTypeCategoryDetailsDto>> refVal_supportedDocumentTypeCategoryDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportedDocumentTypeCategoryDetails"))), refVal_supportedDocumentTypeCategoryDetails );
        setSupportedDocumentTypeCategoryDetails(refVal_supportedDocumentTypeCategoryDetails);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requirement"))))
    {
        std::shared_ptr<DocumentsRequired> refVal_requirement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requirement"))), refVal_requirement );
        setRequirement(refVal_requirement);
    }
    return ok;
}

utility::string_t DataConsentDocumentDetailsDto::getFieldTitle() const
{
    return m_FieldTitle;
}

void DataConsentDocumentDetailsDto::setFieldTitle(const utility::string_t& value)
{
    m_FieldTitle = value;
    m_FieldTitleIsSet = true;
}

bool DataConsentDocumentDetailsDto::fieldTitleIsSet() const
{
    return m_FieldTitleIsSet;
}

void DataConsentDocumentDetailsDto::unsetFieldTitle()
{
    m_FieldTitleIsSet = false;
}
utility::string_t DataConsentDocumentDetailsDto::getFieldSlug() const
{
    return m_FieldSlug;
}

void DataConsentDocumentDetailsDto::setFieldSlug(const utility::string_t& value)
{
    m_FieldSlug = value;
    m_FieldSlugIsSet = true;
}

bool DataConsentDocumentDetailsDto::fieldSlugIsSet() const
{
    return m_FieldSlugIsSet;
}

void DataConsentDocumentDetailsDto::unsetFieldSlug()
{
    m_FieldSlugIsSet = false;
}
std::vector<std::shared_ptr<SupportedDocumentTypeCategoryDetailsDto>>& DataConsentDocumentDetailsDto::getSupportedDocumentTypeCategoryDetails()
{
    return m_SupportedDocumentTypeCategoryDetails;
}

void DataConsentDocumentDetailsDto::setSupportedDocumentTypeCategoryDetails(const std::vector<std::shared_ptr<SupportedDocumentTypeCategoryDetailsDto>>& value)
{
    m_SupportedDocumentTypeCategoryDetails = value;
    m_SupportedDocumentTypeCategoryDetailsIsSet = true;
}

bool DataConsentDocumentDetailsDto::supportedDocumentTypeCategoryDetailsIsSet() const
{
    return m_SupportedDocumentTypeCategoryDetailsIsSet;
}

void DataConsentDocumentDetailsDto::unsetSupportedDocumentTypeCategoryDetails()
{
    m_SupportedDocumentTypeCategoryDetailsIsSet = false;
}
std::shared_ptr<DocumentsRequired> DataConsentDocumentDetailsDto::getRequirement() const
{
    return m_Requirement;
}

void DataConsentDocumentDetailsDto::setRequirement(const std::shared_ptr<DocumentsRequired>& value)
{
    m_Requirement = value;
    m_RequirementIsSet = true;
}

bool DataConsentDocumentDetailsDto::requirementIsSet() const
{
    return m_RequirementIsSet;
}

void DataConsentDocumentDetailsDto::unsetRequirement()
{
    m_RequirementIsSet = false;
}
}
}


