/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrganizationDataConsentInfoDto.h"

namespace mydatamyconsent {
namespace models {




OrganizationDataConsentInfoDto::OrganizationDataConsentInfoDto()
{
    m_ConsentRequestId = utility::conversions::to_string_t("");
    m_ConsentRequestIdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_ConsentTemplateId = utility::conversions::to_string_t("");
    m_ConsentTemplateIdIsSet = false;
    m_ConsentPurpose = utility::conversions::to_string_t("");
    m_ConsentPurposeIsSet = false;
    m_ConsentDescription = utility::conversions::to_string_t("");
    m_ConsentDescriptionIsSet = false;
    m_StatusIsSet = false;
    m_CreatedAtUtc = utility::datetime();
    m_CreatedAtUtcIsSet = false;
    m_OrganizationId = utility::conversions::to_string_t("");
    m_OrganizationIdIsSet = false;
    m_ConsentSentToOrganization = utility::conversions::to_string_t("");
    m_ConsentSentToOrganizationIsSet = false;
}

OrganizationDataConsentInfoDto::~OrganizationDataConsentInfoDto()
{
}

void OrganizationDataConsentInfoDto::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationDataConsentInfoDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConsentRequestIdIsSet)
    {
        val[utility::conversions::to_string_t(U("consentRequestId"))] = ModelBase::toJson(m_ConsentRequestId);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_ConsentTemplateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("consentTemplateId"))] = ModelBase::toJson(m_ConsentTemplateId);
    }
    if(m_ConsentPurposeIsSet)
    {
        val[utility::conversions::to_string_t(U("consentPurpose"))] = ModelBase::toJson(m_ConsentPurpose);
    }
    if(m_ConsentDescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("consentDescription"))] = ModelBase::toJson(m_ConsentDescription);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_CreatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAtUtc"))] = ModelBase::toJson(m_CreatedAtUtc);
    }
    if(m_OrganizationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationId"))] = ModelBase::toJson(m_OrganizationId);
    }
    if(m_ConsentSentToOrganizationIsSet)
    {
        val[utility::conversions::to_string_t(U("consentSentToOrganization"))] = ModelBase::toJson(m_ConsentSentToOrganization);
    }

    return val;
}

bool OrganizationDataConsentInfoDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("consentRequestId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consentRequestId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_consentRequestId;
            ok &= ModelBase::fromJson(fieldValue, refVal_consentRequestId);
            setConsentRequestId(refVal_consentRequestId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consentTemplateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consentTemplateId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_consentTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_consentTemplateId);
            setConsentTemplateId(refVal_consentTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consentPurpose"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consentPurpose")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_consentPurpose;
            ok &= ModelBase::fromJson(fieldValue, refVal_consentPurpose);
            setConsentPurpose(refVal_consentPurpose);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consentDescription"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consentDescription")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_consentDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_consentDescription);
            setConsentDescription(refVal_consentDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataConsentStatus> refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAtUtc);
            setCreatedAtUtc(refVal_createdAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organizationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationId);
            setOrganizationId(refVal_organizationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consentSentToOrganization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consentSentToOrganization")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_consentSentToOrganization;
            ok &= ModelBase::fromJson(fieldValue, refVal_consentSentToOrganization);
            setConsentSentToOrganization(refVal_consentSentToOrganization);
        }
    }
    return ok;
}

void OrganizationDataConsentInfoDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ConsentRequestIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consentRequestId")), m_ConsentRequestId));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_ConsentTemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consentTemplateId")), m_ConsentTemplateId));
    }
    if(m_ConsentPurposeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consentPurpose")), m_ConsentPurpose));
    }
    if(m_ConsentDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consentDescription")), m_ConsentDescription));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_CreatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAtUtc")), m_CreatedAtUtc));
    }
    if(m_OrganizationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationId")), m_OrganizationId));
    }
    if(m_ConsentSentToOrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consentSentToOrganization")), m_ConsentSentToOrganization));
    }
}

bool OrganizationDataConsentInfoDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("consentRequestId"))))
    {
        utility::string_t refVal_consentRequestId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consentRequestId"))), refVal_consentRequestId );
        setConsentRequestId(refVal_consentRequestId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consentTemplateId"))))
    {
        utility::string_t refVal_consentTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consentTemplateId"))), refVal_consentTemplateId );
        setConsentTemplateId(refVal_consentTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consentPurpose"))))
    {
        utility::string_t refVal_consentPurpose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consentPurpose"))), refVal_consentPurpose );
        setConsentPurpose(refVal_consentPurpose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consentDescription"))))
    {
        utility::string_t refVal_consentDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consentDescription"))), refVal_consentDescription );
        setConsentDescription(refVal_consentDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<DataConsentStatus> refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        utility::datetime refVal_createdAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAtUtc"))), refVal_createdAtUtc );
        setCreatedAtUtc(refVal_createdAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationId"))))
    {
        utility::string_t refVal_organizationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationId"))), refVal_organizationId );
        setOrganizationId(refVal_organizationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consentSentToOrganization"))))
    {
        utility::string_t refVal_consentSentToOrganization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consentSentToOrganization"))), refVal_consentSentToOrganization );
        setConsentSentToOrganization(refVal_consentSentToOrganization);
    }
    return ok;
}

utility::string_t OrganizationDataConsentInfoDto::getConsentRequestId() const
{
    return m_ConsentRequestId;
}

void OrganizationDataConsentInfoDto::setConsentRequestId(const utility::string_t& value)
{
    m_ConsentRequestId = value;
    m_ConsentRequestIdIsSet = true;
}

bool OrganizationDataConsentInfoDto::consentRequestIdIsSet() const
{
    return m_ConsentRequestIdIsSet;
}

void OrganizationDataConsentInfoDto::unsetConsentRequestId()
{
    m_ConsentRequestIdIsSet = false;
}
utility::string_t OrganizationDataConsentInfoDto::getUserId() const
{
    return m_UserId;
}

void OrganizationDataConsentInfoDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool OrganizationDataConsentInfoDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void OrganizationDataConsentInfoDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t OrganizationDataConsentInfoDto::getConsentTemplateId() const
{
    return m_ConsentTemplateId;
}

void OrganizationDataConsentInfoDto::setConsentTemplateId(const utility::string_t& value)
{
    m_ConsentTemplateId = value;
    m_ConsentTemplateIdIsSet = true;
}

bool OrganizationDataConsentInfoDto::consentTemplateIdIsSet() const
{
    return m_ConsentTemplateIdIsSet;
}

void OrganizationDataConsentInfoDto::unsetConsentTemplateId()
{
    m_ConsentTemplateIdIsSet = false;
}
utility::string_t OrganizationDataConsentInfoDto::getConsentPurpose() const
{
    return m_ConsentPurpose;
}

void OrganizationDataConsentInfoDto::setConsentPurpose(const utility::string_t& value)
{
    m_ConsentPurpose = value;
    m_ConsentPurposeIsSet = true;
}

bool OrganizationDataConsentInfoDto::consentPurposeIsSet() const
{
    return m_ConsentPurposeIsSet;
}

void OrganizationDataConsentInfoDto::unsetConsentPurpose()
{
    m_ConsentPurposeIsSet = false;
}
utility::string_t OrganizationDataConsentInfoDto::getConsentDescription() const
{
    return m_ConsentDescription;
}

void OrganizationDataConsentInfoDto::setConsentDescription(const utility::string_t& value)
{
    m_ConsentDescription = value;
    m_ConsentDescriptionIsSet = true;
}

bool OrganizationDataConsentInfoDto::consentDescriptionIsSet() const
{
    return m_ConsentDescriptionIsSet;
}

void OrganizationDataConsentInfoDto::unsetConsentDescription()
{
    m_ConsentDescriptionIsSet = false;
}
std::shared_ptr<DataConsentStatus> OrganizationDataConsentInfoDto::getStatus() const
{
    return m_Status;
}

void OrganizationDataConsentInfoDto::setStatus(const std::shared_ptr<DataConsentStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool OrganizationDataConsentInfoDto::statusIsSet() const
{
    return m_StatusIsSet;
}

void OrganizationDataConsentInfoDto::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::datetime OrganizationDataConsentInfoDto::getCreatedAtUtc() const
{
    return m_CreatedAtUtc;
}

void OrganizationDataConsentInfoDto::setCreatedAtUtc(const utility::datetime& value)
{
    m_CreatedAtUtc = value;
    m_CreatedAtUtcIsSet = true;
}

bool OrganizationDataConsentInfoDto::createdAtUtcIsSet() const
{
    return m_CreatedAtUtcIsSet;
}

void OrganizationDataConsentInfoDto::unsetCreatedAtUtc()
{
    m_CreatedAtUtcIsSet = false;
}
utility::string_t OrganizationDataConsentInfoDto::getOrganizationId() const
{
    return m_OrganizationId;
}

void OrganizationDataConsentInfoDto::setOrganizationId(const utility::string_t& value)
{
    m_OrganizationId = value;
    m_OrganizationIdIsSet = true;
}

bool OrganizationDataConsentInfoDto::organizationIdIsSet() const
{
    return m_OrganizationIdIsSet;
}

void OrganizationDataConsentInfoDto::unsetOrganizationId()
{
    m_OrganizationIdIsSet = false;
}
utility::string_t OrganizationDataConsentInfoDto::getConsentSentToOrganization() const
{
    return m_ConsentSentToOrganization;
}

void OrganizationDataConsentInfoDto::setConsentSentToOrganization(const utility::string_t& value)
{
    m_ConsentSentToOrganization = value;
    m_ConsentSentToOrganizationIsSet = true;
}

bool OrganizationDataConsentInfoDto::consentSentToOrganizationIsSet() const
{
    return m_ConsentSentToOrganizationIsSet;
}

void OrganizationDataConsentInfoDto::unsetConsentSentToOrganization()
{
    m_ConsentSentToOrganizationIsSet = false;
}
}
}


