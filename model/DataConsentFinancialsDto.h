/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataConsentFinancialsDto.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_DataConsentFinancialsDto_H_
#define MYDATAMYCONSENT_MODELS_DataConsentFinancialsDto_H_


#include "ModelBase.h"

#include "model/DataConsentRequestedFinancialAccount.h"
#include "model/Financial.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  DataConsentFinancialsDto
    : public ModelBase
{
public:
    DataConsentFinancialsDto();
    virtual ~DataConsentFinancialsDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DataConsentFinancialsDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Financial>>& getFinancials();
    bool financialsIsSet() const;
    void unsetFinancials();

    void setFinancials(const std::vector<std::shared_ptr<Financial>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>>& getApprovedFinancials();
    bool approvedFinancialsIsSet() const;
    void unsetApprovedFinancials();

    void setApprovedFinancials(const std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    std::vector<std::shared_ptr<Financial>> m_Financials;
    bool m_FinancialsIsSet;
    std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>> m_ApprovedFinancials;
    bool m_ApprovedFinancialsIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DataConsentFinancialsDto_H_ */
