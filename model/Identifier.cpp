/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Identifier.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

Identifier::eIdentifier toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("Email")))
        return Identifier::eIdentifier::Identifier_EMAIL;
    if (val == utility::conversions::to_string_t(U("PermanentAccountNumber")))
        return Identifier::eIdentifier::Identifier_PERMANENTACCOUNTNUMBER;
    if (val == utility::conversions::to_string_t(U("AadhaarNumber")))
        return Identifier::eIdentifier::Identifier_AADHAARNUMBER;
    if (val == utility::conversions::to_string_t(U("MobileNumber")))
        return Identifier::eIdentifier::Identifier_MOBILENUMBER;
    if (val == utility::conversions::to_string_t(U("CorporateIdentificationNumber")))
        return Identifier::eIdentifier::Identifier_CORPORATEIDENTIFICATIONNUMBER;
    if (val == utility::conversions::to_string_t(U("TaxDeductionAccountNumber")))
        return Identifier::eIdentifier::Identifier_TAXDEDUCTIONACCOUNTNUMBER;
    if (val == utility::conversions::to_string_t(U("GoodsAndServicesTaxIdentificationNumber")))
        return Identifier::eIdentifier::Identifier_GOODSANDSERVICESTAXIDENTIFICATIONNUMBER;
    return {};
}

EnumUnderlyingType fromEnum(Identifier::eIdentifier e)
{
    switch (e)
    {
    case Identifier::eIdentifier::Identifier_EMAIL:
        return U("Email");
    case Identifier::eIdentifier::Identifier_PERMANENTACCOUNTNUMBER:
        return U("PermanentAccountNumber");
    case Identifier::eIdentifier::Identifier_AADHAARNUMBER:
        return U("AadhaarNumber");
    case Identifier::eIdentifier::Identifier_MOBILENUMBER:
        return U("MobileNumber");
    case Identifier::eIdentifier::Identifier_CORPORATEIDENTIFICATIONNUMBER:
        return U("CorporateIdentificationNumber");
    case Identifier::eIdentifier::Identifier_TAXDEDUCTIONACCOUNTNUMBER:
        return U("TaxDeductionAccountNumber");
    case Identifier::eIdentifier::Identifier_GOODSANDSERVICESTAXIDENTIFICATIONNUMBER:
        return U("GoodsAndServicesTaxIdentificationNumber");
    default:
        break;
    }
    return {};
}
}

Identifier::Identifier()
{
}

Identifier::~Identifier()
{
}

void Identifier::validate()
{
    // TODO: implement validation
}

web::json::value Identifier::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool Identifier::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void Identifier::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool Identifier::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

Identifier::eIdentifier Identifier::getValue() const
{
   return m_value;
}

void Identifier::setValue(Identifier::eIdentifier const value)
{
   m_value = value;
}


}
}


