/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ProofDocumentType.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

ProofDocumentType::eProofDocumentType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("LeaseAgreement")))
        return ProofDocumentType::eProofDocumentType::ProofDocumentType_LEASEAGREEMENT;
    if (val == utility::conversions::to_string_t(U("CertificateOfRegistration")))
        return ProofDocumentType::eProofDocumentType::ProofDocumentType_CERTIFICATEOFREGISTRATION;
    if (val == utility::conversions::to_string_t(U("RecentElectricityBill")))
        return ProofDocumentType::eProofDocumentType::ProofDocumentType_RECENTELECTRICITYBILL;
    if (val == utility::conversions::to_string_t(U("RecentWaterBill")))
        return ProofDocumentType::eProofDocumentType::ProofDocumentType_RECENTWATERBILL;
    return {};
}

EnumUnderlyingType fromEnum(ProofDocumentType::eProofDocumentType e)
{
    switch (e)
    {
    case ProofDocumentType::eProofDocumentType::ProofDocumentType_LEASEAGREEMENT:
        return U("LeaseAgreement");
    case ProofDocumentType::eProofDocumentType::ProofDocumentType_CERTIFICATEOFREGISTRATION:
        return U("CertificateOfRegistration");
    case ProofDocumentType::eProofDocumentType::ProofDocumentType_RECENTELECTRICITYBILL:
        return U("RecentElectricityBill");
    case ProofDocumentType::eProofDocumentType::ProofDocumentType_RECENTWATERBILL:
        return U("RecentWaterBill");
    default:
        break;
    }
    return {};
}
}

ProofDocumentType::ProofDocumentType()
{
}

ProofDocumentType::~ProofDocumentType()
{
}

void ProofDocumentType::validate()
{
    // TODO: implement validation
}

web::json::value ProofDocumentType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool ProofDocumentType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void ProofDocumentType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool ProofDocumentType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

ProofDocumentType::eProofDocumentType ProofDocumentType::getValue() const
{
   return m_value;
}

void ProofDocumentType::setValue(ProofDocumentType::eProofDocumentType const value)
{
   m_value = value;
}


}
}


