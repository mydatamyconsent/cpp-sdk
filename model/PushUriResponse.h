/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PushUriResponse.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_PushUriResponse_H_
#define MYDATAMYCONSENT_MODELS_PushUriResponse_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  PushUriResponse
    : public ModelBase
{
public:
    PushUriResponse();
    virtual ~PushUriResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PushUriResponse members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getResponseStatus() const;
    bool responseStatusIsSet() const;
    void unsetResponseStatus();

    void setResponseStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getResponseMessage() const;
    bool responseMessageIsSet() const;
    void unsetResponseMessage();

    void setResponseMessage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNs2() const;
    bool ns2IsSet() const;
    void unsetNs2();

    void setNs2(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVer() const;
    bool verIsSet() const;
    void unsetVer();

    void setVer(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTs() const;
    bool tsIsSet() const;
    void unsetTs();

    void setTs(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTxn() const;
    bool txnIsSet() const;
    void unsetTxn();

    void setTxn(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrgId() const;
    bool orgIdIsSet() const;
    void unsetOrgId();

    void setOrgId(const utility::string_t& value);


protected:
    utility::string_t m_ResponseStatus;
    bool m_ResponseStatusIsSet;
    utility::string_t m_ResponseMessage;
    bool m_ResponseMessageIsSet;
    utility::string_t m_Ns2;
    bool m_Ns2IsSet;
    utility::string_t m_Ver;
    bool m_VerIsSet;
    utility::string_t m_Ts;
    bool m_TsIsSet;
    utility::string_t m_Txn;
    bool m_TxnIsSet;
    utility::string_t m_OrgId;
    bool m_OrgIdIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_PushUriResponse_H_ */
