/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Gender.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

Gender::eGender toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("Male")))
        return Gender::eGender::Gender_MALE;
    if (val == utility::conversions::to_string_t(U("Female")))
        return Gender::eGender::Gender_FEMALE;
    if (val == utility::conversions::to_string_t(U("Other")))
        return Gender::eGender::Gender_OTHER;
    return {};
}

EnumUnderlyingType fromEnum(Gender::eGender e)
{
    switch (e)
    {
    case Gender::eGender::Gender_MALE:
        return U("Male");
    case Gender::eGender::Gender_FEMALE:
        return U("Female");
    case Gender::eGender::Gender_OTHER:
        return U("Other");
    default:
        break;
    }
    return {};
}
}

Gender::Gender()
{
}

Gender::~Gender()
{
}

void Gender::validate()
{
    // TODO: implement validation
}

web::json::value Gender::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool Gender::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void Gender::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool Gender::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

Gender::eGender Gender::getValue() const
{
   return m_value;
}

void Gender::setValue(Gender::eGender const value)
{
   m_value = value;
}


}
}


