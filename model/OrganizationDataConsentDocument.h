/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrganizationDataConsentDocument.h
 *
 * Organization data consent document details.
 */

#ifndef MYDATAMYCONSENT_MODELS_OrganizationDataConsentDocument_H_
#define MYDATAMYCONSENT_MODELS_OrganizationDataConsentDocument_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "model/DataConsentDocument.h"

namespace mydatamyconsent {
namespace models {


/// <summary>
/// Organization data consent document details.
/// </summary>
class  OrganizationDataConsentDocument
    : public ModelBase
{
public:
    OrganizationDataConsentDocument();
    virtual ~OrganizationDataConsentDocument();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrganizationDataConsentDocument members

    /// <summary>
    /// Name of consent approver organization.
    /// </summary>
    utility::string_t getApprover() const;
    bool approverIsSet() const;
    void unsetApprover();

    void setApprover(const utility::string_t& value);

    /// <summary>
    /// Document id.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Data consent id.
    /// </summary>
    utility::string_t getConsentId() const;
    bool consentIdIsSet() const;
    void unsetConsentId();

    void setConsentId(const utility::string_t& value);

    /// <summary>
    /// Document name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Document identifier.
    /// </summary>
    utility::string_t getIdentifier() const;
    bool identifierIsSet() const;
    void unsetIdentifier();

    void setIdentifier(const utility::string_t& value);


protected:
    utility::string_t m_Approver;
    bool m_ApproverIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_ConsentId;
    bool m_ConsentIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Identifier;
    bool m_IdentifierIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_OrganizationDataConsentDocument_H_ */
