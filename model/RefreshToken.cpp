/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RefreshToken.h"

namespace mydatamyconsent {
namespace models {




RefreshToken::RefreshToken()
{
    m_CreatedBy = utility::conversions::to_string_t("");
    m_CreatedByIsSet = false;
    m_CreatedAtUtc = utility::datetime();
    m_CreatedAtUtcIsSet = false;
    m_UpdatedBy = utility::conversions::to_string_t("");
    m_UpdatedByIsSet = false;
    m_UpdatedAtUtc = utility::datetime();
    m_UpdatedAtUtcIsSet = false;
    m_CreatedByUserIsSet = false;
    m_UpdatedByUserIsSet = false;
    m_DeletedBy = utility::conversions::to_string_t("");
    m_DeletedByIsSet = false;
    m_DeletedAtUtc = utility::datetime();
    m_DeletedAtUtcIsSet = false;
    m_DeletedByUserIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_InstallationId = utility::conversions::to_string_t("");
    m_InstallationIdIsSet = false;
    m_Token = utility::conversions::to_string_t("");
    m_TokenIsSet = false;
    m_AccessToken = utility::conversions::to_string_t("");
    m_AccessTokenIsSet = false;
    m_AccessTokenExpires = utility::datetime();
    m_AccessTokenExpiresIsSet = false;
    m_Expires = utility::datetime();
    m_ExpiresIsSet = false;
    m_IsExpired = false;
    m_IsExpiredIsSet = false;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_Revoked = utility::datetime();
    m_RevokedIsSet = false;
    m_IsActive = false;
    m_IsActiveIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_UserIsSet = false;
}

RefreshToken::~RefreshToken()
{
}

void RefreshToken::validate()
{
    // TODO: implement validation
}

web::json::value RefreshToken::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreatedByIsSet)
    {
        val[utility::conversions::to_string_t(U("createdBy"))] = ModelBase::toJson(m_CreatedBy);
    }
    if(m_CreatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAtUtc"))] = ModelBase::toJson(m_CreatedAtUtc);
    }
    if(m_UpdatedByIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedBy"))] = ModelBase::toJson(m_UpdatedBy);
    }
    if(m_UpdatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAtUtc"))] = ModelBase::toJson(m_UpdatedAtUtc);
    }
    if(m_CreatedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("createdByUser"))] = ModelBase::toJson(m_CreatedByUser);
    }
    if(m_UpdatedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedByUser"))] = ModelBase::toJson(m_UpdatedByUser);
    }
    if(m_DeletedByIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedBy"))] = ModelBase::toJson(m_DeletedBy);
    }
    if(m_DeletedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedAtUtc"))] = ModelBase::toJson(m_DeletedAtUtc);
    }
    if(m_DeletedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedByUser"))] = ModelBase::toJson(m_DeletedByUser);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_InstallationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("installationId"))] = ModelBase::toJson(m_InstallationId);
    }
    if(m_TokenIsSet)
    {
        val[utility::conversions::to_string_t(U("token"))] = ModelBase::toJson(m_Token);
    }
    if(m_AccessTokenIsSet)
    {
        val[utility::conversions::to_string_t(U("accessToken"))] = ModelBase::toJson(m_AccessToken);
    }
    if(m_AccessTokenExpiresIsSet)
    {
        val[utility::conversions::to_string_t(U("accessTokenExpires"))] = ModelBase::toJson(m_AccessTokenExpires);
    }
    if(m_ExpiresIsSet)
    {
        val[utility::conversions::to_string_t(U("expires"))] = ModelBase::toJson(m_Expires);
    }
    if(m_IsExpiredIsSet)
    {
        val[utility::conversions::to_string_t(U("isExpired"))] = ModelBase::toJson(m_IsExpired);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t(U("created"))] = ModelBase::toJson(m_Created);
    }
    if(m_RevokedIsSet)
    {
        val[utility::conversions::to_string_t(U("revoked"))] = ModelBase::toJson(m_Revoked);
    }
    if(m_IsActiveIsSet)
    {
        val[utility::conversions::to_string_t(U("isActive"))] = ModelBase::toJson(m_IsActive);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }

    return val;
}

bool RefreshToken::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("createdBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_createdBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdBy);
            setCreatedBy(refVal_createdBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAtUtc);
            setCreatedAtUtc(refVal_createdAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_updatedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedBy);
            setUpdatedBy(refVal_updatedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAtUtc);
            setUpdatedAtUtc(refVal_updatedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_createdByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdByUser);
            setCreatedByUser(refVal_createdByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_updatedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedByUser);
            setUpdatedByUser(refVal_updatedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_deletedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedBy);
            setDeletedBy(refVal_deletedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_deletedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedAtUtc);
            setDeletedAtUtc(refVal_deletedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_deletedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedByUser);
            setDeletedByUser(refVal_deletedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("installationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("installationId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_installationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_installationId);
            setInstallationId(refVal_installationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_token;
            ok &= ModelBase::fromJson(fieldValue, refVal_token);
            setToken(refVal_token);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accessToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accessToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_accessToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_accessToken);
            setAccessToken(refVal_accessToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accessTokenExpires"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accessTokenExpires")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_accessTokenExpires;
            ok &= ModelBase::fromJson(fieldValue, refVal_accessTokenExpires);
            setAccessTokenExpires(refVal_accessTokenExpires);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expires"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expires")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expires;
            ok &= ModelBase::fromJson(fieldValue, refVal_expires);
            setExpires(refVal_expires);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isExpired"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isExpired")));
        if(!fieldValue.is_null())
        {
            bool refVal_isExpired;
            ok &= ModelBase::fromJson(fieldValue, refVal_isExpired);
            setIsExpired(refVal_isExpired);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_created;
            ok &= ModelBase::fromJson(fieldValue, refVal_created);
            setCreated(refVal_created);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("revoked"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("revoked")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_revoked;
            ok &= ModelBase::fromJson(fieldValue, refVal_revoked);
            setRevoked(refVal_revoked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isActive"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isActive")));
        if(!fieldValue.is_null())
        {
            bool refVal_isActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_isActive);
            setIsActive(refVal_isActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_user;
            ok &= ModelBase::fromJson(fieldValue, refVal_user);
            setUser(refVal_user);
        }
    }
    return ok;
}

void RefreshToken::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdBy")), m_CreatedBy));
    }
    if(m_CreatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAtUtc")), m_CreatedAtUtc));
    }
    if(m_UpdatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedBy")), m_UpdatedBy));
    }
    if(m_UpdatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAtUtc")), m_UpdatedAtUtc));
    }
    if(m_CreatedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdByUser")), m_CreatedByUser));
    }
    if(m_UpdatedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedByUser")), m_UpdatedByUser));
    }
    if(m_DeletedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedBy")), m_DeletedBy));
    }
    if(m_DeletedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedAtUtc")), m_DeletedAtUtc));
    }
    if(m_DeletedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedByUser")), m_DeletedByUser));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_InstallationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("installationId")), m_InstallationId));
    }
    if(m_TokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token")), m_Token));
    }
    if(m_AccessTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accessToken")), m_AccessToken));
    }
    if(m_AccessTokenExpiresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accessTokenExpires")), m_AccessTokenExpires));
    }
    if(m_ExpiresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expires")), m_Expires));
    }
    if(m_IsExpiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isExpired")), m_IsExpired));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created")), m_Created));
    }
    if(m_RevokedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("revoked")), m_Revoked));
    }
    if(m_IsActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isActive")), m_IsActive));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
}

bool RefreshToken::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("createdBy"))))
    {
        utility::string_t refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdBy"))), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        utility::datetime refVal_createdAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAtUtc"))), refVal_createdAtUtc );
        setCreatedAtUtc(refVal_createdAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedBy"))))
    {
        utility::string_t refVal_updatedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedBy"))), refVal_updatedBy );
        setUpdatedBy(refVal_updatedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAtUtc"))))
    {
        utility::datetime refVal_updatedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAtUtc"))), refVal_updatedAtUtc );
        setUpdatedAtUtc(refVal_updatedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_createdByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdByUser"))), refVal_createdByUser );
        setCreatedByUser(refVal_createdByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_updatedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedByUser"))), refVal_updatedByUser );
        setUpdatedByUser(refVal_updatedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedBy"))))
    {
        utility::string_t refVal_deletedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedBy"))), refVal_deletedBy );
        setDeletedBy(refVal_deletedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedAtUtc"))))
    {
        utility::datetime refVal_deletedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedAtUtc"))), refVal_deletedAtUtc );
        setDeletedAtUtc(refVal_deletedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_deletedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedByUser"))), refVal_deletedByUser );
        setDeletedByUser(refVal_deletedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("installationId"))))
    {
        utility::string_t refVal_installationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("installationId"))), refVal_installationId );
        setInstallationId(refVal_installationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token"))))
    {
        utility::string_t refVal_token;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token"))), refVal_token );
        setToken(refVal_token);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accessToken"))))
    {
        utility::string_t refVal_accessToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accessToken"))), refVal_accessToken );
        setAccessToken(refVal_accessToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accessTokenExpires"))))
    {
        utility::datetime refVal_accessTokenExpires;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accessTokenExpires"))), refVal_accessTokenExpires );
        setAccessTokenExpires(refVal_accessTokenExpires);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expires"))))
    {
        utility::datetime refVal_expires;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expires"))), refVal_expires );
        setExpires(refVal_expires);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isExpired"))))
    {
        bool refVal_isExpired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isExpired"))), refVal_isExpired );
        setIsExpired(refVal_isExpired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created"))))
    {
        utility::datetime refVal_created;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created"))), refVal_created );
        setCreated(refVal_created);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("revoked"))))
    {
        utility::datetime refVal_revoked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("revoked"))), refVal_revoked );
        setRevoked(refVal_revoked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isActive"))))
    {
        bool refVal_isActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isActive"))), refVal_isActive );
        setIsActive(refVal_isActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        std::shared_ptr<ApplicationUser> refVal_user;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_user );
        setUser(refVal_user);
    }
    return ok;
}

utility::string_t RefreshToken::getCreatedBy() const
{
    return m_CreatedBy;
}

void RefreshToken::setCreatedBy(const utility::string_t& value)
{
    m_CreatedBy = value;
    m_CreatedByIsSet = true;
}

bool RefreshToken::createdByIsSet() const
{
    return m_CreatedByIsSet;
}

void RefreshToken::unsetCreatedBy()
{
    m_CreatedByIsSet = false;
}
utility::datetime RefreshToken::getCreatedAtUtc() const
{
    return m_CreatedAtUtc;
}

void RefreshToken::setCreatedAtUtc(const utility::datetime& value)
{
    m_CreatedAtUtc = value;
    m_CreatedAtUtcIsSet = true;
}

bool RefreshToken::createdAtUtcIsSet() const
{
    return m_CreatedAtUtcIsSet;
}

void RefreshToken::unsetCreatedAtUtc()
{
    m_CreatedAtUtcIsSet = false;
}
utility::string_t RefreshToken::getUpdatedBy() const
{
    return m_UpdatedBy;
}

void RefreshToken::setUpdatedBy(const utility::string_t& value)
{
    m_UpdatedBy = value;
    m_UpdatedByIsSet = true;
}

bool RefreshToken::updatedByIsSet() const
{
    return m_UpdatedByIsSet;
}

void RefreshToken::unsetUpdatedBy()
{
    m_UpdatedByIsSet = false;
}
utility::datetime RefreshToken::getUpdatedAtUtc() const
{
    return m_UpdatedAtUtc;
}

void RefreshToken::setUpdatedAtUtc(const utility::datetime& value)
{
    m_UpdatedAtUtc = value;
    m_UpdatedAtUtcIsSet = true;
}

bool RefreshToken::updatedAtUtcIsSet() const
{
    return m_UpdatedAtUtcIsSet;
}

void RefreshToken::unsetUpdatedAtUtc()
{
    m_UpdatedAtUtcIsSet = false;
}
std::shared_ptr<ApplicationUser> RefreshToken::getCreatedByUser() const
{
    return m_CreatedByUser;
}

void RefreshToken::setCreatedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_CreatedByUser = value;
    m_CreatedByUserIsSet = true;
}

bool RefreshToken::createdByUserIsSet() const
{
    return m_CreatedByUserIsSet;
}

void RefreshToken::unsetCreatedByUser()
{
    m_CreatedByUserIsSet = false;
}
std::shared_ptr<ApplicationUser> RefreshToken::getUpdatedByUser() const
{
    return m_UpdatedByUser;
}

void RefreshToken::setUpdatedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_UpdatedByUser = value;
    m_UpdatedByUserIsSet = true;
}

bool RefreshToken::updatedByUserIsSet() const
{
    return m_UpdatedByUserIsSet;
}

void RefreshToken::unsetUpdatedByUser()
{
    m_UpdatedByUserIsSet = false;
}
utility::string_t RefreshToken::getDeletedBy() const
{
    return m_DeletedBy;
}

void RefreshToken::setDeletedBy(const utility::string_t& value)
{
    m_DeletedBy = value;
    m_DeletedByIsSet = true;
}

bool RefreshToken::deletedByIsSet() const
{
    return m_DeletedByIsSet;
}

void RefreshToken::unsetDeletedBy()
{
    m_DeletedByIsSet = false;
}
utility::datetime RefreshToken::getDeletedAtUtc() const
{
    return m_DeletedAtUtc;
}

void RefreshToken::setDeletedAtUtc(const utility::datetime& value)
{
    m_DeletedAtUtc = value;
    m_DeletedAtUtcIsSet = true;
}

bool RefreshToken::deletedAtUtcIsSet() const
{
    return m_DeletedAtUtcIsSet;
}

void RefreshToken::unsetDeletedAtUtc()
{
    m_DeletedAtUtcIsSet = false;
}
std::shared_ptr<ApplicationUser> RefreshToken::getDeletedByUser() const
{
    return m_DeletedByUser;
}

void RefreshToken::setDeletedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_DeletedByUser = value;
    m_DeletedByUserIsSet = true;
}

bool RefreshToken::deletedByUserIsSet() const
{
    return m_DeletedByUserIsSet;
}

void RefreshToken::unsetDeletedByUser()
{
    m_DeletedByUserIsSet = false;
}
utility::string_t RefreshToken::getId() const
{
    return m_Id;
}

void RefreshToken::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool RefreshToken::idIsSet() const
{
    return m_IdIsSet;
}

void RefreshToken::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t RefreshToken::getInstallationId() const
{
    return m_InstallationId;
}

void RefreshToken::setInstallationId(const utility::string_t& value)
{
    m_InstallationId = value;
    m_InstallationIdIsSet = true;
}

bool RefreshToken::installationIdIsSet() const
{
    return m_InstallationIdIsSet;
}

void RefreshToken::unsetInstallationId()
{
    m_InstallationIdIsSet = false;
}
utility::string_t RefreshToken::getToken() const
{
    return m_Token;
}

void RefreshToken::setToken(const utility::string_t& value)
{
    m_Token = value;
    m_TokenIsSet = true;
}

bool RefreshToken::tokenIsSet() const
{
    return m_TokenIsSet;
}

void RefreshToken::unsetToken()
{
    m_TokenIsSet = false;
}
utility::string_t RefreshToken::getAccessToken() const
{
    return m_AccessToken;
}

void RefreshToken::setAccessToken(const utility::string_t& value)
{
    m_AccessToken = value;
    m_AccessTokenIsSet = true;
}

bool RefreshToken::accessTokenIsSet() const
{
    return m_AccessTokenIsSet;
}

void RefreshToken::unsetAccessToken()
{
    m_AccessTokenIsSet = false;
}
utility::datetime RefreshToken::getAccessTokenExpires() const
{
    return m_AccessTokenExpires;
}

void RefreshToken::setAccessTokenExpires(const utility::datetime& value)
{
    m_AccessTokenExpires = value;
    m_AccessTokenExpiresIsSet = true;
}

bool RefreshToken::accessTokenExpiresIsSet() const
{
    return m_AccessTokenExpiresIsSet;
}

void RefreshToken::unsetAccessTokenExpires()
{
    m_AccessTokenExpiresIsSet = false;
}
utility::datetime RefreshToken::getExpires() const
{
    return m_Expires;
}

void RefreshToken::setExpires(const utility::datetime& value)
{
    m_Expires = value;
    m_ExpiresIsSet = true;
}

bool RefreshToken::expiresIsSet() const
{
    return m_ExpiresIsSet;
}

void RefreshToken::unsetExpires()
{
    m_ExpiresIsSet = false;
}
bool RefreshToken::isIsExpired() const
{
    return m_IsExpired;
}

void RefreshToken::setIsExpired(bool value)
{
    m_IsExpired = value;
    m_IsExpiredIsSet = true;
}

bool RefreshToken::isExpiredIsSet() const
{
    return m_IsExpiredIsSet;
}

void RefreshToken::unsetIsExpired()
{
    m_IsExpiredIsSet = false;
}
utility::datetime RefreshToken::getCreated() const
{
    return m_Created;
}

void RefreshToken::setCreated(const utility::datetime& value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool RefreshToken::createdIsSet() const
{
    return m_CreatedIsSet;
}

void RefreshToken::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::datetime RefreshToken::getRevoked() const
{
    return m_Revoked;
}

void RefreshToken::setRevoked(const utility::datetime& value)
{
    m_Revoked = value;
    m_RevokedIsSet = true;
}

bool RefreshToken::revokedIsSet() const
{
    return m_RevokedIsSet;
}

void RefreshToken::unsetRevoked()
{
    m_RevokedIsSet = false;
}
bool RefreshToken::isIsActive() const
{
    return m_IsActive;
}

void RefreshToken::setIsActive(bool value)
{
    m_IsActive = value;
    m_IsActiveIsSet = true;
}

bool RefreshToken::isActiveIsSet() const
{
    return m_IsActiveIsSet;
}

void RefreshToken::unsetIsActive()
{
    m_IsActiveIsSet = false;
}
utility::string_t RefreshToken::getUserId() const
{
    return m_UserId;
}

void RefreshToken::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool RefreshToken::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void RefreshToken::unsetUserId()
{
    m_UserIdIsSet = false;
}
std::shared_ptr<ApplicationUser> RefreshToken::getUser() const
{
    return m_User;
}

void RefreshToken::setUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool RefreshToken::userIsSet() const
{
    return m_UserIsSet;
}

void RefreshToken::unsetUser()
{
    m_UserIsSet = false;
}
}
}


