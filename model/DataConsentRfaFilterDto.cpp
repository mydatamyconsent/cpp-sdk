/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsentRfaFilterDto.h"

namespace mydatamyconsent {
namespace models {




DataConsentRfaFilterDto::DataConsentRfaFilterDto()
{
    m_FilterTypeIsSet = false;
    m_r_operatorIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

DataConsentRfaFilterDto::~DataConsentRfaFilterDto()
{
}

void DataConsentRfaFilterDto::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentRfaFilterDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FilterTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("filterType"))] = ModelBase::toJson(m_FilterType);
    }
    if(m_r_operatorIsSet)
    {
        val[utility::conversions::to_string_t(U("operator"))] = ModelBase::toJson(m_r_operator);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool DataConsentRfaFilterDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("filterType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filterType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FilterType> refVal_filterType;
            ok &= ModelBase::fromJson(fieldValue, refVal_filterType);
            setFilterType(refVal_filterType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("operator"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operator")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Operator> refVal_operator;
            ok &= ModelBase::fromJson(fieldValue, refVal_operator);
            setROperator(refVal_operator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_value);
            setValue(refVal_value);
        }
    }
    return ok;
}

void DataConsentRfaFilterDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FilterTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filterType")), m_FilterType));
    }
    if(m_r_operatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operator")), m_r_operator));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
}

bool DataConsentRfaFilterDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("filterType"))))
    {
        std::shared_ptr<FilterType> refVal_filterType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filterType"))), refVal_filterType );
        setFilterType(refVal_filterType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("operator"))))
    {
        std::shared_ptr<Operator> refVal_operator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operator"))), refVal_operator );
        setROperator(refVal_operator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_value );
        setValue(refVal_value);
    }
    return ok;
}

std::shared_ptr<FilterType> DataConsentRfaFilterDto::getFilterType() const
{
    return m_FilterType;
}

void DataConsentRfaFilterDto::setFilterType(const std::shared_ptr<FilterType>& value)
{
    m_FilterType = value;
    m_FilterTypeIsSet = true;
}

bool DataConsentRfaFilterDto::filterTypeIsSet() const
{
    return m_FilterTypeIsSet;
}

void DataConsentRfaFilterDto::unsetFilterType()
{
    m_FilterTypeIsSet = false;
}
std::shared_ptr<Operator> DataConsentRfaFilterDto::getROperator() const
{
    return m_r_operator;
}

void DataConsentRfaFilterDto::setROperator(const std::shared_ptr<Operator>& value)
{
    m_r_operator = value;
    m_r_operatorIsSet = true;
}

bool DataConsentRfaFilterDto::rOperatorIsSet() const
{
    return m_r_operatorIsSet;
}

void DataConsentRfaFilterDto::unsetr_operator()
{
    m_r_operatorIsSet = false;
}
utility::string_t DataConsentRfaFilterDto::getValue() const
{
    return m_Value;
}

void DataConsentRfaFilterDto::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool DataConsentRfaFilterDto::valueIsSet() const
{
    return m_ValueIsSet;
}

void DataConsentRfaFilterDto::unsetValue()
{
    m_ValueIsSet = false;
}
}
}


