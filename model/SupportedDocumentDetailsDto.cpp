/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SupportedDocumentDetailsDto.h"

namespace mydatamyconsent {
namespace models {




SupportedDocumentDetailsDto::SupportedDocumentDetailsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_r_typeId = utility::conversions::to_string_t("");
    m_r_typeIdIsSet = false;
    m_LogoUrl = utility::conversions::to_string_t("");
    m_LogoUrlIsSet = false;
    m_StorageUrl = utility::conversions::to_string_t("");
    m_StorageUrlIsSet = false;
    m_IssuedBy = utility::conversions::to_string_t("");
    m_IssuedByIsSet = false;
    m_UploadedAtUtc = utility::datetime();
    m_UploadedAtUtcIsSet = false;
}

SupportedDocumentDetailsDto::~SupportedDocumentDetailsDto()
{
}

void SupportedDocumentDetailsDto::validate()
{
    // TODO: implement validation
}

web::json::value SupportedDocumentDetailsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_r_typeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("typeId"))] = ModelBase::toJson(m_r_typeId);
    }
    if(m_LogoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("logoUrl"))] = ModelBase::toJson(m_LogoUrl);
    }
    if(m_StorageUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("storageUrl"))] = ModelBase::toJson(m_StorageUrl);
    }
    if(m_IssuedByIsSet)
    {
        val[utility::conversions::to_string_t(U("issuedBy"))] = ModelBase::toJson(m_IssuedBy);
    }
    if(m_UploadedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("uploadedAtUtc"))] = ModelBase::toJson(m_UploadedAtUtc);
    }

    return val;
}

bool SupportedDocumentDetailsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("typeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("typeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeId);
            setRTypeId(refVal_typeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_logoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_logoUrl);
            setLogoUrl(refVal_logoUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("storageUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("storageUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_storageUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_storageUrl);
            setStorageUrl(refVal_storageUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_issuedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuedBy);
            setIssuedBy(refVal_issuedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uploadedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uploadedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_uploadedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_uploadedAtUtc);
            setUploadedAtUtc(refVal_uploadedAtUtc);
        }
    }
    return ok;
}

void SupportedDocumentDetailsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_r_typeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("typeId")), m_r_typeId));
    }
    if(m_LogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logoUrl")), m_LogoUrl));
    }
    if(m_StorageUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("storageUrl")), m_StorageUrl));
    }
    if(m_IssuedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuedBy")), m_IssuedBy));
    }
    if(m_UploadedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uploadedAtUtc")), m_UploadedAtUtc));
    }
}

bool SupportedDocumentDetailsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("typeId"))))
    {
        utility::string_t refVal_typeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("typeId"))), refVal_typeId );
        setRTypeId(refVal_typeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logoUrl"))))
    {
        utility::string_t refVal_logoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logoUrl"))), refVal_logoUrl );
        setLogoUrl(refVal_logoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("storageUrl"))))
    {
        utility::string_t refVal_storageUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("storageUrl"))), refVal_storageUrl );
        setStorageUrl(refVal_storageUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuedBy"))))
    {
        utility::string_t refVal_issuedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuedBy"))), refVal_issuedBy );
        setIssuedBy(refVal_issuedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uploadedAtUtc"))))
    {
        utility::datetime refVal_uploadedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uploadedAtUtc"))), refVal_uploadedAtUtc );
        setUploadedAtUtc(refVal_uploadedAtUtc);
    }
    return ok;
}

utility::string_t SupportedDocumentDetailsDto::getId() const
{
    return m_Id;
}

void SupportedDocumentDetailsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SupportedDocumentDetailsDto::idIsSet() const
{
    return m_IdIsSet;
}

void SupportedDocumentDetailsDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SupportedDocumentDetailsDto::getRTypeId() const
{
    return m_r_typeId;
}

void SupportedDocumentDetailsDto::setRTypeId(const utility::string_t& value)
{
    m_r_typeId = value;
    m_r_typeIdIsSet = true;
}

bool SupportedDocumentDetailsDto::rTypeIdIsSet() const
{
    return m_r_typeIdIsSet;
}

void SupportedDocumentDetailsDto::unsetr_typeId()
{
    m_r_typeIdIsSet = false;
}
utility::string_t SupportedDocumentDetailsDto::getLogoUrl() const
{
    return m_LogoUrl;
}

void SupportedDocumentDetailsDto::setLogoUrl(const utility::string_t& value)
{
    m_LogoUrl = value;
    m_LogoUrlIsSet = true;
}

bool SupportedDocumentDetailsDto::logoUrlIsSet() const
{
    return m_LogoUrlIsSet;
}

void SupportedDocumentDetailsDto::unsetLogoUrl()
{
    m_LogoUrlIsSet = false;
}
utility::string_t SupportedDocumentDetailsDto::getStorageUrl() const
{
    return m_StorageUrl;
}

void SupportedDocumentDetailsDto::setStorageUrl(const utility::string_t& value)
{
    m_StorageUrl = value;
    m_StorageUrlIsSet = true;
}

bool SupportedDocumentDetailsDto::storageUrlIsSet() const
{
    return m_StorageUrlIsSet;
}

void SupportedDocumentDetailsDto::unsetStorageUrl()
{
    m_StorageUrlIsSet = false;
}
utility::string_t SupportedDocumentDetailsDto::getIssuedBy() const
{
    return m_IssuedBy;
}

void SupportedDocumentDetailsDto::setIssuedBy(const utility::string_t& value)
{
    m_IssuedBy = value;
    m_IssuedByIsSet = true;
}

bool SupportedDocumentDetailsDto::issuedByIsSet() const
{
    return m_IssuedByIsSet;
}

void SupportedDocumentDetailsDto::unsetIssuedBy()
{
    m_IssuedByIsSet = false;
}
utility::datetime SupportedDocumentDetailsDto::getUploadedAtUtc() const
{
    return m_UploadedAtUtc;
}

void SupportedDocumentDetailsDto::setUploadedAtUtc(const utility::datetime& value)
{
    m_UploadedAtUtc = value;
    m_UploadedAtUtcIsSet = true;
}

bool SupportedDocumentDetailsDto::uploadedAtUtcIsSet() const
{
    return m_UploadedAtUtcIsSet;
}

void SupportedDocumentDetailsDto::unsetUploadedAtUtc()
{
    m_UploadedAtUtcIsSet = false;
}
}
}


