/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DocumentDigitalSignature.h"

namespace mydatamyconsent {
namespace models {




DocumentDigitalSignature::DocumentDigitalSignature()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_IssuedBy = utility::conversions::to_string_t("");
    m_IssuedByIsSet = false;
    m_IssuerName = utility::conversions::to_string_t("");
    m_IssuerNameIsSet = false;
    m_ValidFromUtc = utility::datetime();
    m_ValidFromUtcIsSet = false;
    m_ValidToUtc = utility::datetime();
    m_ValidToUtcIsSet = false;
}

DocumentDigitalSignature::~DocumentDigitalSignature()
{
}

void DocumentDigitalSignature::validate()
{
    // TODO: implement validation
}

web::json::value DocumentDigitalSignature::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_IssuedByIsSet)
    {
        val[utility::conversions::to_string_t(U("issuedBy"))] = ModelBase::toJson(m_IssuedBy);
    }
    if(m_IssuerNameIsSet)
    {
        val[utility::conversions::to_string_t(U("issuerName"))] = ModelBase::toJson(m_IssuerName);
    }
    if(m_ValidFromUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("validFromUtc"))] = ModelBase::toJson(m_ValidFromUtc);
    }
    if(m_ValidToUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("validToUtc"))] = ModelBase::toJson(m_ValidToUtc);
    }

    return val;
}

bool DocumentDigitalSignature::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_issuedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuedBy);
            setIssuedBy(refVal_issuedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuerName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuerName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_issuerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuerName);
            setIssuerName(refVal_issuerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validFromUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validFromUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_validFromUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_validFromUtc);
            setValidFromUtc(refVal_validFromUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validToUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validToUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_validToUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_validToUtc);
            setValidToUtc(refVal_validToUtc);
        }
    }
    return ok;
}

void DocumentDigitalSignature::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_IssuedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuedBy")), m_IssuedBy));
    }
    if(m_IssuerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuerName")), m_IssuerName));
    }
    if(m_ValidFromUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validFromUtc")), m_ValidFromUtc));
    }
    if(m_ValidToUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validToUtc")), m_ValidToUtc));
    }
}

bool DocumentDigitalSignature::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuedBy"))))
    {
        utility::string_t refVal_issuedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuedBy"))), refVal_issuedBy );
        setIssuedBy(refVal_issuedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuerName"))))
    {
        utility::string_t refVal_issuerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuerName"))), refVal_issuerName );
        setIssuerName(refVal_issuerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validFromUtc"))))
    {
        utility::datetime refVal_validFromUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validFromUtc"))), refVal_validFromUtc );
        setValidFromUtc(refVal_validFromUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validToUtc"))))
    {
        utility::datetime refVal_validToUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validToUtc"))), refVal_validToUtc );
        setValidToUtc(refVal_validToUtc);
    }
    return ok;
}

utility::string_t DocumentDigitalSignature::getName() const
{
    return m_Name;
}

void DocumentDigitalSignature::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DocumentDigitalSignature::nameIsSet() const
{
    return m_NameIsSet;
}

void DocumentDigitalSignature::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t DocumentDigitalSignature::getIssuedBy() const
{
    return m_IssuedBy;
}

void DocumentDigitalSignature::setIssuedBy(const utility::string_t& value)
{
    m_IssuedBy = value;
    m_IssuedByIsSet = true;
}

bool DocumentDigitalSignature::issuedByIsSet() const
{
    return m_IssuedByIsSet;
}

void DocumentDigitalSignature::unsetIssuedBy()
{
    m_IssuedByIsSet = false;
}
utility::string_t DocumentDigitalSignature::getIssuerName() const
{
    return m_IssuerName;
}

void DocumentDigitalSignature::setIssuerName(const utility::string_t& value)
{
    m_IssuerName = value;
    m_IssuerNameIsSet = true;
}

bool DocumentDigitalSignature::issuerNameIsSet() const
{
    return m_IssuerNameIsSet;
}

void DocumentDigitalSignature::unsetIssuerName()
{
    m_IssuerNameIsSet = false;
}
utility::datetime DocumentDigitalSignature::getValidFromUtc() const
{
    return m_ValidFromUtc;
}

void DocumentDigitalSignature::setValidFromUtc(const utility::datetime& value)
{
    m_ValidFromUtc = value;
    m_ValidFromUtcIsSet = true;
}

bool DocumentDigitalSignature::validFromUtcIsSet() const
{
    return m_ValidFromUtcIsSet;
}

void DocumentDigitalSignature::unsetValidFromUtc()
{
    m_ValidFromUtcIsSet = false;
}
utility::datetime DocumentDigitalSignature::getValidToUtc() const
{
    return m_ValidToUtc;
}

void DocumentDigitalSignature::setValidToUtc(const utility::datetime& value)
{
    m_ValidToUtc = value;
    m_ValidToUtcIsSet = true;
}

bool DocumentDigitalSignature::validToUtcIsSet() const
{
    return m_ValidToUtcIsSet;
}

void DocumentDigitalSignature::unsetValidToUtc()
{
    m_ValidToUtcIsSet = false;
}
}
}


