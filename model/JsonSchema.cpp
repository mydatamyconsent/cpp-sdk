/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonSchema.h"

namespace mydatamyconsent {
namespace models {




JsonSchema::JsonSchema()
{
    m_KeywordsIsSet = false;
    m_OtherDataIsSet = false;
    m_BoolValue = false;
    m_BoolValueIsSet = false;
}

JsonSchema::~JsonSchema()
{
}

void JsonSchema::validate()
{
    // TODO: implement validation
}

web::json::value JsonSchema::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_KeywordsIsSet)
    {
        val[utility::conversions::to_string_t(U("keywords"))] = ModelBase::toJson(m_Keywords);
    }
    if(m_OtherDataIsSet)
    {
        val[utility::conversions::to_string_t(U("otherData"))] = ModelBase::toJson(m_OtherData);
    }
    if(m_BoolValueIsSet)
    {
        val[utility::conversions::to_string_t(U("boolValue"))] = ModelBase::toJson(m_BoolValue);
    }

    return val;
}

bool JsonSchema::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("keywords"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("keywords")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Object>> refVal_keywords;
            ok &= ModelBase::fromJson(fieldValue, refVal_keywords);
            setKeywords(refVal_keywords);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("otherData"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("otherData")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_otherData;
            ok &= ModelBase::fromJson(fieldValue, refVal_otherData);
            setOtherData(refVal_otherData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("boolValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("boolValue")));
        if(!fieldValue.is_null())
        {
            bool refVal_boolValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_boolValue);
            setBoolValue(refVal_boolValue);
        }
    }
    return ok;
}

void JsonSchema::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_KeywordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("keywords")), m_Keywords));
    }
    if(m_OtherDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("otherData")), m_OtherData));
    }
    if(m_BoolValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("boolValue")), m_BoolValue));
    }
}

bool JsonSchema::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("keywords"))))
    {
        std::vector<std::shared_ptr<Object>> refVal_keywords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("keywords"))), refVal_keywords );
        setKeywords(refVal_keywords);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("otherData"))))
    {
        std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_otherData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("otherData"))), refVal_otherData );
        setOtherData(refVal_otherData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("boolValue"))))
    {
        bool refVal_boolValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("boolValue"))), refVal_boolValue );
        setBoolValue(refVal_boolValue);
    }
    return ok;
}

std::vector<std::shared_ptr<Object>>& JsonSchema::getKeywords()
{
    return m_Keywords;
}

void JsonSchema::setKeywords(const std::vector<std::shared_ptr<Object>>& value)
{
    m_Keywords = value;
    m_KeywordsIsSet = true;
}

bool JsonSchema::keywordsIsSet() const
{
    return m_KeywordsIsSet;
}

void JsonSchema::unsetKeywords()
{
    m_KeywordsIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<AnyType>>& JsonSchema::getOtherData()
{
    return m_OtherData;
}

void JsonSchema::setOtherData(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value)
{
    m_OtherData = value;
    m_OtherDataIsSet = true;
}

bool JsonSchema::otherDataIsSet() const
{
    return m_OtherDataIsSet;
}

void JsonSchema::unsetOtherData()
{
    m_OtherDataIsSet = false;
}
bool JsonSchema::isBoolValue() const
{
    return m_BoolValue;
}

void JsonSchema::setBoolValue(bool value)
{
    m_BoolValue = value;
    m_BoolValueIsSet = true;
}

bool JsonSchema::boolValueIsSet() const
{
    return m_BoolValueIsSet;
}

void JsonSchema::unsetBoolValue()
{
    m_BoolValueIsSet = false;
}
}
}


