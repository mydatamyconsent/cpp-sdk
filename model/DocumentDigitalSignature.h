/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DocumentDigitalSignature.h
 *
 * Document digital signature.
 */

#ifndef MYDATAMYCONSENT_MODELS_DocumentDigitalSignature_H_
#define MYDATAMYCONSENT_MODELS_DocumentDigitalSignature_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// Document digital signature.
/// </summary>
class  DocumentDigitalSignature
    : public ModelBase
{
public:
    DocumentDigitalSignature();
    virtual ~DocumentDigitalSignature();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DocumentDigitalSignature members

    /// <summary>
    /// Name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Signature issued by.
    /// </summary>
    utility::string_t getIssuedBy() const;
    bool issuedByIsSet() const;
    void unsetIssuedBy();

    void setIssuedBy(const utility::string_t& value);

    /// <summary>
    /// Signature issuer name.
    /// </summary>
    utility::string_t getIssuerName() const;
    bool issuerNameIsSet() const;
    void unsetIssuerName();

    void setIssuerName(const utility::string_t& value);

    /// <summary>
    /// Signature valid from datatime in UTC timezone.
    /// </summary>
    utility::datetime getValidFromUtc() const;
    bool validFromUtcIsSet() const;
    void unsetValidFromUtc();

    void setValidFromUtc(const utility::datetime& value);

    /// <summary>
    /// Signature valid to datatime in UTC timezone.
    /// </summary>
    utility::datetime getValidToUtc() const;
    bool validToUtcIsSet() const;
    void unsetValidToUtc();

    void setValidToUtc(const utility::datetime& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_IssuedBy;
    bool m_IssuedByIsSet;
    utility::string_t m_IssuerName;
    bool m_IssuerNameIsSet;
    utility::datetime m_ValidFromUtc;
    bool m_ValidFromUtcIsSet;
    utility::datetime m_ValidToUtc;
    bool m_ValidToUtcIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DocumentDigitalSignature_H_ */
