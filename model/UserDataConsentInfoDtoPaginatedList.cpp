/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UserDataConsentInfoDtoPaginatedList.h"

namespace mydatamyconsent {
namespace models {




UserDataConsentInfoDtoPaginatedList::UserDataConsentInfoDtoPaginatedList()
{
    m_PageIndex = 0;
    m_PageIndexIsSet = false;
    m_PageSize = 0;
    m_PageSizeIsSet = false;
    m_TotalPages = 0;
    m_TotalPagesIsSet = false;
    m_TotalItems = 0L;
    m_TotalItemsIsSet = false;
    m_ItemsIsSet = false;
}

UserDataConsentInfoDtoPaginatedList::~UserDataConsentInfoDtoPaginatedList()
{
}

void UserDataConsentInfoDtoPaginatedList::validate()
{
    // TODO: implement validation
}

web::json::value UserDataConsentInfoDtoPaginatedList::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PageIndexIsSet)
    {
        val[utility::conversions::to_string_t(U("pageIndex"))] = ModelBase::toJson(m_PageIndex);
    }
    if(m_PageSizeIsSet)
    {
        val[utility::conversions::to_string_t(U("pageSize"))] = ModelBase::toJson(m_PageSize);
    }
    if(m_TotalPagesIsSet)
    {
        val[utility::conversions::to_string_t(U("totalPages"))] = ModelBase::toJson(m_TotalPages);
    }
    if(m_TotalItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("totalItems"))] = ModelBase::toJson(m_TotalItems);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_Items);
    }

    return val;
}

bool UserDataConsentInfoDtoPaginatedList::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("pageIndex"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageIndex")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_pageIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_pageIndex);
            setPageIndex(refVal_pageIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pageSize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageSize")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_pageSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_pageSize);
            setPageSize(refVal_pageSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalPages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalPages")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_totalPages;
            ok &= ModelBase::fromJson(fieldValue, refVal_totalPages);
            setTotalPages(refVal_totalPages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalItems"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalItems")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_totalItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_totalItems);
            setTotalItems(refVal_totalItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UserDataConsentInfoDto>> refVal_items;
            ok &= ModelBase::fromJson(fieldValue, refVal_items);
            setItems(refVal_items);
        }
    }
    return ok;
}

void UserDataConsentInfoDtoPaginatedList::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PageIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageIndex")), m_PageIndex));
    }
    if(m_PageSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageSize")), m_PageSize));
    }
    if(m_TotalPagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalPages")), m_TotalPages));
    }
    if(m_TotalItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalItems")), m_TotalItems));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_Items));
    }
}

bool UserDataConsentInfoDtoPaginatedList::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("pageIndex"))))
    {
        int32_t refVal_pageIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageIndex"))), refVal_pageIndex );
        setPageIndex(refVal_pageIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pageSize"))))
    {
        int32_t refVal_pageSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageSize"))), refVal_pageSize );
        setPageSize(refVal_pageSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalPages"))))
    {
        int32_t refVal_totalPages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalPages"))), refVal_totalPages );
        setTotalPages(refVal_totalPages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalItems"))))
    {
        int64_t refVal_totalItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalItems"))), refVal_totalItems );
        setTotalItems(refVal_totalItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        std::vector<std::shared_ptr<UserDataConsentInfoDto>> refVal_items;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_items );
        setItems(refVal_items);
    }
    return ok;
}

int32_t UserDataConsentInfoDtoPaginatedList::getPageIndex() const
{
    return m_PageIndex;
}

void UserDataConsentInfoDtoPaginatedList::setPageIndex(int32_t value)
{
    m_PageIndex = value;
    m_PageIndexIsSet = true;
}

bool UserDataConsentInfoDtoPaginatedList::pageIndexIsSet() const
{
    return m_PageIndexIsSet;
}

void UserDataConsentInfoDtoPaginatedList::unsetPageIndex()
{
    m_PageIndexIsSet = false;
}
int32_t UserDataConsentInfoDtoPaginatedList::getPageSize() const
{
    return m_PageSize;
}

void UserDataConsentInfoDtoPaginatedList::setPageSize(int32_t value)
{
    m_PageSize = value;
    m_PageSizeIsSet = true;
}

bool UserDataConsentInfoDtoPaginatedList::pageSizeIsSet() const
{
    return m_PageSizeIsSet;
}

void UserDataConsentInfoDtoPaginatedList::unsetPageSize()
{
    m_PageSizeIsSet = false;
}
int32_t UserDataConsentInfoDtoPaginatedList::getTotalPages() const
{
    return m_TotalPages;
}

void UserDataConsentInfoDtoPaginatedList::setTotalPages(int32_t value)
{
    m_TotalPages = value;
    m_TotalPagesIsSet = true;
}

bool UserDataConsentInfoDtoPaginatedList::totalPagesIsSet() const
{
    return m_TotalPagesIsSet;
}

void UserDataConsentInfoDtoPaginatedList::unsetTotalPages()
{
    m_TotalPagesIsSet = false;
}
int64_t UserDataConsentInfoDtoPaginatedList::getTotalItems() const
{
    return m_TotalItems;
}

void UserDataConsentInfoDtoPaginatedList::setTotalItems(int64_t value)
{
    m_TotalItems = value;
    m_TotalItemsIsSet = true;
}

bool UserDataConsentInfoDtoPaginatedList::totalItemsIsSet() const
{
    return m_TotalItemsIsSet;
}

void UserDataConsentInfoDtoPaginatedList::unsetTotalItems()
{
    m_TotalItemsIsSet = false;
}
std::vector<std::shared_ptr<UserDataConsentInfoDto>>& UserDataConsentInfoDtoPaginatedList::getItems()
{
    return m_Items;
}

void UserDataConsentInfoDtoPaginatedList::setItems(const std::vector<std::shared_ptr<UserDataConsentInfoDto>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool UserDataConsentInfoDtoPaginatedList::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void UserDataConsentInfoDtoPaginatedList::unsetItems()
{
    m_ItemsIsSet = false;
}
}
}


