/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrganizationKyoDocument.h"

namespace mydatamyconsent {
namespace models {




OrganizationKyoDocument::OrganizationKyoDocument()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_OrganizationId = utility::conversions::to_string_t("");
    m_OrganizationIdIsSet = false;
    m_DocumentName = utility::conversions::to_string_t("");
    m_DocumentNameIsSet = false;
    m_StorageUrl = utility::conversions::to_string_t("");
    m_StorageUrlIsSet = false;
    m_UploadedAtUtc = utility::datetime();
    m_UploadedAtUtcIsSet = false;
    m_VerifiedBy = utility::conversions::to_string_t("");
    m_VerifiedByIsSet = false;
    m_VerifiedAtUtc = utility::datetime();
    m_VerifiedAtUtcIsSet = false;
    m_DeletedBy = utility::conversions::to_string_t("");
    m_DeletedByIsSet = false;
    m_DeletedAtUtc = utility::datetime();
    m_DeletedAtUtcIsSet = false;
    m_OrganizationIsSet = false;
    m_VerifiedByUserIsSet = false;
    m_DeletedByUserIsSet = false;
    m_RejectionIsSet = false;
}

OrganizationKyoDocument::~OrganizationKyoDocument()
{
}

void OrganizationKyoDocument::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationKyoDocument::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OrganizationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationId"))] = ModelBase::toJson(m_OrganizationId);
    }
    if(m_DocumentNameIsSet)
    {
        val[utility::conversions::to_string_t(U("documentName"))] = ModelBase::toJson(m_DocumentName);
    }
    if(m_StorageUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("storageUrl"))] = ModelBase::toJson(m_StorageUrl);
    }
    if(m_UploadedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("uploadedAtUtc"))] = ModelBase::toJson(m_UploadedAtUtc);
    }
    if(m_VerifiedByIsSet)
    {
        val[utility::conversions::to_string_t(U("verifiedBy"))] = ModelBase::toJson(m_VerifiedBy);
    }
    if(m_VerifiedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("verifiedAtUtc"))] = ModelBase::toJson(m_VerifiedAtUtc);
    }
    if(m_DeletedByIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedBy"))] = ModelBase::toJson(m_DeletedBy);
    }
    if(m_DeletedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedAtUtc"))] = ModelBase::toJson(m_DeletedAtUtc);
    }
    if(m_OrganizationIsSet)
    {
        val[utility::conversions::to_string_t(U("organization"))] = ModelBase::toJson(m_Organization);
    }
    if(m_VerifiedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("verifiedByUser"))] = ModelBase::toJson(m_VerifiedByUser);
    }
    if(m_DeletedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedByUser"))] = ModelBase::toJson(m_DeletedByUser);
    }
    if(m_RejectionIsSet)
    {
        val[utility::conversions::to_string_t(U("rejection"))] = ModelBase::toJson(m_Rejection);
    }

    return val;
}

bool OrganizationKyoDocument::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organizationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationId);
            setOrganizationId(refVal_organizationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentName;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentName);
            setDocumentName(refVal_documentName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("storageUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("storageUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_storageUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_storageUrl);
            setStorageUrl(refVal_storageUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uploadedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uploadedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_uploadedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_uploadedAtUtc);
            setUploadedAtUtc(refVal_uploadedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("verifiedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("verifiedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_verifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_verifiedBy);
            setVerifiedBy(refVal_verifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("verifiedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("verifiedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_verifiedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_verifiedAtUtc);
            setVerifiedAtUtc(refVal_verifiedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_deletedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedBy);
            setDeletedBy(refVal_deletedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_deletedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedAtUtc);
            setDeletedAtUtc(refVal_deletedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Organization> refVal_organization;
            ok &= ModelBase::fromJson(fieldValue, refVal_organization);
            setOrganization(refVal_organization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("verifiedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("verifiedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_verifiedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_verifiedByUser);
            setVerifiedByUser(refVal_verifiedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_deletedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedByUser);
            setDeletedByUser(refVal_deletedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rejection"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejection")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Rejection> refVal_rejection;
            ok &= ModelBase::fromJson(fieldValue, refVal_rejection);
            setRejection(refVal_rejection);
        }
    }
    return ok;
}

void OrganizationKyoDocument::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OrganizationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationId")), m_OrganizationId));
    }
    if(m_DocumentNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentName")), m_DocumentName));
    }
    if(m_StorageUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("storageUrl")), m_StorageUrl));
    }
    if(m_UploadedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uploadedAtUtc")), m_UploadedAtUtc));
    }
    if(m_VerifiedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("verifiedBy")), m_VerifiedBy));
    }
    if(m_VerifiedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("verifiedAtUtc")), m_VerifiedAtUtc));
    }
    if(m_DeletedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedBy")), m_DeletedBy));
    }
    if(m_DeletedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedAtUtc")), m_DeletedAtUtc));
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization")), m_Organization));
    }
    if(m_VerifiedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("verifiedByUser")), m_VerifiedByUser));
    }
    if(m_DeletedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedByUser")), m_DeletedByUser));
    }
    if(m_RejectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejection")), m_Rejection));
    }
}

bool OrganizationKyoDocument::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationId"))))
    {
        utility::string_t refVal_organizationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationId"))), refVal_organizationId );
        setOrganizationId(refVal_organizationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentName"))))
    {
        utility::string_t refVal_documentName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentName"))), refVal_documentName );
        setDocumentName(refVal_documentName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("storageUrl"))))
    {
        utility::string_t refVal_storageUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("storageUrl"))), refVal_storageUrl );
        setStorageUrl(refVal_storageUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uploadedAtUtc"))))
    {
        utility::datetime refVal_uploadedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uploadedAtUtc"))), refVal_uploadedAtUtc );
        setUploadedAtUtc(refVal_uploadedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("verifiedBy"))))
    {
        utility::string_t refVal_verifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("verifiedBy"))), refVal_verifiedBy );
        setVerifiedBy(refVal_verifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("verifiedAtUtc"))))
    {
        utility::datetime refVal_verifiedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("verifiedAtUtc"))), refVal_verifiedAtUtc );
        setVerifiedAtUtc(refVal_verifiedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedBy"))))
    {
        utility::string_t refVal_deletedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedBy"))), refVal_deletedBy );
        setDeletedBy(refVal_deletedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedAtUtc"))))
    {
        utility::datetime refVal_deletedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedAtUtc"))), refVal_deletedAtUtc );
        setDeletedAtUtc(refVal_deletedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization"))))
    {
        std::shared_ptr<Organization> refVal_organization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization"))), refVal_organization );
        setOrganization(refVal_organization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("verifiedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_verifiedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("verifiedByUser"))), refVal_verifiedByUser );
        setVerifiedByUser(refVal_verifiedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_deletedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedByUser"))), refVal_deletedByUser );
        setDeletedByUser(refVal_deletedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rejection"))))
    {
        std::shared_ptr<Rejection> refVal_rejection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejection"))), refVal_rejection );
        setRejection(refVal_rejection);
    }
    return ok;
}

utility::string_t OrganizationKyoDocument::getId() const
{
    return m_Id;
}

void OrganizationKyoDocument::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrganizationKyoDocument::idIsSet() const
{
    return m_IdIsSet;
}

void OrganizationKyoDocument::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrganizationKyoDocument::getOrganizationId() const
{
    return m_OrganizationId;
}

void OrganizationKyoDocument::setOrganizationId(const utility::string_t& value)
{
    m_OrganizationId = value;
    m_OrganizationIdIsSet = true;
}

bool OrganizationKyoDocument::organizationIdIsSet() const
{
    return m_OrganizationIdIsSet;
}

void OrganizationKyoDocument::unsetOrganizationId()
{
    m_OrganizationIdIsSet = false;
}
utility::string_t OrganizationKyoDocument::getDocumentName() const
{
    return m_DocumentName;
}

void OrganizationKyoDocument::setDocumentName(const utility::string_t& value)
{
    m_DocumentName = value;
    m_DocumentNameIsSet = true;
}

bool OrganizationKyoDocument::documentNameIsSet() const
{
    return m_DocumentNameIsSet;
}

void OrganizationKyoDocument::unsetDocumentName()
{
    m_DocumentNameIsSet = false;
}
utility::string_t OrganizationKyoDocument::getStorageUrl() const
{
    return m_StorageUrl;
}

void OrganizationKyoDocument::setStorageUrl(const utility::string_t& value)
{
    m_StorageUrl = value;
    m_StorageUrlIsSet = true;
}

bool OrganizationKyoDocument::storageUrlIsSet() const
{
    return m_StorageUrlIsSet;
}

void OrganizationKyoDocument::unsetStorageUrl()
{
    m_StorageUrlIsSet = false;
}
utility::datetime OrganizationKyoDocument::getUploadedAtUtc() const
{
    return m_UploadedAtUtc;
}

void OrganizationKyoDocument::setUploadedAtUtc(const utility::datetime& value)
{
    m_UploadedAtUtc = value;
    m_UploadedAtUtcIsSet = true;
}

bool OrganizationKyoDocument::uploadedAtUtcIsSet() const
{
    return m_UploadedAtUtcIsSet;
}

void OrganizationKyoDocument::unsetUploadedAtUtc()
{
    m_UploadedAtUtcIsSet = false;
}
utility::string_t OrganizationKyoDocument::getVerifiedBy() const
{
    return m_VerifiedBy;
}

void OrganizationKyoDocument::setVerifiedBy(const utility::string_t& value)
{
    m_VerifiedBy = value;
    m_VerifiedByIsSet = true;
}

bool OrganizationKyoDocument::verifiedByIsSet() const
{
    return m_VerifiedByIsSet;
}

void OrganizationKyoDocument::unsetVerifiedBy()
{
    m_VerifiedByIsSet = false;
}
utility::datetime OrganizationKyoDocument::getVerifiedAtUtc() const
{
    return m_VerifiedAtUtc;
}

void OrganizationKyoDocument::setVerifiedAtUtc(const utility::datetime& value)
{
    m_VerifiedAtUtc = value;
    m_VerifiedAtUtcIsSet = true;
}

bool OrganizationKyoDocument::verifiedAtUtcIsSet() const
{
    return m_VerifiedAtUtcIsSet;
}

void OrganizationKyoDocument::unsetVerifiedAtUtc()
{
    m_VerifiedAtUtcIsSet = false;
}
utility::string_t OrganizationKyoDocument::getDeletedBy() const
{
    return m_DeletedBy;
}

void OrganizationKyoDocument::setDeletedBy(const utility::string_t& value)
{
    m_DeletedBy = value;
    m_DeletedByIsSet = true;
}

bool OrganizationKyoDocument::deletedByIsSet() const
{
    return m_DeletedByIsSet;
}

void OrganizationKyoDocument::unsetDeletedBy()
{
    m_DeletedByIsSet = false;
}
utility::datetime OrganizationKyoDocument::getDeletedAtUtc() const
{
    return m_DeletedAtUtc;
}

void OrganizationKyoDocument::setDeletedAtUtc(const utility::datetime& value)
{
    m_DeletedAtUtc = value;
    m_DeletedAtUtcIsSet = true;
}

bool OrganizationKyoDocument::deletedAtUtcIsSet() const
{
    return m_DeletedAtUtcIsSet;
}

void OrganizationKyoDocument::unsetDeletedAtUtc()
{
    m_DeletedAtUtcIsSet = false;
}
std::shared_ptr<Organization> OrganizationKyoDocument::getOrganization() const
{
    return m_Organization;
}

void OrganizationKyoDocument::setOrganization(const std::shared_ptr<Organization>& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}

bool OrganizationKyoDocument::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void OrganizationKyoDocument::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
std::shared_ptr<ApplicationUser> OrganizationKyoDocument::getVerifiedByUser() const
{
    return m_VerifiedByUser;
}

void OrganizationKyoDocument::setVerifiedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_VerifiedByUser = value;
    m_VerifiedByUserIsSet = true;
}

bool OrganizationKyoDocument::verifiedByUserIsSet() const
{
    return m_VerifiedByUserIsSet;
}

void OrganizationKyoDocument::unsetVerifiedByUser()
{
    m_VerifiedByUserIsSet = false;
}
std::shared_ptr<ApplicationUser> OrganizationKyoDocument::getDeletedByUser() const
{
    return m_DeletedByUser;
}

void OrganizationKyoDocument::setDeletedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_DeletedByUser = value;
    m_DeletedByUserIsSet = true;
}

bool OrganizationKyoDocument::deletedByUserIsSet() const
{
    return m_DeletedByUserIsSet;
}

void OrganizationKyoDocument::unsetDeletedByUser()
{
    m_DeletedByUserIsSet = false;
}
std::shared_ptr<Rejection> OrganizationKyoDocument::getRejection() const
{
    return m_Rejection;
}

void OrganizationKyoDocument::setRejection(const std::shared_ptr<Rejection>& value)
{
    m_Rejection = value;
    m_RejectionIsSet = true;
}

bool OrganizationKyoDocument::rejectionIsSet() const
{
    return m_RejectionIsSet;
}

void OrganizationKyoDocument::unsetRejection()
{
    m_RejectionIsSet = false;
}
}
}


