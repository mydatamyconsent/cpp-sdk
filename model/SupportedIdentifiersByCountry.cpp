/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SupportedIdentifiersByCountry.h"

namespace mydatamyconsent {
namespace models {




SupportedIdentifiersByCountry::SupportedIdentifiersByCountry()
{
    m_Iso2 = utility::conversions::to_string_t("");
    m_Iso2IsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Flag = utility::conversions::to_string_t("");
    m_FlagIsSet = false;
    m_IndividualIdentifiersIsSet = false;
    m_OrganizationIdentifiersIsSet = false;
}

SupportedIdentifiersByCountry::~SupportedIdentifiersByCountry()
{
}

void SupportedIdentifiersByCountry::validate()
{
    // TODO: implement validation
}

web::json::value SupportedIdentifiersByCountry::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Iso2IsSet)
    {
        val[utility::conversions::to_string_t(U("iso2"))] = ModelBase::toJson(m_Iso2);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_FlagIsSet)
    {
        val[utility::conversions::to_string_t(U("flag"))] = ModelBase::toJson(m_Flag);
    }
    if(m_IndividualIdentifiersIsSet)
    {
        val[utility::conversions::to_string_t(U("individualIdentifiers"))] = ModelBase::toJson(m_IndividualIdentifiers);
    }
    if(m_OrganizationIdentifiersIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationIdentifiers"))] = ModelBase::toJson(m_OrganizationIdentifiers);
    }

    return val;
}

bool SupportedIdentifiersByCountry::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("iso2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("iso2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_iso2;
            ok &= ModelBase::fromJson(fieldValue, refVal_iso2);
            setIso2(refVal_iso2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flag"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flag")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_flag;
            ok &= ModelBase::fromJson(fieldValue, refVal_flag);
            setFlag(refVal_flag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("individualIdentifiers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("individualIdentifiers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SupportedIdentifier>> refVal_individualIdentifiers;
            ok &= ModelBase::fromJson(fieldValue, refVal_individualIdentifiers);
            setIndividualIdentifiers(refVal_individualIdentifiers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationIdentifiers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationIdentifiers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SupportedIdentifier>> refVal_organizationIdentifiers;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationIdentifiers);
            setOrganizationIdentifiers(refVal_organizationIdentifiers);
        }
    }
    return ok;
}

void SupportedIdentifiersByCountry::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Iso2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("iso2")), m_Iso2));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_FlagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flag")), m_Flag));
    }
    if(m_IndividualIdentifiersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("individualIdentifiers")), m_IndividualIdentifiers));
    }
    if(m_OrganizationIdentifiersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationIdentifiers")), m_OrganizationIdentifiers));
    }
}

bool SupportedIdentifiersByCountry::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("iso2"))))
    {
        utility::string_t refVal_iso2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("iso2"))), refVal_iso2 );
        setIso2(refVal_iso2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flag"))))
    {
        utility::string_t refVal_flag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flag"))), refVal_flag );
        setFlag(refVal_flag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("individualIdentifiers"))))
    {
        std::vector<std::shared_ptr<SupportedIdentifier>> refVal_individualIdentifiers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("individualIdentifiers"))), refVal_individualIdentifiers );
        setIndividualIdentifiers(refVal_individualIdentifiers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationIdentifiers"))))
    {
        std::vector<std::shared_ptr<SupportedIdentifier>> refVal_organizationIdentifiers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationIdentifiers"))), refVal_organizationIdentifiers );
        setOrganizationIdentifiers(refVal_organizationIdentifiers);
    }
    return ok;
}

utility::string_t SupportedIdentifiersByCountry::getIso2() const
{
    return m_Iso2;
}

void SupportedIdentifiersByCountry::setIso2(const utility::string_t& value)
{
    m_Iso2 = value;
    m_Iso2IsSet = true;
}

bool SupportedIdentifiersByCountry::iso2IsSet() const
{
    return m_Iso2IsSet;
}

void SupportedIdentifiersByCountry::unsetIso2()
{
    m_Iso2IsSet = false;
}
utility::string_t SupportedIdentifiersByCountry::getName() const
{
    return m_Name;
}

void SupportedIdentifiersByCountry::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SupportedIdentifiersByCountry::nameIsSet() const
{
    return m_NameIsSet;
}

void SupportedIdentifiersByCountry::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t SupportedIdentifiersByCountry::getFlag() const
{
    return m_Flag;
}

void SupportedIdentifiersByCountry::setFlag(const utility::string_t& value)
{
    m_Flag = value;
    m_FlagIsSet = true;
}

bool SupportedIdentifiersByCountry::flagIsSet() const
{
    return m_FlagIsSet;
}

void SupportedIdentifiersByCountry::unsetFlag()
{
    m_FlagIsSet = false;
}
std::vector<std::shared_ptr<SupportedIdentifier>>& SupportedIdentifiersByCountry::getIndividualIdentifiers()
{
    return m_IndividualIdentifiers;
}

void SupportedIdentifiersByCountry::setIndividualIdentifiers(const std::vector<std::shared_ptr<SupportedIdentifier>>& value)
{
    m_IndividualIdentifiers = value;
    m_IndividualIdentifiersIsSet = true;
}

bool SupportedIdentifiersByCountry::individualIdentifiersIsSet() const
{
    return m_IndividualIdentifiersIsSet;
}

void SupportedIdentifiersByCountry::unsetIndividualIdentifiers()
{
    m_IndividualIdentifiersIsSet = false;
}
std::vector<std::shared_ptr<SupportedIdentifier>>& SupportedIdentifiersByCountry::getOrganizationIdentifiers()
{
    return m_OrganizationIdentifiers;
}

void SupportedIdentifiersByCountry::setOrganizationIdentifiers(const std::vector<std::shared_ptr<SupportedIdentifier>>& value)
{
    m_OrganizationIdentifiers = value;
    m_OrganizationIdentifiersIsSet = true;
}

bool SupportedIdentifiersByCountry::organizationIdentifiersIsSet() const
{
    return m_OrganizationIdentifiersIsSet;
}

void SupportedIdentifiersByCountry::unsetOrganizationIdentifiers()
{
    m_OrganizationIdentifiersIsSet = false;
}
}
}


