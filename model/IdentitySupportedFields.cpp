/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IdentitySupportedFields.h"

namespace mydatamyconsent {
namespace models {




IdentitySupportedFields::IdentitySupportedFields()
{
    m_Icon = utility::conversions::to_string_t("");
    m_IconIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Key = utility::conversions::to_string_t("");
    m_KeyIsSet = false;
    m_DataType = utility::conversions::to_string_t("");
    m_DataTypeIsSet = false;
}

IdentitySupportedFields::~IdentitySupportedFields()
{
}

void IdentitySupportedFields::validate()
{
    // TODO: implement validation
}

web::json::value IdentitySupportedFields::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IconIsSet)
    {
        val[utility::conversions::to_string_t(U("icon"))] = ModelBase::toJson(m_Icon);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_KeyIsSet)
    {
        val[utility::conversions::to_string_t(U("key"))] = ModelBase::toJson(m_Key);
    }
    if(m_DataTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("dataType"))] = ModelBase::toJson(m_DataType);
    }

    return val;
}

bool IdentitySupportedFields::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_icon);
            setIcon(refVal_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_key;
            ok &= ModelBase::fromJson(fieldValue, refVal_key);
            setKey(refVal_key);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dataType;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataType);
            setDataType(refVal_dataType);
        }
    }
    return ok;
}

void IdentitySupportedFields::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("icon")), m_Icon));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_KeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("key")), m_Key));
    }
    if(m_DataTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataType")), m_DataType));
    }
}

bool IdentitySupportedFields::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("icon"))))
    {
        utility::string_t refVal_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("icon"))), refVal_icon );
        setIcon(refVal_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("key"))))
    {
        utility::string_t refVal_key;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("key"))), refVal_key );
        setKey(refVal_key);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataType"))))
    {
        utility::string_t refVal_dataType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataType"))), refVal_dataType );
        setDataType(refVal_dataType);
    }
    return ok;
}

utility::string_t IdentitySupportedFields::getIcon() const
{
    return m_Icon;
}

void IdentitySupportedFields::setIcon(const utility::string_t& value)
{
    m_Icon = value;
    m_IconIsSet = true;
}

bool IdentitySupportedFields::iconIsSet() const
{
    return m_IconIsSet;
}

void IdentitySupportedFields::unsetIcon()
{
    m_IconIsSet = false;
}
utility::string_t IdentitySupportedFields::getTitle() const
{
    return m_Title;
}

void IdentitySupportedFields::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool IdentitySupportedFields::titleIsSet() const
{
    return m_TitleIsSet;
}

void IdentitySupportedFields::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t IdentitySupportedFields::getDescription() const
{
    return m_Description;
}

void IdentitySupportedFields::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool IdentitySupportedFields::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void IdentitySupportedFields::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t IdentitySupportedFields::getKey() const
{
    return m_Key;
}

void IdentitySupportedFields::setKey(const utility::string_t& value)
{
    m_Key = value;
    m_KeyIsSet = true;
}

bool IdentitySupportedFields::keyIsSet() const
{
    return m_KeyIsSet;
}

void IdentitySupportedFields::unsetKey()
{
    m_KeyIsSet = false;
}
utility::string_t IdentitySupportedFields::getDataType() const
{
    return m_DataType;
}

void IdentitySupportedFields::setDataType(const utility::string_t& value)
{
    m_DataType = value;
    m_DataTypeIsSet = true;
}

bool IdentitySupportedFields::dataTypeIsSet() const
{
    return m_DataTypeIsSet;
}

void IdentitySupportedFields::unsetDataType()
{
    m_DataTypeIsSet = false;
}
}
}


