/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsentDocumentsDto.h"

namespace mydatamyconsent {
namespace models {




DataConsentDocumentsDto::DataConsentDocumentsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_DocumentsIsSet = false;
    m_ApprovedDocumentsIsSet = false;
}

DataConsentDocumentsDto::~DataConsentDocumentsDto()
{
}

void DataConsentDocumentsDto::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentDocumentsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DocumentsIsSet)
    {
        val[utility::conversions::to_string_t(U("documents"))] = ModelBase::toJson(m_Documents);
    }
    if(m_ApprovedDocumentsIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedDocuments"))] = ModelBase::toJson(m_ApprovedDocuments);
    }

    return val;
}

bool DataConsentDocumentsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documents")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Document>> refVal_documents;
            ok &= ModelBase::fromJson(fieldValue, refVal_documents);
            setDocuments(refVal_documents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedDocuments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedDocuments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DataConsentRequestedDocument>> refVal_approvedDocuments;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvedDocuments);
            setApprovedDocuments(refVal_approvedDocuments);
        }
    }
    return ok;
}

void DataConsentDocumentsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documents")), m_Documents));
    }
    if(m_ApprovedDocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedDocuments")), m_ApprovedDocuments));
    }
}

bool DataConsentDocumentsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documents"))))
    {
        std::vector<std::shared_ptr<Document>> refVal_documents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documents"))), refVal_documents );
        setDocuments(refVal_documents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedDocuments"))))
    {
        std::vector<std::shared_ptr<DataConsentRequestedDocument>> refVal_approvedDocuments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedDocuments"))), refVal_approvedDocuments );
        setApprovedDocuments(refVal_approvedDocuments);
    }
    return ok;
}

utility::string_t DataConsentDocumentsDto::getId() const
{
    return m_Id;
}

void DataConsentDocumentsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DataConsentDocumentsDto::idIsSet() const
{
    return m_IdIsSet;
}

void DataConsentDocumentsDto::unsetId()
{
    m_IdIsSet = false;
}
std::vector<std::shared_ptr<Document>>& DataConsentDocumentsDto::getDocuments()
{
    return m_Documents;
}

void DataConsentDocumentsDto::setDocuments(const std::vector<std::shared_ptr<Document>>& value)
{
    m_Documents = value;
    m_DocumentsIsSet = true;
}

bool DataConsentDocumentsDto::documentsIsSet() const
{
    return m_DocumentsIsSet;
}

void DataConsentDocumentsDto::unsetDocuments()
{
    m_DocumentsIsSet = false;
}
std::vector<std::shared_ptr<DataConsentRequestedDocument>>& DataConsentDocumentsDto::getApprovedDocuments()
{
    return m_ApprovedDocuments;
}

void DataConsentDocumentsDto::setApprovedDocuments(const std::vector<std::shared_ptr<DataConsentRequestedDocument>>& value)
{
    m_ApprovedDocuments = value;
    m_ApprovedDocumentsIsSet = true;
}

bool DataConsentDocumentsDto::approvedDocumentsIsSet() const
{
    return m_ApprovedDocumentsIsSet;
}

void DataConsentDocumentsDto::unsetApprovedDocuments()
{
    m_ApprovedDocumentsIsSet = false;
}
}
}


