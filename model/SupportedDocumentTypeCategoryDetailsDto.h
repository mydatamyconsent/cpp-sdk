/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SupportedDocumentTypeCategoryDetailsDto.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_SupportedDocumentTypeCategoryDetailsDto_H_
#define MYDATAMYCONSENT_MODELS_SupportedDocumentTypeCategoryDetailsDto_H_


#include "ModelBase.h"

#include "model/SupportedDocumentDetailsDto.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "model/SupportedDocumentProviderDetailsDto.h"

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  SupportedDocumentTypeCategoryDetailsDto
    : public ModelBase
{
public:
    SupportedDocumentTypeCategoryDetailsDto();
    virtual ~SupportedDocumentTypeCategoryDetailsDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SupportedDocumentTypeCategoryDetailsDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentTypeCategoryId() const;
    bool documentTypeCategoryIdIsSet() const;
    void unsetDocumentTypeCategoryId();

    void setDocumentTypeCategoryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentTypeCategoryName() const;
    bool documentTypeCategoryNameIsSet() const;
    void unsetDocumentTypeCategoryName();

    void setDocumentTypeCategoryName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SupportedDocumentDetailsDto>>& getSupportedDocuments();
    bool supportedDocumentsIsSet() const;
    void unsetSupportedDocuments();

    void setSupportedDocuments(const std::vector<std::shared_ptr<SupportedDocumentDetailsDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SupportedDocumentProviderDetailsDto>>& getSupportedDocumentProviderDetails();
    bool supportedDocumentProviderDetailsIsSet() const;
    void unsetSupportedDocumentProviderDetails();

    void setSupportedDocumentProviderDetails(const std::vector<std::shared_ptr<SupportedDocumentProviderDetailsDto>>& value);


protected:
    utility::string_t m_DocumentTypeCategoryId;
    bool m_DocumentTypeCategoryIdIsSet;
    utility::string_t m_DocumentTypeCategoryName;
    bool m_DocumentTypeCategoryNameIsSet;
    std::vector<std::shared_ptr<SupportedDocumentDetailsDto>> m_SupportedDocuments;
    bool m_SupportedDocumentsIsSet;
    std::vector<std::shared_ptr<SupportedDocumentProviderDetailsDto>> m_SupportedDocumentProviderDetails;
    bool m_SupportedDocumentProviderDetailsIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_SupportedDocumentTypeCategoryDetailsDto_H_ */
