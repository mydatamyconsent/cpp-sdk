/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrganizationType.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_OrganizationType_H_
#define MYDATAMYCONSENT_MODELS_OrganizationType_H_


#include "ModelBase.h"

#include "model/Country.h"
#include <cpprest/details/basic_types.h>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  OrganizationType
    : public ModelBase
{
public:
    OrganizationType();
    virtual ~OrganizationType();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrganizationType members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountryId() const;
    bool countryIdIsSet() const;
    void unsetCountryId();

    void setCountryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRTypeName() const;
    bool rTypeNameIsSet() const;
    void unsetr_typeName();

    void setRTypeName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElfCode() const;
    bool elfCodeIsSet() const;
    void unsetElfCode();

    void setElfCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Country> getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const std::shared_ptr<Country>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_CountryId;
    bool m_CountryIdIsSet;
    utility::string_t m_r_typeName;
    bool m_r_typeNameIsSet;
    utility::string_t m_ElfCode;
    bool m_ElfCodeIsSet;
    std::shared_ptr<Country> m_Country;
    bool m_CountryIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_OrganizationType_H_ */
