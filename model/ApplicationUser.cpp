/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ApplicationUser.h"

namespace mydatamyconsent {
namespace models {




ApplicationUser::ApplicationUser()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserName = utility::conversions::to_string_t("");
    m_UserNameIsSet = false;
    m_NormalizedUserName = utility::conversions::to_string_t("");
    m_NormalizedUserNameIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_NormalizedEmail = utility::conversions::to_string_t("");
    m_NormalizedEmailIsSet = false;
    m_EmailConfirmed = false;
    m_EmailConfirmedIsSet = false;
    m_PasswordHash = utility::conversions::to_string_t("");
    m_PasswordHashIsSet = false;
    m_SecurityStamp = utility::conversions::to_string_t("");
    m_SecurityStampIsSet = false;
    m_ConcurrencyStamp = utility::conversions::to_string_t("");
    m_ConcurrencyStampIsSet = false;
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_PhoneNumberConfirmed = false;
    m_PhoneNumberConfirmedIsSet = false;
    m_TwoFactorEnabled = false;
    m_TwoFactorEnabledIsSet = false;
    m_LockoutEnd = utility::datetime();
    m_LockoutEndIsSet = false;
    m_LockoutEnabled = false;
    m_LockoutEnabledIsSet = false;
    m_AccessFailedCount = 0;
    m_AccessFailedCountIsSet = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_MiddleName = utility::conversions::to_string_t("");
    m_MiddleNameIsSet = false;
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_GenderIsSet = false;
    m_DateOfBirth = utility::datetime();
    m_DateOfBirthIsSet = false;
    m_CountryId = utility::conversions::to_string_t("");
    m_CountryIdIsSet = false;
    m_PostCode = utility::conversions::to_string_t("");
    m_PostCodeIsSet = false;
    m_ReferredBy = utility::conversions::to_string_t("");
    m_ReferredByIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_ThemeIsSet = false;
    m_Designation = utility::conversions::to_string_t("");
    m_DesignationIsSet = false;
    m_IsMarkedForDeletion = false;
    m_IsMarkedForDeletionIsSet = false;
    m_HardDeleteDate = utility::datetime();
    m_HardDeleteDateIsSet = false;
    m_SecurityPin = utility::conversions::to_string_t("");
    m_SecurityPinIsSet = false;
    m_PhotoUrl = utility::conversions::to_string_t("");
    m_PhotoUrlIsSet = false;
    m_ReferralCode = utility::conversions::to_string_t("");
    m_ReferralCodeIsSet = false;
    m_RecoveryToken = utility::conversions::to_string_t("");
    m_RecoveryTokenIsSet = false;
    m_DigiLockerLastSyncDate = utility::datetime();
    m_DigiLockerLastSyncDateIsSet = false;
    m_RefreshTokensIsSet = false;
    m_CountryIsSet = false;
    m_ReferredByUserIsSet = false;
}

ApplicationUser::~ApplicationUser()
{
}

void ApplicationUser::validate()
{
    // TODO: implement validation
}

web::json::value ApplicationUser::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserNameIsSet)
    {
        val[utility::conversions::to_string_t(U("userName"))] = ModelBase::toJson(m_UserName);
    }
    if(m_NormalizedUserNameIsSet)
    {
        val[utility::conversions::to_string_t(U("normalizedUserName"))] = ModelBase::toJson(m_NormalizedUserName);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_NormalizedEmailIsSet)
    {
        val[utility::conversions::to_string_t(U("normalizedEmail"))] = ModelBase::toJson(m_NormalizedEmail);
    }
    if(m_EmailConfirmedIsSet)
    {
        val[utility::conversions::to_string_t(U("emailConfirmed"))] = ModelBase::toJson(m_EmailConfirmed);
    }
    if(m_PasswordHashIsSet)
    {
        val[utility::conversions::to_string_t(U("passwordHash"))] = ModelBase::toJson(m_PasswordHash);
    }
    if(m_SecurityStampIsSet)
    {
        val[utility::conversions::to_string_t(U("securityStamp"))] = ModelBase::toJson(m_SecurityStamp);
    }
    if(m_ConcurrencyStampIsSet)
    {
        val[utility::conversions::to_string_t(U("concurrencyStamp"))] = ModelBase::toJson(m_ConcurrencyStamp);
    }
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumber"))] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_PhoneNumberConfirmedIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumberConfirmed"))] = ModelBase::toJson(m_PhoneNumberConfirmed);
    }
    if(m_TwoFactorEnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("twoFactorEnabled"))] = ModelBase::toJson(m_TwoFactorEnabled);
    }
    if(m_LockoutEndIsSet)
    {
        val[utility::conversions::to_string_t(U("lockoutEnd"))] = ModelBase::toJson(m_LockoutEnd);
    }
    if(m_LockoutEnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("lockoutEnabled"))] = ModelBase::toJson(m_LockoutEnabled);
    }
    if(m_AccessFailedCountIsSet)
    {
        val[utility::conversions::to_string_t(U("accessFailedCount"))] = ModelBase::toJson(m_AccessFailedCount);
    }
    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t(U("firstName"))] = ModelBase::toJson(m_FirstName);
    }
    if(m_MiddleNameIsSet)
    {
        val[utility::conversions::to_string_t(U("middleName"))] = ModelBase::toJson(m_MiddleName);
    }
    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t(U("lastName"))] = ModelBase::toJson(m_LastName);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fullName"))] = ModelBase::toJson(m_FullName);
    }
    if(m_GenderIsSet)
    {
        val[utility::conversions::to_string_t(U("gender"))] = ModelBase::toJson(m_Gender);
    }
    if(m_DateOfBirthIsSet)
    {
        val[utility::conversions::to_string_t(U("dateOfBirth"))] = ModelBase::toJson(m_DateOfBirth);
    }
    if(m_CountryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("countryId"))] = ModelBase::toJson(m_CountryId);
    }
    if(m_PostCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("postCode"))] = ModelBase::toJson(m_PostCode);
    }
    if(m_ReferredByIsSet)
    {
        val[utility::conversions::to_string_t(U("referredBy"))] = ModelBase::toJson(m_ReferredBy);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_ThemeIsSet)
    {
        val[utility::conversions::to_string_t(U("theme"))] = ModelBase::toJson(m_Theme);
    }
    if(m_DesignationIsSet)
    {
        val[utility::conversions::to_string_t(U("designation"))] = ModelBase::toJson(m_Designation);
    }
    if(m_IsMarkedForDeletionIsSet)
    {
        val[utility::conversions::to_string_t(U("isMarkedForDeletion"))] = ModelBase::toJson(m_IsMarkedForDeletion);
    }
    if(m_HardDeleteDateIsSet)
    {
        val[utility::conversions::to_string_t(U("hardDeleteDate"))] = ModelBase::toJson(m_HardDeleteDate);
    }
    if(m_SecurityPinIsSet)
    {
        val[utility::conversions::to_string_t(U("securityPin"))] = ModelBase::toJson(m_SecurityPin);
    }
    if(m_PhotoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("photoUrl"))] = ModelBase::toJson(m_PhotoUrl);
    }
    if(m_ReferralCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("referralCode"))] = ModelBase::toJson(m_ReferralCode);
    }
    if(m_RecoveryTokenIsSet)
    {
        val[utility::conversions::to_string_t(U("recoveryToken"))] = ModelBase::toJson(m_RecoveryToken);
    }
    if(m_DigiLockerLastSyncDateIsSet)
    {
        val[utility::conversions::to_string_t(U("digiLockerLastSyncDate"))] = ModelBase::toJson(m_DigiLockerLastSyncDate);
    }
    if(m_RefreshTokensIsSet)
    {
        val[utility::conversions::to_string_t(U("refreshTokens"))] = ModelBase::toJson(m_RefreshTokens);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_ReferredByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("referredByUser"))] = ModelBase::toJson(m_ReferredByUser);
    }

    return val;
}

bool ApplicationUser::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userName;
            ok &= ModelBase::fromJson(fieldValue, refVal_userName);
            setUserName(refVal_userName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("normalizedUserName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("normalizedUserName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_normalizedUserName;
            ok &= ModelBase::fromJson(fieldValue, refVal_normalizedUserName);
            setNormalizedUserName(refVal_normalizedUserName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("normalizedEmail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("normalizedEmail")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_normalizedEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_normalizedEmail);
            setNormalizedEmail(refVal_normalizedEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("emailConfirmed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailConfirmed")));
        if(!fieldValue.is_null())
        {
            bool refVal_emailConfirmed;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailConfirmed);
            setEmailConfirmed(refVal_emailConfirmed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("passwordHash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("passwordHash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_passwordHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_passwordHash);
            setPasswordHash(refVal_passwordHash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("securityStamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("securityStamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_securityStamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_securityStamp);
            setSecurityStamp(refVal_securityStamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("concurrencyStamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("concurrencyStamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_concurrencyStamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_concurrencyStamp);
            setConcurrencyStamp(refVal_concurrencyStamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_phoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_phoneNumber);
            setPhoneNumber(refVal_phoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumberConfirmed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumberConfirmed")));
        if(!fieldValue.is_null())
        {
            bool refVal_phoneNumberConfirmed;
            ok &= ModelBase::fromJson(fieldValue, refVal_phoneNumberConfirmed);
            setPhoneNumberConfirmed(refVal_phoneNumberConfirmed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("twoFactorEnabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("twoFactorEnabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_twoFactorEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_twoFactorEnabled);
            setTwoFactorEnabled(refVal_twoFactorEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lockoutEnd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lockoutEnd")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_lockoutEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_lockoutEnd);
            setLockoutEnd(refVal_lockoutEnd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lockoutEnabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lockoutEnabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_lockoutEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_lockoutEnabled);
            setLockoutEnabled(refVal_lockoutEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accessFailedCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accessFailedCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_accessFailedCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_accessFailedCount);
            setAccessFailedCount(refVal_accessFailedCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("firstName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("firstName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_firstName;
            ok &= ModelBase::fromJson(fieldValue, refVal_firstName);
            setFirstName(refVal_firstName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("middleName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("middleName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_middleName;
            ok &= ModelBase::fromJson(fieldValue, refVal_middleName);
            setMiddleName(refVal_middleName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_lastName;
            ok &= ModelBase::fromJson(fieldValue, refVal_lastName);
            setLastName(refVal_lastName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fullName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fullName;
            ok &= ModelBase::fromJson(fieldValue, refVal_fullName);
            setFullName(refVal_fullName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gender"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gender")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Gender> refVal_gender;
            ok &= ModelBase::fromJson(fieldValue, refVal_gender);
            setGender(refVal_gender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateOfBirth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateOfBirth")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_dateOfBirth;
            ok &= ModelBase::fromJson(fieldValue, refVal_dateOfBirth);
            setDateOfBirth(refVal_dateOfBirth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_countryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryId);
            setCountryId(refVal_countryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("postCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("postCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_postCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_postCode);
            setPostCode(refVal_postCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("referredBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("referredBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_referredBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_referredBy);
            setReferredBy(refVal_referredBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_language;
            ok &= ModelBase::fromJson(fieldValue, refVal_language);
            setLanguage(refVal_language);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("theme"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("theme")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Theme> refVal_theme;
            ok &= ModelBase::fromJson(fieldValue, refVal_theme);
            setTheme(refVal_theme);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("designation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("designation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_designation;
            ok &= ModelBase::fromJson(fieldValue, refVal_designation);
            setDesignation(refVal_designation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isMarkedForDeletion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isMarkedForDeletion")));
        if(!fieldValue.is_null())
        {
            bool refVal_isMarkedForDeletion;
            ok &= ModelBase::fromJson(fieldValue, refVal_isMarkedForDeletion);
            setIsMarkedForDeletion(refVal_isMarkedForDeletion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hardDeleteDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hardDeleteDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_hardDeleteDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_hardDeleteDate);
            setHardDeleteDate(refVal_hardDeleteDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("securityPin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("securityPin")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_securityPin;
            ok &= ModelBase::fromJson(fieldValue, refVal_securityPin);
            setSecurityPin(refVal_securityPin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("photoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("photoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_photoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_photoUrl);
            setPhotoUrl(refVal_photoUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("referralCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("referralCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_referralCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_referralCode);
            setReferralCode(refVal_referralCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recoveryToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recoveryToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_recoveryToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_recoveryToken);
            setRecoveryToken(refVal_recoveryToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("digiLockerLastSyncDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("digiLockerLastSyncDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_digiLockerLastSyncDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_digiLockerLastSyncDate);
            setDigiLockerLastSyncDate(refVal_digiLockerLastSyncDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("refreshTokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("refreshTokens")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RefreshToken>> refVal_refreshTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_refreshTokens);
            setRefreshTokens(refVal_refreshTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> refVal_country;
            ok &= ModelBase::fromJson(fieldValue, refVal_country);
            setCountry(refVal_country);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("referredByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("referredByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_referredByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_referredByUser);
            setReferredByUser(refVal_referredByUser);
        }
    }
    return ok;
}

void ApplicationUser::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userName")), m_UserName));
    }
    if(m_NormalizedUserNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("normalizedUserName")), m_NormalizedUserName));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_Email));
    }
    if(m_NormalizedEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("normalizedEmail")), m_NormalizedEmail));
    }
    if(m_EmailConfirmedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailConfirmed")), m_EmailConfirmed));
    }
    if(m_PasswordHashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("passwordHash")), m_PasswordHash));
    }
    if(m_SecurityStampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("securityStamp")), m_SecurityStamp));
    }
    if(m_ConcurrencyStampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("concurrencyStamp")), m_ConcurrencyStamp));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumber")), m_PhoneNumber));
    }
    if(m_PhoneNumberConfirmedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumberConfirmed")), m_PhoneNumberConfirmed));
    }
    if(m_TwoFactorEnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("twoFactorEnabled")), m_TwoFactorEnabled));
    }
    if(m_LockoutEndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lockoutEnd")), m_LockoutEnd));
    }
    if(m_LockoutEnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lockoutEnabled")), m_LockoutEnabled));
    }
    if(m_AccessFailedCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accessFailedCount")), m_AccessFailedCount));
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("firstName")), m_FirstName));
    }
    if(m_MiddleNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("middleName")), m_MiddleName));
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastName")), m_LastName));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullName")), m_FullName));
    }
    if(m_GenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gender")), m_Gender));
    }
    if(m_DateOfBirthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateOfBirth")), m_DateOfBirth));
    }
    if(m_CountryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryId")), m_CountryId));
    }
    if(m_PostCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("postCode")), m_PostCode));
    }
    if(m_ReferredByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("referredBy")), m_ReferredBy));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_ThemeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("theme")), m_Theme));
    }
    if(m_DesignationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("designation")), m_Designation));
    }
    if(m_IsMarkedForDeletionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isMarkedForDeletion")), m_IsMarkedForDeletion));
    }
    if(m_HardDeleteDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hardDeleteDate")), m_HardDeleteDate));
    }
    if(m_SecurityPinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("securityPin")), m_SecurityPin));
    }
    if(m_PhotoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("photoUrl")), m_PhotoUrl));
    }
    if(m_ReferralCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("referralCode")), m_ReferralCode));
    }
    if(m_RecoveryTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recoveryToken")), m_RecoveryToken));
    }
    if(m_DigiLockerLastSyncDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("digiLockerLastSyncDate")), m_DigiLockerLastSyncDate));
    }
    if(m_RefreshTokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("refreshTokens")), m_RefreshTokens));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_ReferredByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("referredByUser")), m_ReferredByUser));
    }
}

bool ApplicationUser::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userName"))))
    {
        utility::string_t refVal_userName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userName"))), refVal_userName );
        setUserName(refVal_userName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("normalizedUserName"))))
    {
        utility::string_t refVal_normalizedUserName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("normalizedUserName"))), refVal_normalizedUserName );
        setNormalizedUserName(refVal_normalizedUserName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("normalizedEmail"))))
    {
        utility::string_t refVal_normalizedEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("normalizedEmail"))), refVal_normalizedEmail );
        setNormalizedEmail(refVal_normalizedEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("emailConfirmed"))))
    {
        bool refVal_emailConfirmed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailConfirmed"))), refVal_emailConfirmed );
        setEmailConfirmed(refVal_emailConfirmed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("passwordHash"))))
    {
        utility::string_t refVal_passwordHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("passwordHash"))), refVal_passwordHash );
        setPasswordHash(refVal_passwordHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("securityStamp"))))
    {
        utility::string_t refVal_securityStamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("securityStamp"))), refVal_securityStamp );
        setSecurityStamp(refVal_securityStamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("concurrencyStamp"))))
    {
        utility::string_t refVal_concurrencyStamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("concurrencyStamp"))), refVal_concurrencyStamp );
        setConcurrencyStamp(refVal_concurrencyStamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        utility::string_t refVal_phoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumber"))), refVal_phoneNumber );
        setPhoneNumber(refVal_phoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumberConfirmed"))))
    {
        bool refVal_phoneNumberConfirmed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumberConfirmed"))), refVal_phoneNumberConfirmed );
        setPhoneNumberConfirmed(refVal_phoneNumberConfirmed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("twoFactorEnabled"))))
    {
        bool refVal_twoFactorEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("twoFactorEnabled"))), refVal_twoFactorEnabled );
        setTwoFactorEnabled(refVal_twoFactorEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lockoutEnd"))))
    {
        utility::datetime refVal_lockoutEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lockoutEnd"))), refVal_lockoutEnd );
        setLockoutEnd(refVal_lockoutEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lockoutEnabled"))))
    {
        bool refVal_lockoutEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lockoutEnabled"))), refVal_lockoutEnabled );
        setLockoutEnabled(refVal_lockoutEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accessFailedCount"))))
    {
        int32_t refVal_accessFailedCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accessFailedCount"))), refVal_accessFailedCount );
        setAccessFailedCount(refVal_accessFailedCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("firstName"))))
    {
        utility::string_t refVal_firstName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("firstName"))), refVal_firstName );
        setFirstName(refVal_firstName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("middleName"))))
    {
        utility::string_t refVal_middleName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("middleName"))), refVal_middleName );
        setMiddleName(refVal_middleName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastName"))))
    {
        utility::string_t refVal_lastName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastName"))), refVal_lastName );
        setLastName(refVal_lastName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fullName"))))
    {
        utility::string_t refVal_fullName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullName"))), refVal_fullName );
        setFullName(refVal_fullName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gender"))))
    {
        std::shared_ptr<Gender> refVal_gender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gender"))), refVal_gender );
        setGender(refVal_gender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateOfBirth"))))
    {
        utility::datetime refVal_dateOfBirth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateOfBirth"))), refVal_dateOfBirth );
        setDateOfBirth(refVal_dateOfBirth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryId"))))
    {
        utility::string_t refVal_countryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryId"))), refVal_countryId );
        setCountryId(refVal_countryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("postCode"))))
    {
        utility::string_t refVal_postCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("postCode"))), refVal_postCode );
        setPostCode(refVal_postCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("referredBy"))))
    {
        utility::string_t refVal_referredBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("referredBy"))), refVal_referredBy );
        setReferredBy(refVal_referredBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_language;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_language );
        setLanguage(refVal_language);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("theme"))))
    {
        std::shared_ptr<Theme> refVal_theme;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("theme"))), refVal_theme );
        setTheme(refVal_theme);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("designation"))))
    {
        utility::string_t refVal_designation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("designation"))), refVal_designation );
        setDesignation(refVal_designation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isMarkedForDeletion"))))
    {
        bool refVal_isMarkedForDeletion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isMarkedForDeletion"))), refVal_isMarkedForDeletion );
        setIsMarkedForDeletion(refVal_isMarkedForDeletion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hardDeleteDate"))))
    {
        utility::datetime refVal_hardDeleteDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hardDeleteDate"))), refVal_hardDeleteDate );
        setHardDeleteDate(refVal_hardDeleteDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("securityPin"))))
    {
        utility::string_t refVal_securityPin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("securityPin"))), refVal_securityPin );
        setSecurityPin(refVal_securityPin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("photoUrl"))))
    {
        utility::string_t refVal_photoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("photoUrl"))), refVal_photoUrl );
        setPhotoUrl(refVal_photoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("referralCode"))))
    {
        utility::string_t refVal_referralCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("referralCode"))), refVal_referralCode );
        setReferralCode(refVal_referralCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recoveryToken"))))
    {
        utility::string_t refVal_recoveryToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recoveryToken"))), refVal_recoveryToken );
        setRecoveryToken(refVal_recoveryToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("digiLockerLastSyncDate"))))
    {
        utility::datetime refVal_digiLockerLastSyncDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("digiLockerLastSyncDate"))), refVal_digiLockerLastSyncDate );
        setDigiLockerLastSyncDate(refVal_digiLockerLastSyncDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("refreshTokens"))))
    {
        std::vector<std::shared_ptr<RefreshToken>> refVal_refreshTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("refreshTokens"))), refVal_refreshTokens );
        setRefreshTokens(refVal_refreshTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        std::shared_ptr<Country> refVal_country;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_country );
        setCountry(refVal_country);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("referredByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_referredByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("referredByUser"))), refVal_referredByUser );
        setReferredByUser(refVal_referredByUser);
    }
    return ok;
}

utility::string_t ApplicationUser::getId() const
{
    return m_Id;
}

void ApplicationUser::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ApplicationUser::idIsSet() const
{
    return m_IdIsSet;
}

void ApplicationUser::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ApplicationUser::getUserName() const
{
    return m_UserName;
}

void ApplicationUser::setUserName(const utility::string_t& value)
{
    m_UserName = value;
    m_UserNameIsSet = true;
}

bool ApplicationUser::userNameIsSet() const
{
    return m_UserNameIsSet;
}

void ApplicationUser::unsetUserName()
{
    m_UserNameIsSet = false;
}
utility::string_t ApplicationUser::getNormalizedUserName() const
{
    return m_NormalizedUserName;
}

void ApplicationUser::setNormalizedUserName(const utility::string_t& value)
{
    m_NormalizedUserName = value;
    m_NormalizedUserNameIsSet = true;
}

bool ApplicationUser::normalizedUserNameIsSet() const
{
    return m_NormalizedUserNameIsSet;
}

void ApplicationUser::unsetNormalizedUserName()
{
    m_NormalizedUserNameIsSet = false;
}
utility::string_t ApplicationUser::getEmail() const
{
    return m_Email;
}

void ApplicationUser::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool ApplicationUser::emailIsSet() const
{
    return m_EmailIsSet;
}

void ApplicationUser::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t ApplicationUser::getNormalizedEmail() const
{
    return m_NormalizedEmail;
}

void ApplicationUser::setNormalizedEmail(const utility::string_t& value)
{
    m_NormalizedEmail = value;
    m_NormalizedEmailIsSet = true;
}

bool ApplicationUser::normalizedEmailIsSet() const
{
    return m_NormalizedEmailIsSet;
}

void ApplicationUser::unsetNormalizedEmail()
{
    m_NormalizedEmailIsSet = false;
}
bool ApplicationUser::isEmailConfirmed() const
{
    return m_EmailConfirmed;
}

void ApplicationUser::setEmailConfirmed(bool value)
{
    m_EmailConfirmed = value;
    m_EmailConfirmedIsSet = true;
}

bool ApplicationUser::emailConfirmedIsSet() const
{
    return m_EmailConfirmedIsSet;
}

void ApplicationUser::unsetEmailConfirmed()
{
    m_EmailConfirmedIsSet = false;
}
utility::string_t ApplicationUser::getPasswordHash() const
{
    return m_PasswordHash;
}

void ApplicationUser::setPasswordHash(const utility::string_t& value)
{
    m_PasswordHash = value;
    m_PasswordHashIsSet = true;
}

bool ApplicationUser::passwordHashIsSet() const
{
    return m_PasswordHashIsSet;
}

void ApplicationUser::unsetPasswordHash()
{
    m_PasswordHashIsSet = false;
}
utility::string_t ApplicationUser::getSecurityStamp() const
{
    return m_SecurityStamp;
}

void ApplicationUser::setSecurityStamp(const utility::string_t& value)
{
    m_SecurityStamp = value;
    m_SecurityStampIsSet = true;
}

bool ApplicationUser::securityStampIsSet() const
{
    return m_SecurityStampIsSet;
}

void ApplicationUser::unsetSecurityStamp()
{
    m_SecurityStampIsSet = false;
}
utility::string_t ApplicationUser::getConcurrencyStamp() const
{
    return m_ConcurrencyStamp;
}

void ApplicationUser::setConcurrencyStamp(const utility::string_t& value)
{
    m_ConcurrencyStamp = value;
    m_ConcurrencyStampIsSet = true;
}

bool ApplicationUser::concurrencyStampIsSet() const
{
    return m_ConcurrencyStampIsSet;
}

void ApplicationUser::unsetConcurrencyStamp()
{
    m_ConcurrencyStampIsSet = false;
}
utility::string_t ApplicationUser::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void ApplicationUser::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool ApplicationUser::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void ApplicationUser::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
bool ApplicationUser::isPhoneNumberConfirmed() const
{
    return m_PhoneNumberConfirmed;
}

void ApplicationUser::setPhoneNumberConfirmed(bool value)
{
    m_PhoneNumberConfirmed = value;
    m_PhoneNumberConfirmedIsSet = true;
}

bool ApplicationUser::phoneNumberConfirmedIsSet() const
{
    return m_PhoneNumberConfirmedIsSet;
}

void ApplicationUser::unsetPhoneNumberConfirmed()
{
    m_PhoneNumberConfirmedIsSet = false;
}
bool ApplicationUser::isTwoFactorEnabled() const
{
    return m_TwoFactorEnabled;
}

void ApplicationUser::setTwoFactorEnabled(bool value)
{
    m_TwoFactorEnabled = value;
    m_TwoFactorEnabledIsSet = true;
}

bool ApplicationUser::twoFactorEnabledIsSet() const
{
    return m_TwoFactorEnabledIsSet;
}

void ApplicationUser::unsetTwoFactorEnabled()
{
    m_TwoFactorEnabledIsSet = false;
}
utility::datetime ApplicationUser::getLockoutEnd() const
{
    return m_LockoutEnd;
}

void ApplicationUser::setLockoutEnd(const utility::datetime& value)
{
    m_LockoutEnd = value;
    m_LockoutEndIsSet = true;
}

bool ApplicationUser::lockoutEndIsSet() const
{
    return m_LockoutEndIsSet;
}

void ApplicationUser::unsetLockoutEnd()
{
    m_LockoutEndIsSet = false;
}
bool ApplicationUser::isLockoutEnabled() const
{
    return m_LockoutEnabled;
}

void ApplicationUser::setLockoutEnabled(bool value)
{
    m_LockoutEnabled = value;
    m_LockoutEnabledIsSet = true;
}

bool ApplicationUser::lockoutEnabledIsSet() const
{
    return m_LockoutEnabledIsSet;
}

void ApplicationUser::unsetLockoutEnabled()
{
    m_LockoutEnabledIsSet = false;
}
int32_t ApplicationUser::getAccessFailedCount() const
{
    return m_AccessFailedCount;
}

void ApplicationUser::setAccessFailedCount(int32_t value)
{
    m_AccessFailedCount = value;
    m_AccessFailedCountIsSet = true;
}

bool ApplicationUser::accessFailedCountIsSet() const
{
    return m_AccessFailedCountIsSet;
}

void ApplicationUser::unsetAccessFailedCount()
{
    m_AccessFailedCountIsSet = false;
}
utility::string_t ApplicationUser::getFirstName() const
{
    return m_FirstName;
}

void ApplicationUser::setFirstName(const utility::string_t& value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}

bool ApplicationUser::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void ApplicationUser::unsetFirstName()
{
    m_FirstNameIsSet = false;
}
utility::string_t ApplicationUser::getMiddleName() const
{
    return m_MiddleName;
}

void ApplicationUser::setMiddleName(const utility::string_t& value)
{
    m_MiddleName = value;
    m_MiddleNameIsSet = true;
}

bool ApplicationUser::middleNameIsSet() const
{
    return m_MiddleNameIsSet;
}

void ApplicationUser::unsetMiddleName()
{
    m_MiddleNameIsSet = false;
}
utility::string_t ApplicationUser::getLastName() const
{
    return m_LastName;
}

void ApplicationUser::setLastName(const utility::string_t& value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}

bool ApplicationUser::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void ApplicationUser::unsetLastName()
{
    m_LastNameIsSet = false;
}
utility::string_t ApplicationUser::getFullName() const
{
    return m_FullName;
}

void ApplicationUser::setFullName(const utility::string_t& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}

bool ApplicationUser::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void ApplicationUser::unsetFullName()
{
    m_FullNameIsSet = false;
}
std::shared_ptr<Gender> ApplicationUser::getGender() const
{
    return m_Gender;
}

void ApplicationUser::setGender(const std::shared_ptr<Gender>& value)
{
    m_Gender = value;
    m_GenderIsSet = true;
}

bool ApplicationUser::genderIsSet() const
{
    return m_GenderIsSet;
}

void ApplicationUser::unsetGender()
{
    m_GenderIsSet = false;
}
utility::datetime ApplicationUser::getDateOfBirth() const
{
    return m_DateOfBirth;
}

void ApplicationUser::setDateOfBirth(const utility::datetime& value)
{
    m_DateOfBirth = value;
    m_DateOfBirthIsSet = true;
}

bool ApplicationUser::dateOfBirthIsSet() const
{
    return m_DateOfBirthIsSet;
}

void ApplicationUser::unsetDateOfBirth()
{
    m_DateOfBirthIsSet = false;
}
utility::string_t ApplicationUser::getCountryId() const
{
    return m_CountryId;
}

void ApplicationUser::setCountryId(const utility::string_t& value)
{
    m_CountryId = value;
    m_CountryIdIsSet = true;
}

bool ApplicationUser::countryIdIsSet() const
{
    return m_CountryIdIsSet;
}

void ApplicationUser::unsetCountryId()
{
    m_CountryIdIsSet = false;
}
utility::string_t ApplicationUser::getPostCode() const
{
    return m_PostCode;
}

void ApplicationUser::setPostCode(const utility::string_t& value)
{
    m_PostCode = value;
    m_PostCodeIsSet = true;
}

bool ApplicationUser::postCodeIsSet() const
{
    return m_PostCodeIsSet;
}

void ApplicationUser::unsetPostCode()
{
    m_PostCodeIsSet = false;
}
utility::string_t ApplicationUser::getReferredBy() const
{
    return m_ReferredBy;
}

void ApplicationUser::setReferredBy(const utility::string_t& value)
{
    m_ReferredBy = value;
    m_ReferredByIsSet = true;
}

bool ApplicationUser::referredByIsSet() const
{
    return m_ReferredByIsSet;
}

void ApplicationUser::unsetReferredBy()
{
    m_ReferredByIsSet = false;
}
utility::string_t ApplicationUser::getLanguage() const
{
    return m_Language;
}

void ApplicationUser::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool ApplicationUser::languageIsSet() const
{
    return m_LanguageIsSet;
}

void ApplicationUser::unsetLanguage()
{
    m_LanguageIsSet = false;
}
std::shared_ptr<Theme> ApplicationUser::getTheme() const
{
    return m_Theme;
}

void ApplicationUser::setTheme(const std::shared_ptr<Theme>& value)
{
    m_Theme = value;
    m_ThemeIsSet = true;
}

bool ApplicationUser::themeIsSet() const
{
    return m_ThemeIsSet;
}

void ApplicationUser::unsetTheme()
{
    m_ThemeIsSet = false;
}
utility::string_t ApplicationUser::getDesignation() const
{
    return m_Designation;
}

void ApplicationUser::setDesignation(const utility::string_t& value)
{
    m_Designation = value;
    m_DesignationIsSet = true;
}

bool ApplicationUser::designationIsSet() const
{
    return m_DesignationIsSet;
}

void ApplicationUser::unsetDesignation()
{
    m_DesignationIsSet = false;
}
bool ApplicationUser::isIsMarkedForDeletion() const
{
    return m_IsMarkedForDeletion;
}

void ApplicationUser::setIsMarkedForDeletion(bool value)
{
    m_IsMarkedForDeletion = value;
    m_IsMarkedForDeletionIsSet = true;
}

bool ApplicationUser::isMarkedForDeletionIsSet() const
{
    return m_IsMarkedForDeletionIsSet;
}

void ApplicationUser::unsetIsMarkedForDeletion()
{
    m_IsMarkedForDeletionIsSet = false;
}
utility::datetime ApplicationUser::getHardDeleteDate() const
{
    return m_HardDeleteDate;
}

void ApplicationUser::setHardDeleteDate(const utility::datetime& value)
{
    m_HardDeleteDate = value;
    m_HardDeleteDateIsSet = true;
}

bool ApplicationUser::hardDeleteDateIsSet() const
{
    return m_HardDeleteDateIsSet;
}

void ApplicationUser::unsetHardDeleteDate()
{
    m_HardDeleteDateIsSet = false;
}
utility::string_t ApplicationUser::getSecurityPin() const
{
    return m_SecurityPin;
}

void ApplicationUser::setSecurityPin(const utility::string_t& value)
{
    m_SecurityPin = value;
    m_SecurityPinIsSet = true;
}

bool ApplicationUser::securityPinIsSet() const
{
    return m_SecurityPinIsSet;
}

void ApplicationUser::unsetSecurityPin()
{
    m_SecurityPinIsSet = false;
}
utility::string_t ApplicationUser::getPhotoUrl() const
{
    return m_PhotoUrl;
}

void ApplicationUser::setPhotoUrl(const utility::string_t& value)
{
    m_PhotoUrl = value;
    m_PhotoUrlIsSet = true;
}

bool ApplicationUser::photoUrlIsSet() const
{
    return m_PhotoUrlIsSet;
}

void ApplicationUser::unsetPhotoUrl()
{
    m_PhotoUrlIsSet = false;
}
utility::string_t ApplicationUser::getReferralCode() const
{
    return m_ReferralCode;
}

void ApplicationUser::setReferralCode(const utility::string_t& value)
{
    m_ReferralCode = value;
    m_ReferralCodeIsSet = true;
}

bool ApplicationUser::referralCodeIsSet() const
{
    return m_ReferralCodeIsSet;
}

void ApplicationUser::unsetReferralCode()
{
    m_ReferralCodeIsSet = false;
}
utility::string_t ApplicationUser::getRecoveryToken() const
{
    return m_RecoveryToken;
}

void ApplicationUser::setRecoveryToken(const utility::string_t& value)
{
    m_RecoveryToken = value;
    m_RecoveryTokenIsSet = true;
}

bool ApplicationUser::recoveryTokenIsSet() const
{
    return m_RecoveryTokenIsSet;
}

void ApplicationUser::unsetRecoveryToken()
{
    m_RecoveryTokenIsSet = false;
}
utility::datetime ApplicationUser::getDigiLockerLastSyncDate() const
{
    return m_DigiLockerLastSyncDate;
}

void ApplicationUser::setDigiLockerLastSyncDate(const utility::datetime& value)
{
    m_DigiLockerLastSyncDate = value;
    m_DigiLockerLastSyncDateIsSet = true;
}

bool ApplicationUser::digiLockerLastSyncDateIsSet() const
{
    return m_DigiLockerLastSyncDateIsSet;
}

void ApplicationUser::unsetDigiLockerLastSyncDate()
{
    m_DigiLockerLastSyncDateIsSet = false;
}
std::vector<std::shared_ptr<RefreshToken>>& ApplicationUser::getRefreshTokens()
{
    return m_RefreshTokens;
}

void ApplicationUser::setRefreshTokens(const std::vector<std::shared_ptr<RefreshToken>>& value)
{
    m_RefreshTokens = value;
    m_RefreshTokensIsSet = true;
}

bool ApplicationUser::refreshTokensIsSet() const
{
    return m_RefreshTokensIsSet;
}

void ApplicationUser::unsetRefreshTokens()
{
    m_RefreshTokensIsSet = false;
}
std::shared_ptr<Country> ApplicationUser::getCountry() const
{
    return m_Country;
}

void ApplicationUser::setCountry(const std::shared_ptr<Country>& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool ApplicationUser::countryIsSet() const
{
    return m_CountryIsSet;
}

void ApplicationUser::unsetCountry()
{
    m_CountryIsSet = false;
}
std::shared_ptr<ApplicationUser> ApplicationUser::getReferredByUser() const
{
    return m_ReferredByUser;
}

void ApplicationUser::setReferredByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_ReferredByUser = value;
    m_ReferredByUserIsSet = true;
}

bool ApplicationUser::referredByUserIsSet() const
{
    return m_ReferredByUserIsSet;
}

void ApplicationUser::unsetReferredByUser()
{
    m_ReferredByUserIsSet = false;
}
}
}


