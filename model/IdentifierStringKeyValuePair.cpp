/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IdentifierStringKeyValuePair.h"

namespace mydatamyconsent {
namespace models {




IdentifierStringKeyValuePair::IdentifierStringKeyValuePair()
{
    m_KeyIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

IdentifierStringKeyValuePair::~IdentifierStringKeyValuePair()
{
}

void IdentifierStringKeyValuePair::validate()
{
    // TODO: implement validation
}

web::json::value IdentifierStringKeyValuePair::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_KeyIsSet)
    {
        val[utility::conversions::to_string_t(U("key"))] = ModelBase::toJson(m_Key);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool IdentifierStringKeyValuePair::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("key")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Identifier> refVal_key;
            ok &= ModelBase::fromJson(fieldValue, refVal_key);
            setKey(refVal_key);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_value);
            setValue(refVal_value);
        }
    }
    return ok;
}

void IdentifierStringKeyValuePair::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_KeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("key")), m_Key));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
}

bool IdentifierStringKeyValuePair::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("key"))))
    {
        std::shared_ptr<Identifier> refVal_key;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("key"))), refVal_key );
        setKey(refVal_key);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_value );
        setValue(refVal_value);
    }
    return ok;
}

std::shared_ptr<Identifier> IdentifierStringKeyValuePair::getKey() const
{
    return m_Key;
}

void IdentifierStringKeyValuePair::setKey(const std::shared_ptr<Identifier>& value)
{
    m_Key = value;
    m_KeyIsSet = true;
}

bool IdentifierStringKeyValuePair::keyIsSet() const
{
    return m_KeyIsSet;
}

void IdentifierStringKeyValuePair::unsetKey()
{
    m_KeyIsSet = false;
}
utility::string_t IdentifierStringKeyValuePair::getValue() const
{
    return m_Value;
}

void IdentifierStringKeyValuePair::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool IdentifierStringKeyValuePair::valueIsSet() const
{
    return m_ValueIsSet;
}

void IdentifierStringKeyValuePair::unsetValue()
{
    m_ValueIsSet = false;
}
}
}


