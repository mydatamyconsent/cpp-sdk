/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SupportedDocumentTypeCategoryDetailsDto.h"

namespace mydatamyconsent {
namespace models {




SupportedDocumentTypeCategoryDetailsDto::SupportedDocumentTypeCategoryDetailsDto()
{
    m_DocumentTypeCategoryId = utility::conversions::to_string_t("");
    m_DocumentTypeCategoryIdIsSet = false;
    m_DocumentTypeCategoryName = utility::conversions::to_string_t("");
    m_DocumentTypeCategoryNameIsSet = false;
    m_SupportedDocumentsIsSet = false;
    m_SupportedDocumentProviderDetailsIsSet = false;
}

SupportedDocumentTypeCategoryDetailsDto::~SupportedDocumentTypeCategoryDetailsDto()
{
}

void SupportedDocumentTypeCategoryDetailsDto::validate()
{
    // TODO: implement validation
}

web::json::value SupportedDocumentTypeCategoryDetailsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentTypeCategoryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("documentTypeCategoryId"))] = ModelBase::toJson(m_DocumentTypeCategoryId);
    }
    if(m_DocumentTypeCategoryNameIsSet)
    {
        val[utility::conversions::to_string_t(U("documentTypeCategoryName"))] = ModelBase::toJson(m_DocumentTypeCategoryName);
    }
    if(m_SupportedDocumentsIsSet)
    {
        val[utility::conversions::to_string_t(U("supportedDocuments"))] = ModelBase::toJson(m_SupportedDocuments);
    }
    if(m_SupportedDocumentProviderDetailsIsSet)
    {
        val[utility::conversions::to_string_t(U("supportedDocumentProviderDetails"))] = ModelBase::toJson(m_SupportedDocumentProviderDetails);
    }

    return val;
}

bool SupportedDocumentTypeCategoryDetailsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("documentTypeCategoryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentTypeCategoryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentTypeCategoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentTypeCategoryId);
            setDocumentTypeCategoryId(refVal_documentTypeCategoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentTypeCategoryName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentTypeCategoryName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentTypeCategoryName;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentTypeCategoryName);
            setDocumentTypeCategoryName(refVal_documentTypeCategoryName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportedDocuments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportedDocuments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SupportedDocumentDetailsDto>> refVal_supportedDocuments;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportedDocuments);
            setSupportedDocuments(refVal_supportedDocuments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportedDocumentProviderDetails"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportedDocumentProviderDetails")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SupportedDocumentProviderDetailsDto>> refVal_supportedDocumentProviderDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportedDocumentProviderDetails);
            setSupportedDocumentProviderDetails(refVal_supportedDocumentProviderDetails);
        }
    }
    return ok;
}

void SupportedDocumentTypeCategoryDetailsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DocumentTypeCategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentTypeCategoryId")), m_DocumentTypeCategoryId));
    }
    if(m_DocumentTypeCategoryNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentTypeCategoryName")), m_DocumentTypeCategoryName));
    }
    if(m_SupportedDocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportedDocuments")), m_SupportedDocuments));
    }
    if(m_SupportedDocumentProviderDetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportedDocumentProviderDetails")), m_SupportedDocumentProviderDetails));
    }
}

bool SupportedDocumentTypeCategoryDetailsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("documentTypeCategoryId"))))
    {
        utility::string_t refVal_documentTypeCategoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentTypeCategoryId"))), refVal_documentTypeCategoryId );
        setDocumentTypeCategoryId(refVal_documentTypeCategoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentTypeCategoryName"))))
    {
        utility::string_t refVal_documentTypeCategoryName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentTypeCategoryName"))), refVal_documentTypeCategoryName );
        setDocumentTypeCategoryName(refVal_documentTypeCategoryName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportedDocuments"))))
    {
        std::vector<std::shared_ptr<SupportedDocumentDetailsDto>> refVal_supportedDocuments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportedDocuments"))), refVal_supportedDocuments );
        setSupportedDocuments(refVal_supportedDocuments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportedDocumentProviderDetails"))))
    {
        std::vector<std::shared_ptr<SupportedDocumentProviderDetailsDto>> refVal_supportedDocumentProviderDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportedDocumentProviderDetails"))), refVal_supportedDocumentProviderDetails );
        setSupportedDocumentProviderDetails(refVal_supportedDocumentProviderDetails);
    }
    return ok;
}

utility::string_t SupportedDocumentTypeCategoryDetailsDto::getDocumentTypeCategoryId() const
{
    return m_DocumentTypeCategoryId;
}

void SupportedDocumentTypeCategoryDetailsDto::setDocumentTypeCategoryId(const utility::string_t& value)
{
    m_DocumentTypeCategoryId = value;
    m_DocumentTypeCategoryIdIsSet = true;
}

bool SupportedDocumentTypeCategoryDetailsDto::documentTypeCategoryIdIsSet() const
{
    return m_DocumentTypeCategoryIdIsSet;
}

void SupportedDocumentTypeCategoryDetailsDto::unsetDocumentTypeCategoryId()
{
    m_DocumentTypeCategoryIdIsSet = false;
}
utility::string_t SupportedDocumentTypeCategoryDetailsDto::getDocumentTypeCategoryName() const
{
    return m_DocumentTypeCategoryName;
}

void SupportedDocumentTypeCategoryDetailsDto::setDocumentTypeCategoryName(const utility::string_t& value)
{
    m_DocumentTypeCategoryName = value;
    m_DocumentTypeCategoryNameIsSet = true;
}

bool SupportedDocumentTypeCategoryDetailsDto::documentTypeCategoryNameIsSet() const
{
    return m_DocumentTypeCategoryNameIsSet;
}

void SupportedDocumentTypeCategoryDetailsDto::unsetDocumentTypeCategoryName()
{
    m_DocumentTypeCategoryNameIsSet = false;
}
std::vector<std::shared_ptr<SupportedDocumentDetailsDto>>& SupportedDocumentTypeCategoryDetailsDto::getSupportedDocuments()
{
    return m_SupportedDocuments;
}

void SupportedDocumentTypeCategoryDetailsDto::setSupportedDocuments(const std::vector<std::shared_ptr<SupportedDocumentDetailsDto>>& value)
{
    m_SupportedDocuments = value;
    m_SupportedDocumentsIsSet = true;
}

bool SupportedDocumentTypeCategoryDetailsDto::supportedDocumentsIsSet() const
{
    return m_SupportedDocumentsIsSet;
}

void SupportedDocumentTypeCategoryDetailsDto::unsetSupportedDocuments()
{
    m_SupportedDocumentsIsSet = false;
}
std::vector<std::shared_ptr<SupportedDocumentProviderDetailsDto>>& SupportedDocumentTypeCategoryDetailsDto::getSupportedDocumentProviderDetails()
{
    return m_SupportedDocumentProviderDetails;
}

void SupportedDocumentTypeCategoryDetailsDto::setSupportedDocumentProviderDetails(const std::vector<std::shared_ptr<SupportedDocumentProviderDetailsDto>>& value)
{
    m_SupportedDocumentProviderDetails = value;
    m_SupportedDocumentProviderDetailsIsSet = true;
}

bool SupportedDocumentTypeCategoryDetailsDto::supportedDocumentProviderDetailsIsSet() const
{
    return m_SupportedDocumentProviderDetailsIsSet;
}

void SupportedDocumentTypeCategoryDetailsDto::unsetSupportedDocumentProviderDetails()
{
    m_SupportedDocumentProviderDetailsIsSet = false;
}
}
}


