/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ApprovedConsentRequest.h"

namespace mydatamyconsent {
namespace models {




ApprovedConsentRequest::ApprovedConsentRequest()
{
    m_LogoUrl = utility::conversions::to_string_t("");
    m_LogoUrlIsSet = false;
}

ApprovedConsentRequest::~ApprovedConsentRequest()
{
}

void ApprovedConsentRequest::validate()
{
    // TODO: implement validation
}

web::json::value ApprovedConsentRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LogoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("logoUrl"))] = ModelBase::toJson(m_LogoUrl);
    }

    return val;
}

bool ApprovedConsentRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("logoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_logoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_logoUrl);
            setLogoUrl(refVal_logoUrl);
        }
    }
    return ok;
}

void ApprovedConsentRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logoUrl")), m_LogoUrl));
    }
}

bool ApprovedConsentRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("logoUrl"))))
    {
        utility::string_t refVal_logoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logoUrl"))), refVal_logoUrl );
        setLogoUrl(refVal_logoUrl);
    }
    return ok;
}

utility::string_t ApprovedConsentRequest::getLogoUrl() const
{
    return m_LogoUrl;
}

void ApprovedConsentRequest::setLogoUrl(const utility::string_t& value)
{
    m_LogoUrl = value;
    m_LogoUrlIsSet = true;
}

bool ApprovedConsentRequest::logoUrlIsSet() const
{
    return m_LogoUrlIsSet;
}

void ApprovedConsentRequest::unsetLogoUrl()
{
    m_LogoUrlIsSet = false;
}
}
}


