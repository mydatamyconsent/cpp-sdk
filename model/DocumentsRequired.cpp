/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DocumentsRequired.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

DocumentsRequired::eDocumentsRequired toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("Anyone")))
        return DocumentsRequired::eDocumentsRequired::DocumentsRequired_ANYONE;
    if (val == utility::conversions::to_string_t(U("All")))
        return DocumentsRequired::eDocumentsRequired::DocumentsRequired_ALL;
    return {};
}

EnumUnderlyingType fromEnum(DocumentsRequired::eDocumentsRequired e)
{
    switch (e)
    {
    case DocumentsRequired::eDocumentsRequired::DocumentsRequired_ANYONE:
        return U("Anyone");
    case DocumentsRequired::eDocumentsRequired::DocumentsRequired_ALL:
        return U("All");
    default:
        break;
    }
    return {};
}
}

DocumentsRequired::DocumentsRequired()
{
}

DocumentsRequired::~DocumentsRequired()
{
}

void DocumentsRequired::validate()
{
    // TODO: implement validation
}

web::json::value DocumentsRequired::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool DocumentsRequired::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void DocumentsRequired::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool DocumentsRequired::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

DocumentsRequired::eDocumentsRequired DocumentsRequired::getValue() const
{
   return m_value;
}

void DocumentsRequired::setValue(DocumentsRequired::eDocumentsRequired const value)
{
   m_value = value;
}


}
}


