/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Operator.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

Operator::eOperator toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("EqualTo")))
        return Operator::eOperator::Operator_EQUALTO;
    if (val == utility::conversions::to_string_t(U("NotEqualto")))
        return Operator::eOperator::Operator_NOTEQUALTO;
    if (val == utility::conversions::to_string_t(U("TextContains")))
        return Operator::eOperator::Operator_TEXTCONTAINS;
    if (val == utility::conversions::to_string_t(U("GreaterThan")))
        return Operator::eOperator::Operator_GREATERTHAN;
    if (val == utility::conversions::to_string_t(U("LessThan")))
        return Operator::eOperator::Operator_LESSTHAN;
    if (val == utility::conversions::to_string_t(U("GreaterThanOrEqualTo")))
        return Operator::eOperator::Operator_GREATERTHANOREQUALTO;
    if (val == utility::conversions::to_string_t(U("LessThanOrEqualTo")))
        return Operator::eOperator::Operator_LESSTHANOREQUALTO;
    return {};
}

EnumUnderlyingType fromEnum(Operator::eOperator e)
{
    switch (e)
    {
    case Operator::eOperator::Operator_EQUALTO:
        return U("EqualTo");
    case Operator::eOperator::Operator_NOTEQUALTO:
        return U("NotEqualto");
    case Operator::eOperator::Operator_TEXTCONTAINS:
        return U("TextContains");
    case Operator::eOperator::Operator_GREATERTHAN:
        return U("GreaterThan");
    case Operator::eOperator::Operator_LESSTHAN:
        return U("LessThan");
    case Operator::eOperator::Operator_GREATERTHANOREQUALTO:
        return U("GreaterThanOrEqualTo");
    case Operator::eOperator::Operator_LESSTHANOREQUALTO:
        return U("LessThanOrEqualTo");
    default:
        break;
    }
    return {};
}
}

Operator::Operator()
{
}

Operator::~Operator()
{
}

void Operator::validate()
{
    // TODO: implement validation
}

web::json::value Operator::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool Operator::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void Operator::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool Operator::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

Operator::eOperator Operator::getValue() const
{
   return m_value;
}

void Operator::setValue(Operator::eOperator const value)
{
   m_value = value;
}


}
}


