/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DocumentTypeDetailsDto.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_DocumentTypeDetailsDto_H_
#define MYDATAMYCONSENT_MODELS_DocumentTypeDetailsDto_H_


#include "ModelBase.h"

#include "model/DocumentCategoryType.h"
#include "model/SupportedEntityType.h"
#include <cpprest/details/basic_types.h>
#include "model/DocumentSubCategoryType.h"

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  DocumentTypeDetailsDto
    : public ModelBase
{
public:
    DocumentTypeDetailsDto();
    virtual ~DocumentTypeDetailsDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DocumentTypeDetailsDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrganizationId() const;
    bool organizationIdIsSet() const;
    void unsetOrganizationId();

    void setOrganizationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DocumentCategoryType> getCategoryType() const;
    bool categoryTypeIsSet() const;
    void unsetCategoryType();

    void setCategoryType(const std::shared_ptr<DocumentCategoryType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DocumentSubCategoryType> getSubCategoryType() const;
    bool subCategoryTypeIsSet() const;
    void unsetSubCategoryType();

    void setSubCategoryType(const std::shared_ptr<DocumentSubCategoryType>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentTypeCategoryId() const;
    bool documentTypeCategoryIdIsSet() const;
    void unsetDocumentTypeCategoryId();

    void setDocumentTypeCategoryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSlug() const;
    bool slugIsSet() const;
    void unsetSlug();

    void setSlug(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLogoUrl() const;
    bool logoUrlIsSet() const;
    void unsetLogoUrl();

    void setLogoUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountryIso2() const;
    bool countryIso2IsSet() const;
    void unsetCountryIso2();

    void setCountryIso2(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountryId() const;
    bool countryIdIsSet() const;
    void unsetCountryId();

    void setCountryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSearchServiceId() const;
    bool searchServiceIdIsSet() const;
    void unsetSearchServiceId();

    void setSearchServiceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRepositoryServiceId() const;
    bool repositoryServiceIdIsSet() const;
    void unsetRepositoryServiceId();

    void setRepositoryServiceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SupportedEntityType> getSupportedEntityType() const;
    bool supportedEntityTypeIsSet() const;
    void unsetSupportedEntityType();

    void setSupportedEntityType(const std::shared_ptr<SupportedEntityType>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddedBy() const;
    bool addedByIsSet() const;
    void unsetAddedBy();

    void setAddedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getPayableAmount() const;
    bool payableAmountIsSet() const;
    void unsetPayableAmount();

    void setPayableAmount(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getApprovedAtUtc() const;
    bool approvedAtUtcIsSet() const;
    void unsetApprovedAtUtc();

    void setApprovedAtUtc(const utility::datetime& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_OrganizationId;
    bool m_OrganizationIdIsSet;
    std::shared_ptr<DocumentCategoryType> m_CategoryType;
    bool m_CategoryTypeIsSet;
    std::shared_ptr<DocumentSubCategoryType> m_SubCategoryType;
    bool m_SubCategoryTypeIsSet;
    utility::string_t m_DocumentTypeCategoryId;
    bool m_DocumentTypeCategoryIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Slug;
    bool m_SlugIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_LogoUrl;
    bool m_LogoUrlIsSet;
    utility::string_t m_CountryIso2;
    bool m_CountryIso2IsSet;
    utility::string_t m_CountryId;
    bool m_CountryIdIsSet;
    utility::string_t m_SearchServiceId;
    bool m_SearchServiceIdIsSet;
    utility::string_t m_RepositoryServiceId;
    bool m_RepositoryServiceIdIsSet;
    std::shared_ptr<SupportedEntityType> m_SupportedEntityType;
    bool m_SupportedEntityTypeIsSet;
    utility::string_t m_AddedBy;
    bool m_AddedByIsSet;
    double m_PayableAmount;
    bool m_PayableAmountIsSet;
    utility::datetime m_ApprovedAtUtc;
    bool m_ApprovedAtUtcIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DocumentTypeDetailsDto_H_ */
