/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DataConsentDocument.h
 *
 * Data Consent document details.
 */

#ifndef MYDATAMYCONSENT_MODELS_DataConsentDocument_H_
#define MYDATAMYCONSENT_MODELS_DataConsentDocument_H_


#include "ModelBase.h"

#include "model/DataConsentDocumentIssuer.h"
#include "model/DocumentDigitalSignature.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// Data Consent document details.
/// </summary>
class  DataConsentDocument
    : public ModelBase
{
public:
    DataConsentDocument();
    virtual ~DataConsentDocument();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DataConsentDocument members

    /// <summary>
    /// Document id.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Document name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Document category.
    /// </summary>
    utility::string_t getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();

    void setCategory(const utility::string_t& value);

    /// <summary>
    /// Document identifier.
    /// </summary>
    utility::string_t getIdentifier() const;
    bool identifierIsSet() const;
    void unsetIdentifier();

    void setIdentifier(const utility::string_t& value);

    /// <summary>
    /// Document field title.
    /// </summary>
    utility::string_t getFieldTitle() const;
    bool fieldTitleIsSet() const;
    void unsetFieldTitle();

    void setFieldTitle(const utility::string_t& value);

    /// <summary>
    /// Document field slug.
    /// </summary>
    utility::string_t getFieldSlug() const;
    bool fieldSlugIsSet() const;
    void unsetFieldSlug();

    void setFieldSlug(const utility::string_t& value);

    /// <summary>
    /// Document issued at datetime in UTC timezone.
    /// </summary>
    utility::datetime getIssuedAtUtc() const;
    bool issuedAtUtcIsSet() const;
    void unsetIssuedAtUtc();

    void setIssuedAtUtc(const utility::datetime& value);

    /// <summary>
    /// Document expires at datetime in UTC timezone.
    /// </summary>
    utility::datetime getExpiresAtUtc() const;
    bool expiresAtUtcIsSet() const;
    void unsetExpiresAtUtc();

    void setExpiresAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataConsentDocumentIssuer> getIssuer() const;
    bool issuerIsSet() const;
    void unsetIssuer();

    void setIssuer(const std::shared_ptr<DataConsentDocumentIssuer>& value);

    /// <summary>
    /// Digital signatures.
    /// </summary>
    std::vector<std::shared_ptr<DocumentDigitalSignature>>& getDigitalSignatures();
    bool digitalSignaturesIsSet() const;
    void unsetDigitalSignatures();

    void setDigitalSignatures(const std::vector<std::shared_ptr<DocumentDigitalSignature>>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Category;
    bool m_CategoryIsSet;
    utility::string_t m_Identifier;
    bool m_IdentifierIsSet;
    utility::string_t m_FieldTitle;
    bool m_FieldTitleIsSet;
    utility::string_t m_FieldSlug;
    bool m_FieldSlugIsSet;
    utility::datetime m_IssuedAtUtc;
    bool m_IssuedAtUtcIsSet;
    utility::datetime m_ExpiresAtUtc;
    bool m_ExpiresAtUtcIsSet;
    std::shared_ptr<DataConsentDocumentIssuer> m_Issuer;
    bool m_IssuerIsSet;
    std::vector<std::shared_ptr<DocumentDigitalSignature>> m_DigitalSignatures;
    bool m_DigitalSignaturesIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DataConsentDocument_H_ */
