/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UserDocumentDetails.h"

namespace mydatamyconsent {
namespace models {




UserDocumentDetails::UserDocumentDetails()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_CategoryTypeIsSet = false;
    m_r_typeId = utility::conversions::to_string_t("");
    m_r_typeIdIsSet = false;
    m_r_typeName = utility::conversions::to_string_t("");
    m_r_typeNameIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_Identifier = utility::conversions::to_string_t("");
    m_IdentifierIsSet = false;
    m_AccountId = utility::conversions::to_string_t("");
    m_AccountIdIsSet = false;
    m_IssuerId = utility::conversions::to_string_t("");
    m_IssuerIdIsSet = false;
    m_IssuerName = utility::conversions::to_string_t("");
    m_IssuerNameIsSet = false;
    m_StorageUrl = utility::conversions::to_string_t("");
    m_StorageUrlIsSet = false;
    m_IsQuickAccessEnabled = false;
    m_IsQuickAccessEnabledIsSet = false;
    m_IsOwner = false;
    m_IsOwnerIsSet = false;
    m_DigitalSignatureDetailsIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
}

UserDocumentDetails::~UserDocumentDetails()
{
}

void UserDocumentDetails::validate()
{
    // TODO: implement validation
}

web::json::value UserDocumentDetails::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_CategoryTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryType"))] = ModelBase::toJson(m_CategoryType);
    }
    if(m_r_typeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("typeId"))] = ModelBase::toJson(m_r_typeId);
    }
    if(m_r_typeNameIsSet)
    {
        val[utility::conversions::to_string_t(U("typeName"))] = ModelBase::toJson(m_r_typeName);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fullName"))] = ModelBase::toJson(m_FullName);
    }
    if(m_IdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("identifier"))] = ModelBase::toJson(m_Identifier);
    }
    if(m_AccountIdIsSet)
    {
        val[utility::conversions::to_string_t(U("accountId"))] = ModelBase::toJson(m_AccountId);
    }
    if(m_IssuerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("issuerId"))] = ModelBase::toJson(m_IssuerId);
    }
    if(m_IssuerNameIsSet)
    {
        val[utility::conversions::to_string_t(U("issuerName"))] = ModelBase::toJson(m_IssuerName);
    }
    if(m_StorageUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("storageUrl"))] = ModelBase::toJson(m_StorageUrl);
    }
    if(m_IsQuickAccessEnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("isQuickAccessEnabled"))] = ModelBase::toJson(m_IsQuickAccessEnabled);
    }
    if(m_IsOwnerIsSet)
    {
        val[utility::conversions::to_string_t(U("isOwner"))] = ModelBase::toJson(m_IsOwner);
    }
    if(m_DigitalSignatureDetailsIsSet)
    {
        val[utility::conversions::to_string_t(U("digitalSignatureDetails"))] = ModelBase::toJson(m_DigitalSignatureDetails);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("ownerId"))] = ModelBase::toJson(m_OwnerId);
    }

    return val;
}

bool UserDocumentDetails::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentCategoryType> refVal_categoryType;
            ok &= ModelBase::fromJson(fieldValue, refVal_categoryType);
            setCategoryType(refVal_categoryType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("typeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("typeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeId);
            setRTypeId(refVal_typeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("typeName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("typeName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeName);
            setRTypeName(refVal_typeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fullName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fullName;
            ok &= ModelBase::fromJson(fieldValue, refVal_fullName);
            setFullName(refVal_fullName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_identifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_identifier);
            setIdentifier(refVal_identifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accountId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_accountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_accountId);
            setAccountId(refVal_accountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_issuerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuerId);
            setIssuerId(refVal_issuerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuerName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuerName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_issuerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuerName);
            setIssuerName(refVal_issuerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("storageUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("storageUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_storageUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_storageUrl);
            setStorageUrl(refVal_storageUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isQuickAccessEnabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isQuickAccessEnabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_isQuickAccessEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_isQuickAccessEnabled);
            setIsQuickAccessEnabled(refVal_isQuickAccessEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isOwner"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isOwner")));
        if(!fieldValue.is_null())
        {
            bool refVal_isOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_isOwner);
            setIsOwner(refVal_isOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("digitalSignatureDetails"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("digitalSignatureDetails")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DigitalSignature>> refVal_digitalSignatureDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_digitalSignatureDetails);
            setDigitalSignatureDetails(refVal_digitalSignatureDetails);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ownerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ownerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerId);
            setOwnerId(refVal_ownerId);
        }
    }
    return ok;
}

void UserDocumentDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_CategoryTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryType")), m_CategoryType));
    }
    if(m_r_typeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("typeId")), m_r_typeId));
    }
    if(m_r_typeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("typeName")), m_r_typeName));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullName")), m_FullName));
    }
    if(m_IdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifier")), m_Identifier));
    }
    if(m_AccountIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountId")), m_AccountId));
    }
    if(m_IssuerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuerId")), m_IssuerId));
    }
    if(m_IssuerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuerName")), m_IssuerName));
    }
    if(m_StorageUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("storageUrl")), m_StorageUrl));
    }
    if(m_IsQuickAccessEnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isQuickAccessEnabled")), m_IsQuickAccessEnabled));
    }
    if(m_IsOwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isOwner")), m_IsOwner));
    }
    if(m_DigitalSignatureDetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("digitalSignatureDetails")), m_DigitalSignatureDetails));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ownerId")), m_OwnerId));
    }
}

bool UserDocumentDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryType"))))
    {
        std::shared_ptr<DocumentCategoryType> refVal_categoryType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryType"))), refVal_categoryType );
        setCategoryType(refVal_categoryType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("typeId"))))
    {
        utility::string_t refVal_typeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("typeId"))), refVal_typeId );
        setRTypeId(refVal_typeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("typeName"))))
    {
        utility::string_t refVal_typeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("typeName"))), refVal_typeName );
        setRTypeName(refVal_typeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fullName"))))
    {
        utility::string_t refVal_fullName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullName"))), refVal_fullName );
        setFullName(refVal_fullName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identifier"))))
    {
        utility::string_t refVal_identifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifier"))), refVal_identifier );
        setIdentifier(refVal_identifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accountId"))))
    {
        utility::string_t refVal_accountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountId"))), refVal_accountId );
        setAccountId(refVal_accountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuerId"))))
    {
        utility::string_t refVal_issuerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuerId"))), refVal_issuerId );
        setIssuerId(refVal_issuerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuerName"))))
    {
        utility::string_t refVal_issuerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuerName"))), refVal_issuerName );
        setIssuerName(refVal_issuerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("storageUrl"))))
    {
        utility::string_t refVal_storageUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("storageUrl"))), refVal_storageUrl );
        setStorageUrl(refVal_storageUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isQuickAccessEnabled"))))
    {
        bool refVal_isQuickAccessEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isQuickAccessEnabled"))), refVal_isQuickAccessEnabled );
        setIsQuickAccessEnabled(refVal_isQuickAccessEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isOwner"))))
    {
        bool refVal_isOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isOwner"))), refVal_isOwner );
        setIsOwner(refVal_isOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("digitalSignatureDetails"))))
    {
        std::vector<std::shared_ptr<DigitalSignature>> refVal_digitalSignatureDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("digitalSignatureDetails"))), refVal_digitalSignatureDetails );
        setDigitalSignatureDetails(refVal_digitalSignatureDetails);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ownerId"))))
    {
        utility::string_t refVal_ownerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ownerId"))), refVal_ownerId );
        setOwnerId(refVal_ownerId);
    }
    return ok;
}

utility::string_t UserDocumentDetails::getId() const
{
    return m_Id;
}

void UserDocumentDetails::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UserDocumentDetails::idIsSet() const
{
    return m_IdIsSet;
}

void UserDocumentDetails::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<DocumentCategoryType> UserDocumentDetails::getCategoryType() const
{
    return m_CategoryType;
}

void UserDocumentDetails::setCategoryType(const std::shared_ptr<DocumentCategoryType>& value)
{
    m_CategoryType = value;
    m_CategoryTypeIsSet = true;
}

bool UserDocumentDetails::categoryTypeIsSet() const
{
    return m_CategoryTypeIsSet;
}

void UserDocumentDetails::unsetCategoryType()
{
    m_CategoryTypeIsSet = false;
}
utility::string_t UserDocumentDetails::getRTypeId() const
{
    return m_r_typeId;
}

void UserDocumentDetails::setRTypeId(const utility::string_t& value)
{
    m_r_typeId = value;
    m_r_typeIdIsSet = true;
}

bool UserDocumentDetails::rTypeIdIsSet() const
{
    return m_r_typeIdIsSet;
}

void UserDocumentDetails::unsetr_typeId()
{
    m_r_typeIdIsSet = false;
}
utility::string_t UserDocumentDetails::getRTypeName() const
{
    return m_r_typeName;
}

void UserDocumentDetails::setRTypeName(const utility::string_t& value)
{
    m_r_typeName = value;
    m_r_typeNameIsSet = true;
}

bool UserDocumentDetails::rTypeNameIsSet() const
{
    return m_r_typeNameIsSet;
}

void UserDocumentDetails::unsetr_typeName()
{
    m_r_typeNameIsSet = false;
}
utility::string_t UserDocumentDetails::getFullName() const
{
    return m_FullName;
}

void UserDocumentDetails::setFullName(const utility::string_t& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}

bool UserDocumentDetails::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void UserDocumentDetails::unsetFullName()
{
    m_FullNameIsSet = false;
}
utility::string_t UserDocumentDetails::getIdentifier() const
{
    return m_Identifier;
}

void UserDocumentDetails::setIdentifier(const utility::string_t& value)
{
    m_Identifier = value;
    m_IdentifierIsSet = true;
}

bool UserDocumentDetails::identifierIsSet() const
{
    return m_IdentifierIsSet;
}

void UserDocumentDetails::unsetIdentifier()
{
    m_IdentifierIsSet = false;
}
utility::string_t UserDocumentDetails::getAccountId() const
{
    return m_AccountId;
}

void UserDocumentDetails::setAccountId(const utility::string_t& value)
{
    m_AccountId = value;
    m_AccountIdIsSet = true;
}

bool UserDocumentDetails::accountIdIsSet() const
{
    return m_AccountIdIsSet;
}

void UserDocumentDetails::unsetAccountId()
{
    m_AccountIdIsSet = false;
}
utility::string_t UserDocumentDetails::getIssuerId() const
{
    return m_IssuerId;
}

void UserDocumentDetails::setIssuerId(const utility::string_t& value)
{
    m_IssuerId = value;
    m_IssuerIdIsSet = true;
}

bool UserDocumentDetails::issuerIdIsSet() const
{
    return m_IssuerIdIsSet;
}

void UserDocumentDetails::unsetIssuerId()
{
    m_IssuerIdIsSet = false;
}
utility::string_t UserDocumentDetails::getIssuerName() const
{
    return m_IssuerName;
}

void UserDocumentDetails::setIssuerName(const utility::string_t& value)
{
    m_IssuerName = value;
    m_IssuerNameIsSet = true;
}

bool UserDocumentDetails::issuerNameIsSet() const
{
    return m_IssuerNameIsSet;
}

void UserDocumentDetails::unsetIssuerName()
{
    m_IssuerNameIsSet = false;
}
utility::string_t UserDocumentDetails::getStorageUrl() const
{
    return m_StorageUrl;
}

void UserDocumentDetails::setStorageUrl(const utility::string_t& value)
{
    m_StorageUrl = value;
    m_StorageUrlIsSet = true;
}

bool UserDocumentDetails::storageUrlIsSet() const
{
    return m_StorageUrlIsSet;
}

void UserDocumentDetails::unsetStorageUrl()
{
    m_StorageUrlIsSet = false;
}
bool UserDocumentDetails::isIsQuickAccessEnabled() const
{
    return m_IsQuickAccessEnabled;
}

void UserDocumentDetails::setIsQuickAccessEnabled(bool value)
{
    m_IsQuickAccessEnabled = value;
    m_IsQuickAccessEnabledIsSet = true;
}

bool UserDocumentDetails::isQuickAccessEnabledIsSet() const
{
    return m_IsQuickAccessEnabledIsSet;
}

void UserDocumentDetails::unsetIsQuickAccessEnabled()
{
    m_IsQuickAccessEnabledIsSet = false;
}
bool UserDocumentDetails::isIsOwner() const
{
    return m_IsOwner;
}

void UserDocumentDetails::setIsOwner(bool value)
{
    m_IsOwner = value;
    m_IsOwnerIsSet = true;
}

bool UserDocumentDetails::isOwnerIsSet() const
{
    return m_IsOwnerIsSet;
}

void UserDocumentDetails::unsetIsOwner()
{
    m_IsOwnerIsSet = false;
}
std::vector<std::shared_ptr<DigitalSignature>>& UserDocumentDetails::getDigitalSignatureDetails()
{
    return m_DigitalSignatureDetails;
}

void UserDocumentDetails::setDigitalSignatureDetails(const std::vector<std::shared_ptr<DigitalSignature>>& value)
{
    m_DigitalSignatureDetails = value;
    m_DigitalSignatureDetailsIsSet = true;
}

bool UserDocumentDetails::digitalSignatureDetailsIsSet() const
{
    return m_DigitalSignatureDetailsIsSet;
}

void UserDocumentDetails::unsetDigitalSignatureDetails()
{
    m_DigitalSignatureDetailsIsSet = false;
}
utility::string_t UserDocumentDetails::getOwnerId() const
{
    return m_OwnerId;
}

void UserDocumentDetails::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool UserDocumentDetails::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void UserDocumentDetails::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
}
}


