/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IdentificationStrategy.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

IdentificationStrategy::eIdentificationStrategy toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("MatchAtLeastOneIdentifier")))
        return IdentificationStrategy::eIdentificationStrategy::IdentificationStrategy_MATCHATLEASTONEIDENTIFIER;
    if (val == utility::conversions::to_string_t(U("MatchAnyTwoIdentifiers")))
        return IdentificationStrategy::eIdentificationStrategy::IdentificationStrategy_MATCHANYTWOIDENTIFIERS;
    if (val == utility::conversions::to_string_t(U("MatchAllIdentifiers")))
        return IdentificationStrategy::eIdentificationStrategy::IdentificationStrategy_MATCHALLIDENTIFIERS;
    return {};
}

EnumUnderlyingType fromEnum(IdentificationStrategy::eIdentificationStrategy e)
{
    switch (e)
    {
    case IdentificationStrategy::eIdentificationStrategy::IdentificationStrategy_MATCHATLEASTONEIDENTIFIER:
        return U("MatchAtLeastOneIdentifier");
    case IdentificationStrategy::eIdentificationStrategy::IdentificationStrategy_MATCHANYTWOIDENTIFIERS:
        return U("MatchAnyTwoIdentifiers");
    case IdentificationStrategy::eIdentificationStrategy::IdentificationStrategy_MATCHALLIDENTIFIERS:
        return U("MatchAllIdentifiers");
    default:
        break;
    }
    return {};
}
}

IdentificationStrategy::IdentificationStrategy()
{
}

IdentificationStrategy::~IdentificationStrategy()
{
}

void IdentificationStrategy::validate()
{
    // TODO: implement validation
}

web::json::value IdentificationStrategy::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool IdentificationStrategy::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void IdentificationStrategy::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool IdentificationStrategy::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

IdentificationStrategy::eIdentificationStrategy IdentificationStrategy::getValue() const
{
   return m_value;
}

void IdentificationStrategy::setValue(IdentificationStrategy::eIdentificationStrategy const value)
{
   m_value = value;
}


}
}


