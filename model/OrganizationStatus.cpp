/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrganizationStatus.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

OrganizationStatus::eOrganizationStatus toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("OrganizationCreated")))
        return OrganizationStatus::eOrganizationStatus::OrganizationStatus_ORGANIZATIONCREATED;
    if (val == utility::conversions::to_string_t(U("ContactDetailsUpdated")))
        return OrganizationStatus::eOrganizationStatus::OrganizationStatus_CONTACTDETAILSUPDATED;
    if (val == utility::conversions::to_string_t(U("AuthorizedPersonnelUpdated")))
        return OrganizationStatus::eOrganizationStatus::OrganizationStatus_AUTHORIZEDPERSONNELUPDATED;
    if (val == utility::conversions::to_string_t(U("OrganizationDetailsUpdated")))
        return OrganizationStatus::eOrganizationStatus::OrganizationStatus_ORGANIZATIONDETAILSUPDATED;
    if (val == utility::conversions::to_string_t(U("AddressUpdated")))
        return OrganizationStatus::eOrganizationStatus::OrganizationStatus_ADDRESSUPDATED;
    if (val == utility::conversions::to_string_t(U("SignUpCompleted")))
        return OrganizationStatus::eOrganizationStatus::OrganizationStatus_SIGNUPCOMPLETED;
    return {};
}

EnumUnderlyingType fromEnum(OrganizationStatus::eOrganizationStatus e)
{
    switch (e)
    {
    case OrganizationStatus::eOrganizationStatus::OrganizationStatus_ORGANIZATIONCREATED:
        return U("OrganizationCreated");
    case OrganizationStatus::eOrganizationStatus::OrganizationStatus_CONTACTDETAILSUPDATED:
        return U("ContactDetailsUpdated");
    case OrganizationStatus::eOrganizationStatus::OrganizationStatus_AUTHORIZEDPERSONNELUPDATED:
        return U("AuthorizedPersonnelUpdated");
    case OrganizationStatus::eOrganizationStatus::OrganizationStatus_ORGANIZATIONDETAILSUPDATED:
        return U("OrganizationDetailsUpdated");
    case OrganizationStatus::eOrganizationStatus::OrganizationStatus_ADDRESSUPDATED:
        return U("AddressUpdated");
    case OrganizationStatus::eOrganizationStatus::OrganizationStatus_SIGNUPCOMPLETED:
        return U("SignUpCompleted");
    default:
        break;
    }
    return {};
}
}

OrganizationStatus::OrganizationStatus()
{
}

OrganizationStatus::~OrganizationStatus()
{
}

void OrganizationStatus::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationStatus::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool OrganizationStatus::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void OrganizationStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool OrganizationStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

OrganizationStatus::eOrganizationStatus OrganizationStatus::getValue() const
{
   return m_value;
}

void OrganizationStatus::setValue(OrganizationStatus::eOrganizationStatus const value)
{
   m_value = value;
}


}
}


