/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Country.h"

namespace mydatamyconsent {
namespace models {




Country::Country()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Iso3 = utility::conversions::to_string_t("");
    m_Iso3IsSet = false;
    m_Iso2 = utility::conversions::to_string_t("");
    m_Iso2IsSet = false;
    m_PhoneCode = utility::conversions::to_string_t("");
    m_PhoneCodeIsSet = false;
    m_Capital = utility::conversions::to_string_t("");
    m_CapitalIsSet = false;
    m_CurrencyCode = utility::conversions::to_string_t("");
    m_CurrencyCodeIsSet = false;
    m_CurrencySymbol = utility::conversions::to_string_t("");
    m_CurrencySymbolIsSet = false;
    m_FlagUrl = utility::conversions::to_string_t("");
    m_FlagUrlIsSet = false;
    m_StatesIsSet = false;
}

Country::~Country()
{
}

void Country::validate()
{
    // TODO: implement validation
}

web::json::value Country::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Iso3IsSet)
    {
        val[utility::conversions::to_string_t(U("iso3"))] = ModelBase::toJson(m_Iso3);
    }
    if(m_Iso2IsSet)
    {
        val[utility::conversions::to_string_t(U("iso2"))] = ModelBase::toJson(m_Iso2);
    }
    if(m_PhoneCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneCode"))] = ModelBase::toJson(m_PhoneCode);
    }
    if(m_CapitalIsSet)
    {
        val[utility::conversions::to_string_t(U("capital"))] = ModelBase::toJson(m_Capital);
    }
    if(m_CurrencyCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("currencyCode"))] = ModelBase::toJson(m_CurrencyCode);
    }
    if(m_CurrencySymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("currencySymbol"))] = ModelBase::toJson(m_CurrencySymbol);
    }
    if(m_FlagUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("flagUrl"))] = ModelBase::toJson(m_FlagUrl);
    }
    if(m_StatesIsSet)
    {
        val[utility::conversions::to_string_t(U("states"))] = ModelBase::toJson(m_States);
    }

    return val;
}

bool Country::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("iso3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("iso3")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_iso3;
            ok &= ModelBase::fromJson(fieldValue, refVal_iso3);
            setIso3(refVal_iso3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("iso2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("iso2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_iso2;
            ok &= ModelBase::fromJson(fieldValue, refVal_iso2);
            setIso2(refVal_iso2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_phoneCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_phoneCode);
            setPhoneCode(refVal_phoneCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("capital"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("capital")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_capital;
            ok &= ModelBase::fromJson(fieldValue, refVal_capital);
            setCapital(refVal_capital);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currencyCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currencyCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_currencyCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_currencyCode);
            setCurrencyCode(refVal_currencyCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currencySymbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currencySymbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_currencySymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_currencySymbol);
            setCurrencySymbol(refVal_currencySymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flagUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flagUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_flagUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_flagUrl);
            setFlagUrl(refVal_flagUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("states"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("states")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CountryState>> refVal_states;
            ok &= ModelBase::fromJson(fieldValue, refVal_states);
            setStates(refVal_states);
        }
    }
    return ok;
}

void Country::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Iso3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("iso3")), m_Iso3));
    }
    if(m_Iso2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("iso2")), m_Iso2));
    }
    if(m_PhoneCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneCode")), m_PhoneCode));
    }
    if(m_CapitalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("capital")), m_Capital));
    }
    if(m_CurrencyCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currencyCode")), m_CurrencyCode));
    }
    if(m_CurrencySymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currencySymbol")), m_CurrencySymbol));
    }
    if(m_FlagUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flagUrl")), m_FlagUrl));
    }
    if(m_StatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("states")), m_States));
    }
}

bool Country::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("iso3"))))
    {
        utility::string_t refVal_iso3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("iso3"))), refVal_iso3 );
        setIso3(refVal_iso3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("iso2"))))
    {
        utility::string_t refVal_iso2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("iso2"))), refVal_iso2 );
        setIso2(refVal_iso2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneCode"))))
    {
        utility::string_t refVal_phoneCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneCode"))), refVal_phoneCode );
        setPhoneCode(refVal_phoneCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("capital"))))
    {
        utility::string_t refVal_capital;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("capital"))), refVal_capital );
        setCapital(refVal_capital);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currencyCode"))))
    {
        utility::string_t refVal_currencyCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currencyCode"))), refVal_currencyCode );
        setCurrencyCode(refVal_currencyCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currencySymbol"))))
    {
        utility::string_t refVal_currencySymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currencySymbol"))), refVal_currencySymbol );
        setCurrencySymbol(refVal_currencySymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flagUrl"))))
    {
        utility::string_t refVal_flagUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flagUrl"))), refVal_flagUrl );
        setFlagUrl(refVal_flagUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("states"))))
    {
        std::vector<std::shared_ptr<CountryState>> refVal_states;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("states"))), refVal_states );
        setStates(refVal_states);
    }
    return ok;
}

utility::string_t Country::getId() const
{
    return m_Id;
}

void Country::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Country::idIsSet() const
{
    return m_IdIsSet;
}

void Country::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Country::getName() const
{
    return m_Name;
}

void Country::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Country::nameIsSet() const
{
    return m_NameIsSet;
}

void Country::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Country::getIso3() const
{
    return m_Iso3;
}

void Country::setIso3(const utility::string_t& value)
{
    m_Iso3 = value;
    m_Iso3IsSet = true;
}

bool Country::iso3IsSet() const
{
    return m_Iso3IsSet;
}

void Country::unsetIso3()
{
    m_Iso3IsSet = false;
}
utility::string_t Country::getIso2() const
{
    return m_Iso2;
}

void Country::setIso2(const utility::string_t& value)
{
    m_Iso2 = value;
    m_Iso2IsSet = true;
}

bool Country::iso2IsSet() const
{
    return m_Iso2IsSet;
}

void Country::unsetIso2()
{
    m_Iso2IsSet = false;
}
utility::string_t Country::getPhoneCode() const
{
    return m_PhoneCode;
}

void Country::setPhoneCode(const utility::string_t& value)
{
    m_PhoneCode = value;
    m_PhoneCodeIsSet = true;
}

bool Country::phoneCodeIsSet() const
{
    return m_PhoneCodeIsSet;
}

void Country::unsetPhoneCode()
{
    m_PhoneCodeIsSet = false;
}
utility::string_t Country::getCapital() const
{
    return m_Capital;
}

void Country::setCapital(const utility::string_t& value)
{
    m_Capital = value;
    m_CapitalIsSet = true;
}

bool Country::capitalIsSet() const
{
    return m_CapitalIsSet;
}

void Country::unsetCapital()
{
    m_CapitalIsSet = false;
}
utility::string_t Country::getCurrencyCode() const
{
    return m_CurrencyCode;
}

void Country::setCurrencyCode(const utility::string_t& value)
{
    m_CurrencyCode = value;
    m_CurrencyCodeIsSet = true;
}

bool Country::currencyCodeIsSet() const
{
    return m_CurrencyCodeIsSet;
}

void Country::unsetCurrencyCode()
{
    m_CurrencyCodeIsSet = false;
}
utility::string_t Country::getCurrencySymbol() const
{
    return m_CurrencySymbol;
}

void Country::setCurrencySymbol(const utility::string_t& value)
{
    m_CurrencySymbol = value;
    m_CurrencySymbolIsSet = true;
}

bool Country::currencySymbolIsSet() const
{
    return m_CurrencySymbolIsSet;
}

void Country::unsetCurrencySymbol()
{
    m_CurrencySymbolIsSet = false;
}
utility::string_t Country::getFlagUrl() const
{
    return m_FlagUrl;
}

void Country::setFlagUrl(const utility::string_t& value)
{
    m_FlagUrl = value;
    m_FlagUrlIsSet = true;
}

bool Country::flagUrlIsSet() const
{
    return m_FlagUrlIsSet;
}

void Country::unsetFlagUrl()
{
    m_FlagUrlIsSet = false;
}
std::vector<std::shared_ptr<CountryState>>& Country::getStates()
{
    return m_States;
}

void Country::setStates(const std::vector<std::shared_ptr<CountryState>>& value)
{
    m_States = value;
    m_StatesIsSet = true;
}

bool Country::statesIsSet() const
{
    return m_StatesIsSet;
}

void Country::unsetStates()
{
    m_StatesIsSet = false;
}
}
}


