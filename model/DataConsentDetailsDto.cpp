/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsentDetailsDto.h"

namespace mydatamyconsent {
namespace models {




DataConsentDetailsDto::DataConsentDetailsDto()
{
    m_ConsentRequestId = utility::conversions::to_string_t("");
    m_ConsentRequestIdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DataLifeIsSet = false;
    m_RequestedByOrgIsSet = false;
    m_CollectablesIsSet = false;
    m_StatusIsSet = false;
    m_ApprovedAtUtc = utility::datetime();
    m_ApprovedAtUtcIsSet = false;
    m_ApprovedExpiresAtUtc = utility::datetime();
    m_ApprovedExpiresAtUtcIsSet = false;
    m_RejectedAtUtc = utility::datetime();
    m_RejectedAtUtcIsSet = false;
    m_RevokedAtUtc = utility::datetime();
    m_RevokedAtUtcIsSet = false;
    m_RequestedExpiresAtUtc = utility::datetime();
    m_RequestedExpiresAtUtcIsSet = false;
    m_RequestedAtUtc = utility::datetime();
    m_RequestedAtUtcIsSet = false;
    m_IdentifiersIsSet = false;
    m_DocumentsIsSet = false;
}

DataConsentDetailsDto::~DataConsentDetailsDto()
{
}

void DataConsentDetailsDto::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentDetailsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConsentRequestIdIsSet)
    {
        val[utility::conversions::to_string_t(U("consentRequestId"))] = ModelBase::toJson(m_ConsentRequestId);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_DataLifeIsSet)
    {
        val[utility::conversions::to_string_t(U("dataLife"))] = ModelBase::toJson(m_DataLife);
    }
    if(m_RequestedByOrgIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedByOrg"))] = ModelBase::toJson(m_RequestedByOrg);
    }
    if(m_CollectablesIsSet)
    {
        val[utility::conversions::to_string_t(U("collectables"))] = ModelBase::toJson(m_Collectables);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_ApprovedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedAtUtc"))] = ModelBase::toJson(m_ApprovedAtUtc);
    }
    if(m_ApprovedExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedExpiresAtUtc"))] = ModelBase::toJson(m_ApprovedExpiresAtUtc);
    }
    if(m_RejectedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("rejectedAtUtc"))] = ModelBase::toJson(m_RejectedAtUtc);
    }
    if(m_RevokedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("revokedAtUtc"))] = ModelBase::toJson(m_RevokedAtUtc);
    }
    if(m_RequestedExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedExpiresAtUtc"))] = ModelBase::toJson(m_RequestedExpiresAtUtc);
    }
    if(m_RequestedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedAtUtc"))] = ModelBase::toJson(m_RequestedAtUtc);
    }
    if(m_IdentifiersIsSet)
    {
        val[utility::conversions::to_string_t(U("identifiers"))] = ModelBase::toJson(m_Identifiers);
    }
    if(m_DocumentsIsSet)
    {
        val[utility::conversions::to_string_t(U("documents"))] = ModelBase::toJson(m_Documents);
    }

    return val;
}

bool DataConsentDetailsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("consentRequestId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consentRequestId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_consentRequestId;
            ok &= ModelBase::fromJson(fieldValue, refVal_consentRequestId);
            setConsentRequestId(refVal_consentRequestId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataLife"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataLife")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Life> refVal_dataLife;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataLife);
            setDataLife(refVal_dataLife);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedByOrg"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedByOrg")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Requester> refVal_requestedByOrg;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedByOrg);
            setRequestedByOrg(refVal_requestedByOrg);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collectables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collectables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CollectibleTypes>> refVal_collectables;
            ok &= ModelBase::fromJson(fieldValue, refVal_collectables);
            setCollectables(refVal_collectables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataConsentStatus> refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_approvedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvedAtUtc);
            setApprovedAtUtc(refVal_approvedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedExpiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedExpiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_approvedExpiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvedExpiresAtUtc);
            setApprovedExpiresAtUtc(refVal_approvedExpiresAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rejectedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejectedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_rejectedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_rejectedAtUtc);
            setRejectedAtUtc(refVal_rejectedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("revokedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("revokedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_revokedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_revokedAtUtc);
            setRevokedAtUtc(refVal_revokedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedExpiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedExpiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_requestedExpiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedExpiresAtUtc);
            setRequestedExpiresAtUtc(refVal_requestedExpiresAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_requestedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedAtUtc);
            setRequestedAtUtc(refVal_requestedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identifiers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifiers")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_identifiers;
            ok &= ModelBase::fromJson(fieldValue, refVal_identifiers);
            setIdentifiers(refVal_identifiers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documents")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>> refVal_documents;
            ok &= ModelBase::fromJson(fieldValue, refVal_documents);
            setDocuments(refVal_documents);
        }
    }
    return ok;
}

void DataConsentDetailsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ConsentRequestIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consentRequestId")), m_ConsentRequestId));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_DataLifeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataLife")), m_DataLife));
    }
    if(m_RequestedByOrgIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedByOrg")), m_RequestedByOrg));
    }
    if(m_CollectablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collectables")), m_Collectables));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_ApprovedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedAtUtc")), m_ApprovedAtUtc));
    }
    if(m_ApprovedExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedExpiresAtUtc")), m_ApprovedExpiresAtUtc));
    }
    if(m_RejectedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejectedAtUtc")), m_RejectedAtUtc));
    }
    if(m_RevokedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("revokedAtUtc")), m_RevokedAtUtc));
    }
    if(m_RequestedExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedExpiresAtUtc")), m_RequestedExpiresAtUtc));
    }
    if(m_RequestedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedAtUtc")), m_RequestedAtUtc));
    }
    if(m_IdentifiersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifiers")), m_Identifiers));
    }
    if(m_DocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documents")), m_Documents));
    }
}

bool DataConsentDetailsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("consentRequestId"))))
    {
        utility::string_t refVal_consentRequestId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consentRequestId"))), refVal_consentRequestId );
        setConsentRequestId(refVal_consentRequestId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataLife"))))
    {
        std::shared_ptr<Life> refVal_dataLife;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataLife"))), refVal_dataLife );
        setDataLife(refVal_dataLife);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedByOrg"))))
    {
        std::shared_ptr<Requester> refVal_requestedByOrg;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedByOrg"))), refVal_requestedByOrg );
        setRequestedByOrg(refVal_requestedByOrg);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collectables"))))
    {
        std::vector<std::shared_ptr<CollectibleTypes>> refVal_collectables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collectables"))), refVal_collectables );
        setCollectables(refVal_collectables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<DataConsentStatus> refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        utility::datetime refVal_approvedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedAtUtc"))), refVal_approvedAtUtc );
        setApprovedAtUtc(refVal_approvedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedExpiresAtUtc"))))
    {
        utility::datetime refVal_approvedExpiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedExpiresAtUtc"))), refVal_approvedExpiresAtUtc );
        setApprovedExpiresAtUtc(refVal_approvedExpiresAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rejectedAtUtc"))))
    {
        utility::datetime refVal_rejectedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejectedAtUtc"))), refVal_rejectedAtUtc );
        setRejectedAtUtc(refVal_rejectedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("revokedAtUtc"))))
    {
        utility::datetime refVal_revokedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("revokedAtUtc"))), refVal_revokedAtUtc );
        setRevokedAtUtc(refVal_revokedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedExpiresAtUtc"))))
    {
        utility::datetime refVal_requestedExpiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedExpiresAtUtc"))), refVal_requestedExpiresAtUtc );
        setRequestedExpiresAtUtc(refVal_requestedExpiresAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedAtUtc"))))
    {
        utility::datetime refVal_requestedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedAtUtc"))), refVal_requestedAtUtc );
        setRequestedAtUtc(refVal_requestedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identifiers"))))
    {
        std::shared_ptr<AnyType> refVal_identifiers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifiers"))), refVal_identifiers );
        setIdentifiers(refVal_identifiers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documents"))))
    {
        std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>> refVal_documents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documents"))), refVal_documents );
        setDocuments(refVal_documents);
    }
    return ok;
}

utility::string_t DataConsentDetailsDto::getConsentRequestId() const
{
    return m_ConsentRequestId;
}

void DataConsentDetailsDto::setConsentRequestId(const utility::string_t& value)
{
    m_ConsentRequestId = value;
    m_ConsentRequestIdIsSet = true;
}

bool DataConsentDetailsDto::consentRequestIdIsSet() const
{
    return m_ConsentRequestIdIsSet;
}

void DataConsentDetailsDto::unsetConsentRequestId()
{
    m_ConsentRequestIdIsSet = false;
}
utility::string_t DataConsentDetailsDto::getTitle() const
{
    return m_Title;
}

void DataConsentDetailsDto::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool DataConsentDetailsDto::titleIsSet() const
{
    return m_TitleIsSet;
}

void DataConsentDetailsDto::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t DataConsentDetailsDto::getDescription() const
{
    return m_Description;
}

void DataConsentDetailsDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool DataConsentDetailsDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void DataConsentDetailsDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<Life> DataConsentDetailsDto::getDataLife() const
{
    return m_DataLife;
}

void DataConsentDetailsDto::setDataLife(const std::shared_ptr<Life>& value)
{
    m_DataLife = value;
    m_DataLifeIsSet = true;
}

bool DataConsentDetailsDto::dataLifeIsSet() const
{
    return m_DataLifeIsSet;
}

void DataConsentDetailsDto::unsetDataLife()
{
    m_DataLifeIsSet = false;
}
std::shared_ptr<Requester> DataConsentDetailsDto::getRequestedByOrg() const
{
    return m_RequestedByOrg;
}

void DataConsentDetailsDto::setRequestedByOrg(const std::shared_ptr<Requester>& value)
{
    m_RequestedByOrg = value;
    m_RequestedByOrgIsSet = true;
}

bool DataConsentDetailsDto::requestedByOrgIsSet() const
{
    return m_RequestedByOrgIsSet;
}

void DataConsentDetailsDto::unsetRequestedByOrg()
{
    m_RequestedByOrgIsSet = false;
}
std::vector<std::shared_ptr<CollectibleTypes>>& DataConsentDetailsDto::getCollectables()
{
    return m_Collectables;
}

void DataConsentDetailsDto::setCollectables(const std::vector<std::shared_ptr<CollectibleTypes>>& value)
{
    m_Collectables = value;
    m_CollectablesIsSet = true;
}

bool DataConsentDetailsDto::collectablesIsSet() const
{
    return m_CollectablesIsSet;
}

void DataConsentDetailsDto::unsetCollectables()
{
    m_CollectablesIsSet = false;
}
std::shared_ptr<DataConsentStatus> DataConsentDetailsDto::getStatus() const
{
    return m_Status;
}

void DataConsentDetailsDto::setStatus(const std::shared_ptr<DataConsentStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool DataConsentDetailsDto::statusIsSet() const
{
    return m_StatusIsSet;
}

void DataConsentDetailsDto::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::datetime DataConsentDetailsDto::getApprovedAtUtc() const
{
    return m_ApprovedAtUtc;
}

void DataConsentDetailsDto::setApprovedAtUtc(const utility::datetime& value)
{
    m_ApprovedAtUtc = value;
    m_ApprovedAtUtcIsSet = true;
}

bool DataConsentDetailsDto::approvedAtUtcIsSet() const
{
    return m_ApprovedAtUtcIsSet;
}

void DataConsentDetailsDto::unsetApprovedAtUtc()
{
    m_ApprovedAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getApprovedExpiresAtUtc() const
{
    return m_ApprovedExpiresAtUtc;
}

void DataConsentDetailsDto::setApprovedExpiresAtUtc(const utility::datetime& value)
{
    m_ApprovedExpiresAtUtc = value;
    m_ApprovedExpiresAtUtcIsSet = true;
}

bool DataConsentDetailsDto::approvedExpiresAtUtcIsSet() const
{
    return m_ApprovedExpiresAtUtcIsSet;
}

void DataConsentDetailsDto::unsetApprovedExpiresAtUtc()
{
    m_ApprovedExpiresAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getRejectedAtUtc() const
{
    return m_RejectedAtUtc;
}

void DataConsentDetailsDto::setRejectedAtUtc(const utility::datetime& value)
{
    m_RejectedAtUtc = value;
    m_RejectedAtUtcIsSet = true;
}

bool DataConsentDetailsDto::rejectedAtUtcIsSet() const
{
    return m_RejectedAtUtcIsSet;
}

void DataConsentDetailsDto::unsetRejectedAtUtc()
{
    m_RejectedAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getRevokedAtUtc() const
{
    return m_RevokedAtUtc;
}

void DataConsentDetailsDto::setRevokedAtUtc(const utility::datetime& value)
{
    m_RevokedAtUtc = value;
    m_RevokedAtUtcIsSet = true;
}

bool DataConsentDetailsDto::revokedAtUtcIsSet() const
{
    return m_RevokedAtUtcIsSet;
}

void DataConsentDetailsDto::unsetRevokedAtUtc()
{
    m_RevokedAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getRequestedExpiresAtUtc() const
{
    return m_RequestedExpiresAtUtc;
}

void DataConsentDetailsDto::setRequestedExpiresAtUtc(const utility::datetime& value)
{
    m_RequestedExpiresAtUtc = value;
    m_RequestedExpiresAtUtcIsSet = true;
}

bool DataConsentDetailsDto::requestedExpiresAtUtcIsSet() const
{
    return m_RequestedExpiresAtUtcIsSet;
}

void DataConsentDetailsDto::unsetRequestedExpiresAtUtc()
{
    m_RequestedExpiresAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getRequestedAtUtc() const
{
    return m_RequestedAtUtc;
}

void DataConsentDetailsDto::setRequestedAtUtc(const utility::datetime& value)
{
    m_RequestedAtUtc = value;
    m_RequestedAtUtcIsSet = true;
}

bool DataConsentDetailsDto::requestedAtUtcIsSet() const
{
    return m_RequestedAtUtcIsSet;
}

void DataConsentDetailsDto::unsetRequestedAtUtc()
{
    m_RequestedAtUtcIsSet = false;
}
std::shared_ptr<AnyType> DataConsentDetailsDto::getIdentifiers() const
{
    return m_Identifiers;
}

void DataConsentDetailsDto::setIdentifiers(const std::shared_ptr<AnyType>& value)
{
    m_Identifiers = value;
    m_IdentifiersIsSet = true;
}

bool DataConsentDetailsDto::identifiersIsSet() const
{
    return m_IdentifiersIsSet;
}

void DataConsentDetailsDto::unsetIdentifiers()
{
    m_IdentifiersIsSet = false;
}
std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>>& DataConsentDetailsDto::getDocuments()
{
    return m_Documents;
}

void DataConsentDetailsDto::setDocuments(const std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>>& value)
{
    m_Documents = value;
    m_DocumentsIsSet = true;
}

bool DataConsentDetailsDto::documentsIsSet() const
{
    return m_DocumentsIsSet;
}

void DataConsentDetailsDto::unsetDocuments()
{
    m_DocumentsIsSet = false;
}
}
}


