/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsentDetailsDto.h"

namespace mydatamyconsent {
namespace models {




DataConsentDetailsDto::DataConsentDetailsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DataLifeIsSet = false;
    m_RequesterName = utility::conversions::to_string_t("");
    m_RequesterNameIsSet = false;
    m_RequesterLogo = utility::conversions::to_string_t("");
    m_RequesterLogoIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
    m_StatusIsSet = false;
    m_ApprovedAtUtc = utility::datetime();
    m_ApprovedAtUtcIsSet = false;
    m_RejectedAtUtc = utility::datetime();
    m_RejectedAtUtcIsSet = false;
    m_ExpiresAtUtc = utility::datetime();
    m_ExpiresAtUtcIsSet = false;
    m_RequestedAtUtc = utility::datetime();
    m_RequestedAtUtcIsSet = false;
    m_IdentifiersIsSet = false;
    m_DocumentsIsSet = false;
    m_Financials = utility::conversions::to_string_t("");
    m_FinancialsIsSet = false;
    m_HealthRecords = utility::conversions::to_string_t("");
    m_HealthRecordsIsSet = false;
}

DataConsentDetailsDto::~DataConsentDetailsDto()
{
}

void DataConsentDetailsDto::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentDetailsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_DataLifeIsSet)
    {
        val[utility::conversions::to_string_t(U("dataLife"))] = ModelBase::toJson(m_DataLife);
    }
    if(m_RequesterNameIsSet)
    {
        val[utility::conversions::to_string_t(U("requesterName"))] = ModelBase::toJson(m_RequesterName);
    }
    if(m_RequesterLogoIsSet)
    {
        val[utility::conversions::to_string_t(U("requesterLogo"))] = ModelBase::toJson(m_RequesterLogo);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t(U("location"))] = ModelBase::toJson(m_Location);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_ApprovedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedAtUtc"))] = ModelBase::toJson(m_ApprovedAtUtc);
    }
    if(m_RejectedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("rejectedAtUtc"))] = ModelBase::toJson(m_RejectedAtUtc);
    }
    if(m_ExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAtUtc"))] = ModelBase::toJson(m_ExpiresAtUtc);
    }
    if(m_RequestedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedAtUtc"))] = ModelBase::toJson(m_RequestedAtUtc);
    }
    if(m_IdentifiersIsSet)
    {
        val[utility::conversions::to_string_t(U("identifiers"))] = ModelBase::toJson(m_Identifiers);
    }
    if(m_DocumentsIsSet)
    {
        val[utility::conversions::to_string_t(U("documents"))] = ModelBase::toJson(m_Documents);
    }
    if(m_FinancialsIsSet)
    {
        val[utility::conversions::to_string_t(U("financials"))] = ModelBase::toJson(m_Financials);
    }
    if(m_HealthRecordsIsSet)
    {
        val[utility::conversions::to_string_t(U("healthRecords"))] = ModelBase::toJson(m_HealthRecords);
    }

    return val;
}

bool DataConsentDetailsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataLife"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataLife")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Life> refVal_dataLife;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataLife);
            setDataLife(refVal_dataLife);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requesterName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requesterName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_requesterName;
            ok &= ModelBase::fromJson(fieldValue, refVal_requesterName);
            setRequesterName(refVal_requesterName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requesterLogo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requesterLogo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_requesterLogo;
            ok &= ModelBase::fromJson(fieldValue, refVal_requesterLogo);
            setRequesterLogo(refVal_requesterLogo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("location"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("location")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_location;
            ok &= ModelBase::fromJson(fieldValue, refVal_location);
            setLocation(refVal_location);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataConsentStatus> refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_approvedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvedAtUtc);
            setApprovedAtUtc(refVal_approvedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rejectedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejectedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_rejectedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_rejectedAtUtc);
            setRejectedAtUtc(refVal_rejectedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_expiresAtUtc);
            setExpiresAtUtc(refVal_expiresAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_requestedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedAtUtc);
            setRequestedAtUtc(refVal_requestedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identifiers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifiers")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<JsonSchema> refVal_identifiers;
            ok &= ModelBase::fromJson(fieldValue, refVal_identifiers);
            setIdentifiers(refVal_identifiers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documents")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>> refVal_documents;
            ok &= ModelBase::fromJson(fieldValue, refVal_documents);
            setDocuments(refVal_documents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("financials"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("financials")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_financials;
            ok &= ModelBase::fromJson(fieldValue, refVal_financials);
            setFinancials(refVal_financials);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("healthRecords"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("healthRecords")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_healthRecords;
            ok &= ModelBase::fromJson(fieldValue, refVal_healthRecords);
            setHealthRecords(refVal_healthRecords);
        }
    }
    return ok;
}

void DataConsentDetailsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_DataLifeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataLife")), m_DataLife));
    }
    if(m_RequesterNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requesterName")), m_RequesterName));
    }
    if(m_RequesterLogoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requesterLogo")), m_RequesterLogo));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("location")), m_Location));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_ApprovedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedAtUtc")), m_ApprovedAtUtc));
    }
    if(m_RejectedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejectedAtUtc")), m_RejectedAtUtc));
    }
    if(m_ExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAtUtc")), m_ExpiresAtUtc));
    }
    if(m_RequestedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedAtUtc")), m_RequestedAtUtc));
    }
    if(m_IdentifiersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifiers")), m_Identifiers));
    }
    if(m_DocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documents")), m_Documents));
    }
    if(m_FinancialsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("financials")), m_Financials));
    }
    if(m_HealthRecordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("healthRecords")), m_HealthRecords));
    }
}

bool DataConsentDetailsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataLife"))))
    {
        std::shared_ptr<Life> refVal_dataLife;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataLife"))), refVal_dataLife );
        setDataLife(refVal_dataLife);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requesterName"))))
    {
        utility::string_t refVal_requesterName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requesterName"))), refVal_requesterName );
        setRequesterName(refVal_requesterName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requesterLogo"))))
    {
        utility::string_t refVal_requesterLogo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requesterLogo"))), refVal_requesterLogo );
        setRequesterLogo(refVal_requesterLogo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("location"))))
    {
        utility::string_t refVal_location;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("location"))), refVal_location );
        setLocation(refVal_location);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<DataConsentStatus> refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        utility::datetime refVal_approvedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedAtUtc"))), refVal_approvedAtUtc );
        setApprovedAtUtc(refVal_approvedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rejectedAtUtc"))))
    {
        utility::datetime refVal_rejectedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejectedAtUtc"))), refVal_rejectedAtUtc );
        setRejectedAtUtc(refVal_rejectedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        utility::datetime refVal_expiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAtUtc"))), refVal_expiresAtUtc );
        setExpiresAtUtc(refVal_expiresAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedAtUtc"))))
    {
        utility::datetime refVal_requestedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedAtUtc"))), refVal_requestedAtUtc );
        setRequestedAtUtc(refVal_requestedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identifiers"))))
    {
        std::shared_ptr<JsonSchema> refVal_identifiers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifiers"))), refVal_identifiers );
        setIdentifiers(refVal_identifiers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documents"))))
    {
        std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>> refVal_documents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documents"))), refVal_documents );
        setDocuments(refVal_documents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("financials"))))
    {
        utility::string_t refVal_financials;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("financials"))), refVal_financials );
        setFinancials(refVal_financials);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("healthRecords"))))
    {
        utility::string_t refVal_healthRecords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("healthRecords"))), refVal_healthRecords );
        setHealthRecords(refVal_healthRecords);
    }
    return ok;
}

utility::string_t DataConsentDetailsDto::getId() const
{
    return m_Id;
}

void DataConsentDetailsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DataConsentDetailsDto::idIsSet() const
{
    return m_IdIsSet;
}

void DataConsentDetailsDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DataConsentDetailsDto::getTitle() const
{
    return m_Title;
}

void DataConsentDetailsDto::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool DataConsentDetailsDto::titleIsSet() const
{
    return m_TitleIsSet;
}

void DataConsentDetailsDto::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t DataConsentDetailsDto::getDescription() const
{
    return m_Description;
}

void DataConsentDetailsDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool DataConsentDetailsDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void DataConsentDetailsDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<Life> DataConsentDetailsDto::getDataLife() const
{
    return m_DataLife;
}

void DataConsentDetailsDto::setDataLife(const std::shared_ptr<Life>& value)
{
    m_DataLife = value;
    m_DataLifeIsSet = true;
}

bool DataConsentDetailsDto::dataLifeIsSet() const
{
    return m_DataLifeIsSet;
}

void DataConsentDetailsDto::unsetDataLife()
{
    m_DataLifeIsSet = false;
}
utility::string_t DataConsentDetailsDto::getRequesterName() const
{
    return m_RequesterName;
}

void DataConsentDetailsDto::setRequesterName(const utility::string_t& value)
{
    m_RequesterName = value;
    m_RequesterNameIsSet = true;
}

bool DataConsentDetailsDto::requesterNameIsSet() const
{
    return m_RequesterNameIsSet;
}

void DataConsentDetailsDto::unsetRequesterName()
{
    m_RequesterNameIsSet = false;
}
utility::string_t DataConsentDetailsDto::getRequesterLogo() const
{
    return m_RequesterLogo;
}

void DataConsentDetailsDto::setRequesterLogo(const utility::string_t& value)
{
    m_RequesterLogo = value;
    m_RequesterLogoIsSet = true;
}

bool DataConsentDetailsDto::requesterLogoIsSet() const
{
    return m_RequesterLogoIsSet;
}

void DataConsentDetailsDto::unsetRequesterLogo()
{
    m_RequesterLogoIsSet = false;
}
utility::string_t DataConsentDetailsDto::getLocation() const
{
    return m_Location;
}

void DataConsentDetailsDto::setLocation(const utility::string_t& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool DataConsentDetailsDto::locationIsSet() const
{
    return m_LocationIsSet;
}

void DataConsentDetailsDto::unsetLocation()
{
    m_LocationIsSet = false;
}
std::shared_ptr<DataConsentStatus> DataConsentDetailsDto::getStatus() const
{
    return m_Status;
}

void DataConsentDetailsDto::setStatus(const std::shared_ptr<DataConsentStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool DataConsentDetailsDto::statusIsSet() const
{
    return m_StatusIsSet;
}

void DataConsentDetailsDto::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::datetime DataConsentDetailsDto::getApprovedAtUtc() const
{
    return m_ApprovedAtUtc;
}

void DataConsentDetailsDto::setApprovedAtUtc(const utility::datetime& value)
{
    m_ApprovedAtUtc = value;
    m_ApprovedAtUtcIsSet = true;
}

bool DataConsentDetailsDto::approvedAtUtcIsSet() const
{
    return m_ApprovedAtUtcIsSet;
}

void DataConsentDetailsDto::unsetApprovedAtUtc()
{
    m_ApprovedAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getRejectedAtUtc() const
{
    return m_RejectedAtUtc;
}

void DataConsentDetailsDto::setRejectedAtUtc(const utility::datetime& value)
{
    m_RejectedAtUtc = value;
    m_RejectedAtUtcIsSet = true;
}

bool DataConsentDetailsDto::rejectedAtUtcIsSet() const
{
    return m_RejectedAtUtcIsSet;
}

void DataConsentDetailsDto::unsetRejectedAtUtc()
{
    m_RejectedAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getExpiresAtUtc() const
{
    return m_ExpiresAtUtc;
}

void DataConsentDetailsDto::setExpiresAtUtc(const utility::datetime& value)
{
    m_ExpiresAtUtc = value;
    m_ExpiresAtUtcIsSet = true;
}

bool DataConsentDetailsDto::expiresAtUtcIsSet() const
{
    return m_ExpiresAtUtcIsSet;
}

void DataConsentDetailsDto::unsetExpiresAtUtc()
{
    m_ExpiresAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getRequestedAtUtc() const
{
    return m_RequestedAtUtc;
}

void DataConsentDetailsDto::setRequestedAtUtc(const utility::datetime& value)
{
    m_RequestedAtUtc = value;
    m_RequestedAtUtcIsSet = true;
}

bool DataConsentDetailsDto::requestedAtUtcIsSet() const
{
    return m_RequestedAtUtcIsSet;
}

void DataConsentDetailsDto::unsetRequestedAtUtc()
{
    m_RequestedAtUtcIsSet = false;
}
std::shared_ptr<JsonSchema> DataConsentDetailsDto::getIdentifiers() const
{
    return m_Identifiers;
}

void DataConsentDetailsDto::setIdentifiers(const std::shared_ptr<JsonSchema>& value)
{
    m_Identifiers = value;
    m_IdentifiersIsSet = true;
}

bool DataConsentDetailsDto::identifiersIsSet() const
{
    return m_IdentifiersIsSet;
}

void DataConsentDetailsDto::unsetIdentifiers()
{
    m_IdentifiersIsSet = false;
}
std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>>& DataConsentDetailsDto::getDocuments()
{
    return m_Documents;
}

void DataConsentDetailsDto::setDocuments(const std::vector<std::shared_ptr<DataConsentDocumentDetailsDto>>& value)
{
    m_Documents = value;
    m_DocumentsIsSet = true;
}

bool DataConsentDetailsDto::documentsIsSet() const
{
    return m_DocumentsIsSet;
}

void DataConsentDetailsDto::unsetDocuments()
{
    m_DocumentsIsSet = false;
}
utility::string_t DataConsentDetailsDto::getFinancials() const
{
    return m_Financials;
}

void DataConsentDetailsDto::setFinancials(const utility::string_t& value)
{
    m_Financials = value;
    m_FinancialsIsSet = true;
}

bool DataConsentDetailsDto::financialsIsSet() const
{
    return m_FinancialsIsSet;
}

void DataConsentDetailsDto::unsetFinancials()
{
    m_FinancialsIsSet = false;
}
utility::string_t DataConsentDetailsDto::getHealthRecords() const
{
    return m_HealthRecords;
}

void DataConsentDetailsDto::setHealthRecords(const utility::string_t& value)
{
    m_HealthRecords = value;
    m_HealthRecordsIsSet = true;
}

bool DataConsentDetailsDto::healthRecordsIsSet() const
{
    return m_HealthRecordsIsSet;
}

void DataConsentDetailsDto::unsetHealthRecords()
{
    m_HealthRecordsIsSet = false;
}
}
}


