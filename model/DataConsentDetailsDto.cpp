/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsentDetailsDto.h"

namespace mydatamyconsent {
namespace models {




DataConsentDetailsDto::DataConsentDetailsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_StatusIsSet = false;
    m_ApprovedAtUtc = utility::datetime();
    m_ApprovedAtUtcIsSet = false;
    m_RejectedAtUtc = utility::datetime();
    m_RejectedAtUtcIsSet = false;
    m_ExpiresAtUtc = utility::datetime();
    m_ExpiresAtUtcIsSet = false;
    m_RequestedAtUtc = utility::datetime();
    m_RequestedAtUtcIsSet = false;
    m_RequesterIsSet = false;
    m_ConsentDetailsIsSet = false;
}

DataConsentDetailsDto::~DataConsentDetailsDto()
{
}

void DataConsentDetailsDto::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentDetailsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_ApprovedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedAtUtc"))] = ModelBase::toJson(m_ApprovedAtUtc);
    }
    if(m_RejectedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("rejectedAtUtc"))] = ModelBase::toJson(m_RejectedAtUtc);
    }
    if(m_ExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAtUtc"))] = ModelBase::toJson(m_ExpiresAtUtc);
    }
    if(m_RequestedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedAtUtc"))] = ModelBase::toJson(m_RequestedAtUtc);
    }
    if(m_RequesterIsSet)
    {
        val[utility::conversions::to_string_t(U("requester"))] = ModelBase::toJson(m_Requester);
    }
    if(m_ConsentDetailsIsSet)
    {
        val[utility::conversions::to_string_t(U("consentDetails"))] = ModelBase::toJson(m_ConsentDetails);
    }

    return val;
}

bool DataConsentDetailsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataConsentStatus> refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_approvedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvedAtUtc);
            setApprovedAtUtc(refVal_approvedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rejectedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejectedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_rejectedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_rejectedAtUtc);
            setRejectedAtUtc(refVal_rejectedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_expiresAtUtc);
            setExpiresAtUtc(refVal_expiresAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_requestedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedAtUtc);
            setRequestedAtUtc(refVal_requestedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requester"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requester")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataConsentRequesterDto> refVal_requester;
            ok &= ModelBase::fromJson(fieldValue, refVal_requester);
            setRequester(refVal_requester);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consentDetails"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consentDetails")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetConsentTemplateDetailsDto> refVal_consentDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_consentDetails);
            setConsentDetails(refVal_consentDetails);
        }
    }
    return ok;
}

void DataConsentDetailsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_ApprovedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedAtUtc")), m_ApprovedAtUtc));
    }
    if(m_RejectedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejectedAtUtc")), m_RejectedAtUtc));
    }
    if(m_ExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAtUtc")), m_ExpiresAtUtc));
    }
    if(m_RequestedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedAtUtc")), m_RequestedAtUtc));
    }
    if(m_RequesterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requester")), m_Requester));
    }
    if(m_ConsentDetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consentDetails")), m_ConsentDetails));
    }
}

bool DataConsentDetailsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<DataConsentStatus> refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedAtUtc"))))
    {
        utility::datetime refVal_approvedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedAtUtc"))), refVal_approvedAtUtc );
        setApprovedAtUtc(refVal_approvedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rejectedAtUtc"))))
    {
        utility::datetime refVal_rejectedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejectedAtUtc"))), refVal_rejectedAtUtc );
        setRejectedAtUtc(refVal_rejectedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        utility::datetime refVal_expiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAtUtc"))), refVal_expiresAtUtc );
        setExpiresAtUtc(refVal_expiresAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedAtUtc"))))
    {
        utility::datetime refVal_requestedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedAtUtc"))), refVal_requestedAtUtc );
        setRequestedAtUtc(refVal_requestedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requester"))))
    {
        std::shared_ptr<DataConsentRequesterDto> refVal_requester;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requester"))), refVal_requester );
        setRequester(refVal_requester);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consentDetails"))))
    {
        std::shared_ptr<GetConsentTemplateDetailsDto> refVal_consentDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consentDetails"))), refVal_consentDetails );
        setConsentDetails(refVal_consentDetails);
    }
    return ok;
}

utility::string_t DataConsentDetailsDto::getId() const
{
    return m_Id;
}

void DataConsentDetailsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DataConsentDetailsDto::idIsSet() const
{
    return m_IdIsSet;
}

void DataConsentDetailsDto::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<DataConsentStatus> DataConsentDetailsDto::getStatus() const
{
    return m_Status;
}

void DataConsentDetailsDto::setStatus(const std::shared_ptr<DataConsentStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool DataConsentDetailsDto::statusIsSet() const
{
    return m_StatusIsSet;
}

void DataConsentDetailsDto::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::datetime DataConsentDetailsDto::getApprovedAtUtc() const
{
    return m_ApprovedAtUtc;
}

void DataConsentDetailsDto::setApprovedAtUtc(const utility::datetime& value)
{
    m_ApprovedAtUtc = value;
    m_ApprovedAtUtcIsSet = true;
}

bool DataConsentDetailsDto::approvedAtUtcIsSet() const
{
    return m_ApprovedAtUtcIsSet;
}

void DataConsentDetailsDto::unsetApprovedAtUtc()
{
    m_ApprovedAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getRejectedAtUtc() const
{
    return m_RejectedAtUtc;
}

void DataConsentDetailsDto::setRejectedAtUtc(const utility::datetime& value)
{
    m_RejectedAtUtc = value;
    m_RejectedAtUtcIsSet = true;
}

bool DataConsentDetailsDto::rejectedAtUtcIsSet() const
{
    return m_RejectedAtUtcIsSet;
}

void DataConsentDetailsDto::unsetRejectedAtUtc()
{
    m_RejectedAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getExpiresAtUtc() const
{
    return m_ExpiresAtUtc;
}

void DataConsentDetailsDto::setExpiresAtUtc(const utility::datetime& value)
{
    m_ExpiresAtUtc = value;
    m_ExpiresAtUtcIsSet = true;
}

bool DataConsentDetailsDto::expiresAtUtcIsSet() const
{
    return m_ExpiresAtUtcIsSet;
}

void DataConsentDetailsDto::unsetExpiresAtUtc()
{
    m_ExpiresAtUtcIsSet = false;
}
utility::datetime DataConsentDetailsDto::getRequestedAtUtc() const
{
    return m_RequestedAtUtc;
}

void DataConsentDetailsDto::setRequestedAtUtc(const utility::datetime& value)
{
    m_RequestedAtUtc = value;
    m_RequestedAtUtcIsSet = true;
}

bool DataConsentDetailsDto::requestedAtUtcIsSet() const
{
    return m_RequestedAtUtcIsSet;
}

void DataConsentDetailsDto::unsetRequestedAtUtc()
{
    m_RequestedAtUtcIsSet = false;
}
std::shared_ptr<DataConsentRequesterDto> DataConsentDetailsDto::getRequester() const
{
    return m_Requester;
}

void DataConsentDetailsDto::setRequester(const std::shared_ptr<DataConsentRequesterDto>& value)
{
    m_Requester = value;
    m_RequesterIsSet = true;
}

bool DataConsentDetailsDto::requesterIsSet() const
{
    return m_RequesterIsSet;
}

void DataConsentDetailsDto::unsetRequester()
{
    m_RequesterIsSet = false;
}
std::shared_ptr<GetConsentTemplateDetailsDto> DataConsentDetailsDto::getConsentDetails() const
{
    return m_ConsentDetails;
}

void DataConsentDetailsDto::setConsentDetails(const std::shared_ptr<GetConsentTemplateDetailsDto>& value)
{
    m_ConsentDetails = value;
    m_ConsentDetailsIsSet = true;
}

bool DataConsentDetailsDto::consentDetailsIsSet() const
{
    return m_ConsentDetailsIsSet;
}

void DataConsentDetailsDto::unsetConsentDetails()
{
    m_ConsentDetailsIsSet = false;
}
}
}


