/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsentRequestedDocumentDto.h"

namespace mydatamyconsent {
namespace models {




DataConsentRequestedDocumentDto::DataConsentRequestedDocumentDto()
{
    m_Drn = utility::conversions::to_string_t("");
    m_DrnIsSet = false;
    m_FromDatetime = utility::datetime();
    m_FromDatetimeIsSet = false;
    m_ToDatetime = utility::datetime();
    m_ToDatetimeIsSet = false;
    m_ProviderId = utility::conversions::to_string_t("");
    m_ProviderIdIsSet = false;
    m_DocumentTypeId = utility::conversions::to_string_t("");
    m_DocumentTypeIdIsSet = false;
    m_DocumentIdentifier = utility::conversions::to_string_t("");
    m_DocumentIdentifierIsSet = false;
}

DataConsentRequestedDocumentDto::~DataConsentRequestedDocumentDto()
{
}

void DataConsentRequestedDocumentDto::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentRequestedDocumentDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DrnIsSet)
    {
        val[utility::conversions::to_string_t(U("drn"))] = ModelBase::toJson(m_Drn);
    }
    if(m_FromDatetimeIsSet)
    {
        val[utility::conversions::to_string_t(U("fromDatetime"))] = ModelBase::toJson(m_FromDatetime);
    }
    if(m_ToDatetimeIsSet)
    {
        val[utility::conversions::to_string_t(U("toDatetime"))] = ModelBase::toJson(m_ToDatetime);
    }
    if(m_ProviderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("providerId"))] = ModelBase::toJson(m_ProviderId);
    }
    if(m_DocumentTypeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("documentTypeId"))] = ModelBase::toJson(m_DocumentTypeId);
    }
    if(m_DocumentIdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("documentIdentifier"))] = ModelBase::toJson(m_DocumentIdentifier);
    }

    return val;
}

bool DataConsentRequestedDocumentDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("drn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("drn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_drn;
            ok &= ModelBase::fromJson(fieldValue, refVal_drn);
            setDrn(refVal_drn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fromDatetime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fromDatetime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_fromDatetime;
            ok &= ModelBase::fromJson(fieldValue, refVal_fromDatetime);
            setFromDatetime(refVal_fromDatetime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toDatetime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toDatetime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_toDatetime;
            ok &= ModelBase::fromJson(fieldValue, refVal_toDatetime);
            setToDatetime(refVal_toDatetime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("providerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("providerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_providerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_providerId);
            setProviderId(refVal_providerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentTypeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentTypeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentTypeId);
            setDocumentTypeId(refVal_documentTypeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("documentIdentifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentIdentifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentIdentifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentIdentifier);
            setDocumentIdentifier(refVal_documentIdentifier);
        }
    }
    return ok;
}

void DataConsentRequestedDocumentDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DrnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("drn")), m_Drn));
    }
    if(m_FromDatetimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fromDatetime")), m_FromDatetime));
    }
    if(m_ToDatetimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toDatetime")), m_ToDatetime));
    }
    if(m_ProviderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("providerId")), m_ProviderId));
    }
    if(m_DocumentTypeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentTypeId")), m_DocumentTypeId));
    }
    if(m_DocumentIdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentIdentifier")), m_DocumentIdentifier));
    }
}

bool DataConsentRequestedDocumentDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("drn"))))
    {
        utility::string_t refVal_drn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("drn"))), refVal_drn );
        setDrn(refVal_drn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fromDatetime"))))
    {
        utility::datetime refVal_fromDatetime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fromDatetime"))), refVal_fromDatetime );
        setFromDatetime(refVal_fromDatetime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toDatetime"))))
    {
        utility::datetime refVal_toDatetime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toDatetime"))), refVal_toDatetime );
        setToDatetime(refVal_toDatetime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("providerId"))))
    {
        utility::string_t refVal_providerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("providerId"))), refVal_providerId );
        setProviderId(refVal_providerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentTypeId"))))
    {
        utility::string_t refVal_documentTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentTypeId"))), refVal_documentTypeId );
        setDocumentTypeId(refVal_documentTypeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("documentIdentifier"))))
    {
        utility::string_t refVal_documentIdentifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentIdentifier"))), refVal_documentIdentifier );
        setDocumentIdentifier(refVal_documentIdentifier);
    }
    return ok;
}

utility::string_t DataConsentRequestedDocumentDto::getDrn() const
{
    return m_Drn;
}

void DataConsentRequestedDocumentDto::setDrn(const utility::string_t& value)
{
    m_Drn = value;
    m_DrnIsSet = true;
}

bool DataConsentRequestedDocumentDto::drnIsSet() const
{
    return m_DrnIsSet;
}

void DataConsentRequestedDocumentDto::unsetDrn()
{
    m_DrnIsSet = false;
}
utility::datetime DataConsentRequestedDocumentDto::getFromDatetime() const
{
    return m_FromDatetime;
}

void DataConsentRequestedDocumentDto::setFromDatetime(const utility::datetime& value)
{
    m_FromDatetime = value;
    m_FromDatetimeIsSet = true;
}

bool DataConsentRequestedDocumentDto::fromDatetimeIsSet() const
{
    return m_FromDatetimeIsSet;
}

void DataConsentRequestedDocumentDto::unsetFromDatetime()
{
    m_FromDatetimeIsSet = false;
}
utility::datetime DataConsentRequestedDocumentDto::getToDatetime() const
{
    return m_ToDatetime;
}

void DataConsentRequestedDocumentDto::setToDatetime(const utility::datetime& value)
{
    m_ToDatetime = value;
    m_ToDatetimeIsSet = true;
}

bool DataConsentRequestedDocumentDto::toDatetimeIsSet() const
{
    return m_ToDatetimeIsSet;
}

void DataConsentRequestedDocumentDto::unsetToDatetime()
{
    m_ToDatetimeIsSet = false;
}
utility::string_t DataConsentRequestedDocumentDto::getProviderId() const
{
    return m_ProviderId;
}

void DataConsentRequestedDocumentDto::setProviderId(const utility::string_t& value)
{
    m_ProviderId = value;
    m_ProviderIdIsSet = true;
}

bool DataConsentRequestedDocumentDto::providerIdIsSet() const
{
    return m_ProviderIdIsSet;
}

void DataConsentRequestedDocumentDto::unsetProviderId()
{
    m_ProviderIdIsSet = false;
}
utility::string_t DataConsentRequestedDocumentDto::getDocumentTypeId() const
{
    return m_DocumentTypeId;
}

void DataConsentRequestedDocumentDto::setDocumentTypeId(const utility::string_t& value)
{
    m_DocumentTypeId = value;
    m_DocumentTypeIdIsSet = true;
}

bool DataConsentRequestedDocumentDto::documentTypeIdIsSet() const
{
    return m_DocumentTypeIdIsSet;
}

void DataConsentRequestedDocumentDto::unsetDocumentTypeId()
{
    m_DocumentTypeIdIsSet = false;
}
utility::string_t DataConsentRequestedDocumentDto::getDocumentIdentifier() const
{
    return m_DocumentIdentifier;
}

void DataConsentRequestedDocumentDto::setDocumentIdentifier(const utility::string_t& value)
{
    m_DocumentIdentifier = value;
    m_DocumentIdentifierIsSet = true;
}

bool DataConsentRequestedDocumentDto::documentIdentifierIsSet() const
{
    return m_DocumentIdentifierIsSet;
}

void DataConsentRequestedDocumentDto::unsetDocumentIdentifier()
{
    m_DocumentIdentifierIsSet = false;
}
}
}


