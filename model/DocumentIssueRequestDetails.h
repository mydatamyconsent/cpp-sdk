/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DocumentIssueRequestDetails.h
 *
 * Document issue request details.
 */

#ifndef MYDATAMYCONSENT_MODELS_DocumentIssueRequestDetails_H_
#define MYDATAMYCONSENT_MODELS_DocumentIssueRequestDetails_H_


#include "ModelBase.h"

#include "model/AnyType.h"
#include <cpprest/details/basic_types.h>
#include "model/DocumentIssueRequestStatus.h"

namespace mydatamyconsent {
namespace models {


/// <summary>
/// Document issue request details.
/// </summary>
class  DocumentIssueRequestDetails
    : public ModelBase
{
public:
    DocumentIssueRequestDetails();
    virtual ~DocumentIssueRequestDetails();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DocumentIssueRequestDetails members

    /// <summary>
    /// Document issue request Id.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Document type Id.
    /// </summary>
    utility::string_t getDocumentTypeId() const;
    bool documentTypeIdIsSet() const;
    void unsetDocumentTypeId();

    void setDocumentTypeId(const utility::string_t& value);

    /// <summary>
    /// Document type name.
    /// </summary>
    utility::string_t getRTypeName() const;
    bool rTypeNameIsSet() const;
    void unsetr_typeName();

    void setRTypeName(const utility::string_t& value);

    /// <summary>
    /// Document identifier.
    /// </summary>
    utility::string_t getIdentifier() const;
    bool identifierIsSet() const;
    void unsetIdentifier();

    void setIdentifier(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DocumentIssueRequestStatus> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<DocumentIssueRequestStatus>& value);

    /// <summary>
    /// Document description.
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Document receiver details.
    /// </summary>
    std::shared_ptr<AnyType> getReceiver() const;
    bool receiverIsSet() const;
    void unsetReceiver();

    void setReceiver(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// Datetime of issue in UTC timezone.
    /// </summary>
    utility::datetime getIssuedAtUtc() const;
    bool issuedAtUtcIsSet() const;
    void unsetIssuedAtUtc();

    void setIssuedAtUtc(const utility::datetime& value);

    /// <summary>
    /// Valid from datetime in UTC timezone.
    /// </summary>
    utility::datetime getValidFromUtc() const;
    bool validFromUtcIsSet() const;
    void unsetValidFromUtc();

    void setValidFromUtc(const utility::datetime& value);

    /// <summary>
    /// Datetime of expiry in UTC timezone.
    /// </summary>
    utility::datetime getExpiresAtUtc() const;
    bool expiresAtUtcIsSet() const;
    void unsetExpiresAtUtc();

    void setExpiresAtUtc(const utility::datetime& value);

    /// <summary>
    /// Metadata.
    /// </summary>
    std::shared_ptr<AnyType> getMetaData() const;
    bool metaDataIsSet() const;
    void unsetMetaData();

    void setMetaData(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// Creation datetime of issue request in UTC timezone.
    /// </summary>
    utility::datetime getCreatedAtUtc() const;
    bool createdAtUtcIsSet() const;
    void unsetCreatedAtUtc();

    void setCreatedAtUtc(const utility::datetime& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_DocumentTypeId;
    bool m_DocumentTypeIdIsSet;
    utility::string_t m_r_typeName;
    bool m_r_typeNameIsSet;
    utility::string_t m_Identifier;
    bool m_IdentifierIsSet;
    std::shared_ptr<DocumentIssueRequestStatus> m_Status;
    bool m_StatusIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::shared_ptr<AnyType> m_Receiver;
    bool m_ReceiverIsSet;
    utility::datetime m_IssuedAtUtc;
    bool m_IssuedAtUtcIsSet;
    utility::datetime m_ValidFromUtc;
    bool m_ValidFromUtcIsSet;
    utility::datetime m_ExpiresAtUtc;
    bool m_ExpiresAtUtcIsSet;
    std::shared_ptr<AnyType> m_MetaData;
    bool m_MetaDataIsSet;
    utility::datetime m_CreatedAtUtc;
    bool m_CreatedAtUtcIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_DocumentIssueRequestDetails_H_ */
