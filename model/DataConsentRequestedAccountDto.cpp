/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataConsentRequestedAccountDto.h"

namespace mydatamyconsent {
namespace models {




DataConsentRequestedAccountDto::DataConsentRequestedAccountDto()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_AccountTypeId = utility::conversions::to_string_t("");
    m_AccountTypeIdIsSet = false;
    m_SuggestedAccountsIsSet = false;
    m_IssuerIsSet = false;
    m_IssuerLogoUrlsIsSet = false;
    m_RequestedDataType = utility::conversions::to_string_t("");
    m_RequestedDataTypeIsSet = false;
    m_Optional = false;
    m_OptionalIsSet = false;
}

DataConsentRequestedAccountDto::~DataConsentRequestedAccountDto()
{
}

void DataConsentRequestedAccountDto::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentRequestedAccountDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_AccountTypeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("accountTypeId"))] = ModelBase::toJson(m_AccountTypeId);
    }
    if(m_SuggestedAccountsIsSet)
    {
        val[utility::conversions::to_string_t(U("suggestedAccounts"))] = ModelBase::toJson(m_SuggestedAccounts);
    }
    if(m_IssuerIsSet)
    {
        val[utility::conversions::to_string_t(U("issuer"))] = ModelBase::toJson(m_Issuer);
    }
    if(m_IssuerLogoUrlsIsSet)
    {
        val[utility::conversions::to_string_t(U("issuerLogoUrls"))] = ModelBase::toJson(m_IssuerLogoUrls);
    }
    if(m_RequestedDataTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedDataType"))] = ModelBase::toJson(m_RequestedDataType);
    }
    if(m_OptionalIsSet)
    {
        val[utility::conversions::to_string_t(U("optional"))] = ModelBase::toJson(m_Optional);
    }

    return val;
}

bool DataConsentRequestedAccountDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accountTypeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountTypeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_accountTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_accountTypeId);
            setAccountTypeId(refVal_accountTypeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("suggestedAccounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("suggestedAccounts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SuggestedAccountDto>> refVal_suggestedAccounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_suggestedAccounts);
            setSuggestedAccounts(refVal_suggestedAccounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuer")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_issuer;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuer);
            setIssuer(refVal_issuer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuerLogoUrls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuerLogoUrls")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_issuerLogoUrls;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuerLogoUrls);
            setIssuerLogoUrls(refVal_issuerLogoUrls);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedDataType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedDataType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_requestedDataType;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedDataType);
            setRequestedDataType(refVal_requestedDataType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("optional"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("optional")));
        if(!fieldValue.is_null())
        {
            bool refVal_optional;
            ok &= ModelBase::fromJson(fieldValue, refVal_optional);
            setOptional(refVal_optional);
        }
    }
    return ok;
}

void DataConsentRequestedAccountDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_AccountTypeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountTypeId")), m_AccountTypeId));
    }
    if(m_SuggestedAccountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("suggestedAccounts")), m_SuggestedAccounts));
    }
    if(m_IssuerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuer")), m_Issuer));
    }
    if(m_IssuerLogoUrlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuerLogoUrls")), m_IssuerLogoUrls));
    }
    if(m_RequestedDataTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedDataType")), m_RequestedDataType));
    }
    if(m_OptionalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("optional")), m_Optional));
    }
}

bool DataConsentRequestedAccountDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accountTypeId"))))
    {
        utility::string_t refVal_accountTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountTypeId"))), refVal_accountTypeId );
        setAccountTypeId(refVal_accountTypeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("suggestedAccounts"))))
    {
        std::vector<std::shared_ptr<SuggestedAccountDto>> refVal_suggestedAccounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("suggestedAccounts"))), refVal_suggestedAccounts );
        setSuggestedAccounts(refVal_suggestedAccounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuer"))))
    {
        std::vector<utility::string_t> refVal_issuer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuer"))), refVal_issuer );
        setIssuer(refVal_issuer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuerLogoUrls"))))
    {
        std::vector<utility::string_t> refVal_issuerLogoUrls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuerLogoUrls"))), refVal_issuerLogoUrls );
        setIssuerLogoUrls(refVal_issuerLogoUrls);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedDataType"))))
    {
        utility::string_t refVal_requestedDataType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedDataType"))), refVal_requestedDataType );
        setRequestedDataType(refVal_requestedDataType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("optional"))))
    {
        bool refVal_optional;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("optional"))), refVal_optional );
        setOptional(refVal_optional);
    }
    return ok;
}

utility::string_t DataConsentRequestedAccountDto::getName() const
{
    return m_Name;
}

void DataConsentRequestedAccountDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DataConsentRequestedAccountDto::nameIsSet() const
{
    return m_NameIsSet;
}

void DataConsentRequestedAccountDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t DataConsentRequestedAccountDto::getAccountTypeId() const
{
    return m_AccountTypeId;
}

void DataConsentRequestedAccountDto::setAccountTypeId(const utility::string_t& value)
{
    m_AccountTypeId = value;
    m_AccountTypeIdIsSet = true;
}

bool DataConsentRequestedAccountDto::accountTypeIdIsSet() const
{
    return m_AccountTypeIdIsSet;
}

void DataConsentRequestedAccountDto::unsetAccountTypeId()
{
    m_AccountTypeIdIsSet = false;
}
std::vector<std::shared_ptr<SuggestedAccountDto>>& DataConsentRequestedAccountDto::getSuggestedAccounts()
{
    return m_SuggestedAccounts;
}

void DataConsentRequestedAccountDto::setSuggestedAccounts(const std::vector<std::shared_ptr<SuggestedAccountDto>>& value)
{
    m_SuggestedAccounts = value;
    m_SuggestedAccountsIsSet = true;
}

bool DataConsentRequestedAccountDto::suggestedAccountsIsSet() const
{
    return m_SuggestedAccountsIsSet;
}

void DataConsentRequestedAccountDto::unsetSuggestedAccounts()
{
    m_SuggestedAccountsIsSet = false;
}
std::vector<utility::string_t>& DataConsentRequestedAccountDto::getIssuer()
{
    return m_Issuer;
}

void DataConsentRequestedAccountDto::setIssuer(const std::vector<utility::string_t>& value)
{
    m_Issuer = value;
    m_IssuerIsSet = true;
}

bool DataConsentRequestedAccountDto::issuerIsSet() const
{
    return m_IssuerIsSet;
}

void DataConsentRequestedAccountDto::unsetIssuer()
{
    m_IssuerIsSet = false;
}
std::vector<utility::string_t>& DataConsentRequestedAccountDto::getIssuerLogoUrls()
{
    return m_IssuerLogoUrls;
}

void DataConsentRequestedAccountDto::setIssuerLogoUrls(const std::vector<utility::string_t>& value)
{
    m_IssuerLogoUrls = value;
    m_IssuerLogoUrlsIsSet = true;
}

bool DataConsentRequestedAccountDto::issuerLogoUrlsIsSet() const
{
    return m_IssuerLogoUrlsIsSet;
}

void DataConsentRequestedAccountDto::unsetIssuerLogoUrls()
{
    m_IssuerLogoUrlsIsSet = false;
}
utility::string_t DataConsentRequestedAccountDto::getRequestedDataType() const
{
    return m_RequestedDataType;
}

void DataConsentRequestedAccountDto::setRequestedDataType(const utility::string_t& value)
{
    m_RequestedDataType = value;
    m_RequestedDataTypeIsSet = true;
}

bool DataConsentRequestedAccountDto::requestedDataTypeIsSet() const
{
    return m_RequestedDataTypeIsSet;
}

void DataConsentRequestedAccountDto::unsetRequestedDataType()
{
    m_RequestedDataTypeIsSet = false;
}
bool DataConsentRequestedAccountDto::isOptional() const
{
    return m_Optional;
}

void DataConsentRequestedAccountDto::setOptional(bool value)
{
    m_Optional = value;
    m_OptionalIsSet = true;
}

bool DataConsentRequestedAccountDto::optionalIsSet() const
{
    return m_OptionalIsSet;
}

void DataConsentRequestedAccountDto::unsetOptional()
{
    m_OptionalIsSet = false;
}
}
}


