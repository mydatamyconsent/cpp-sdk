/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrganizationAddress.h"

namespace mydatamyconsent {
namespace models {




OrganizationAddress::OrganizationAddress()
{
    m_CreatedBy = utility::conversions::to_string_t("");
    m_CreatedByIsSet = false;
    m_CreatedAtUtc = utility::datetime();
    m_CreatedAtUtcIsSet = false;
    m_UpdatedBy = utility::conversions::to_string_t("");
    m_UpdatedByIsSet = false;
    m_UpdatedAtUtc = utility::datetime();
    m_UpdatedAtUtcIsSet = false;
    m_CreatedByUserIsSet = false;
    m_UpdatedByUserIsSet = false;
    m_DeletedBy = utility::conversions::to_string_t("");
    m_DeletedByIsSet = false;
    m_DeletedAtUtc = utility::datetime();
    m_DeletedAtUtcIsSet = false;
    m_DeletedByUserIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_OrganizationId = utility::conversions::to_string_t("");
    m_OrganizationIdIsSet = false;
    m_OrganizationName = utility::conversions::to_string_t("");
    m_OrganizationNameIsSet = false;
    m_TypeIsSet = false;
    m_AddressLine1 = utility::conversions::to_string_t("");
    m_AddressLine1IsSet = false;
    m_AddressLine2 = utility::conversions::to_string_t("");
    m_AddressLine2IsSet = false;
    m_LandMark = utility::conversions::to_string_t("");
    m_LandMarkIsSet = false;
    m_CountryId = utility::conversions::to_string_t("");
    m_CountryIdIsSet = false;
    m_StateId = utility::conversions::to_string_t("");
    m_StateIdIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_PostCode = utility::conversions::to_string_t("");
    m_PostCodeIsSet = false;
    m_ProofDocumentTypeIsSet = false;
    m_ProofDocumentUrl = utility::conversions::to_string_t("");
    m_ProofDocumentUrlIsSet = false;
    m_CountryIsSet = false;
    m_OrganizationIsSet = false;
    m_CountryStateIsSet = false;
    m_IsPrimary = false;
    m_IsPrimaryIsSet = false;
    m_IsVerified = false;
    m_IsVerifiedIsSet = false;
}

OrganizationAddress::~OrganizationAddress()
{
}

void OrganizationAddress::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationAddress::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreatedByIsSet)
    {
        val[utility::conversions::to_string_t(U("createdBy"))] = ModelBase::toJson(m_CreatedBy);
    }
    if(m_CreatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAtUtc"))] = ModelBase::toJson(m_CreatedAtUtc);
    }
    if(m_UpdatedByIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedBy"))] = ModelBase::toJson(m_UpdatedBy);
    }
    if(m_UpdatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAtUtc"))] = ModelBase::toJson(m_UpdatedAtUtc);
    }
    if(m_CreatedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("createdByUser"))] = ModelBase::toJson(m_CreatedByUser);
    }
    if(m_UpdatedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedByUser"))] = ModelBase::toJson(m_UpdatedByUser);
    }
    if(m_DeletedByIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedBy"))] = ModelBase::toJson(m_DeletedBy);
    }
    if(m_DeletedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedAtUtc"))] = ModelBase::toJson(m_DeletedAtUtc);
    }
    if(m_DeletedByUserIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedByUser"))] = ModelBase::toJson(m_DeletedByUser);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OrganizationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationId"))] = ModelBase::toJson(m_OrganizationId);
    }
    if(m_OrganizationNameIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationName"))] = ModelBase::toJson(m_OrganizationName);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_AddressLine1IsSet)
    {
        val[utility::conversions::to_string_t(U("addressLine1"))] = ModelBase::toJson(m_AddressLine1);
    }
    if(m_AddressLine2IsSet)
    {
        val[utility::conversions::to_string_t(U("addressLine2"))] = ModelBase::toJson(m_AddressLine2);
    }
    if(m_LandMarkIsSet)
    {
        val[utility::conversions::to_string_t(U("landMark"))] = ModelBase::toJson(m_LandMark);
    }
    if(m_CountryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("countryId"))] = ModelBase::toJson(m_CountryId);
    }
    if(m_StateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("stateId"))] = ModelBase::toJson(m_StateId);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t(U("city"))] = ModelBase::toJson(m_City);
    }
    if(m_PostCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("postCode"))] = ModelBase::toJson(m_PostCode);
    }
    if(m_ProofDocumentTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("proofDocumentType"))] = ModelBase::toJson(m_ProofDocumentType);
    }
    if(m_ProofDocumentUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("proofDocumentUrl"))] = ModelBase::toJson(m_ProofDocumentUrl);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_OrganizationIsSet)
    {
        val[utility::conversions::to_string_t(U("organization"))] = ModelBase::toJson(m_Organization);
    }
    if(m_CountryStateIsSet)
    {
        val[utility::conversions::to_string_t(U("countryState"))] = ModelBase::toJson(m_CountryState);
    }
    if(m_IsPrimaryIsSet)
    {
        val[utility::conversions::to_string_t(U("isPrimary"))] = ModelBase::toJson(m_IsPrimary);
    }
    if(m_IsVerifiedIsSet)
    {
        val[utility::conversions::to_string_t(U("isVerified"))] = ModelBase::toJson(m_IsVerified);
    }

    return val;
}

bool OrganizationAddress::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("createdBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_createdBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdBy);
            setCreatedBy(refVal_createdBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAtUtc);
            setCreatedAtUtc(refVal_createdAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_updatedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedBy);
            setUpdatedBy(refVal_updatedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAtUtc);
            setUpdatedAtUtc(refVal_updatedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_createdByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdByUser);
            setCreatedByUser(refVal_createdByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_updatedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedByUser);
            setUpdatedByUser(refVal_updatedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_deletedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedBy);
            setDeletedBy(refVal_deletedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_deletedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedAtUtc);
            setDeletedAtUtc(refVal_deletedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedByUser"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedByUser")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApplicationUser> refVal_deletedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_deletedByUser);
            setDeletedByUser(refVal_deletedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organizationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationId);
            setOrganizationId(refVal_organizationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organizationName;
            ok &= ModelBase::fromJson(fieldValue, refVal_organizationName);
            setOrganizationName(refVal_organizationName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrganizationAddressType> refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addressLine1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addressLine1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addressLine1;
            ok &= ModelBase::fromJson(fieldValue, refVal_addressLine1);
            setAddressLine1(refVal_addressLine1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addressLine2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addressLine2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addressLine2;
            ok &= ModelBase::fromJson(fieldValue, refVal_addressLine2);
            setAddressLine2(refVal_addressLine2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("landMark"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("landMark")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_landMark;
            ok &= ModelBase::fromJson(fieldValue, refVal_landMark);
            setLandMark(refVal_landMark);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_countryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryId);
            setCountryId(refVal_countryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stateId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_stateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_stateId);
            setStateId(refVal_stateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("city"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("city")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_city;
            ok &= ModelBase::fromJson(fieldValue, refVal_city);
            setCity(refVal_city);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("postCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("postCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_postCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_postCode);
            setPostCode(refVal_postCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("proofDocumentType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("proofDocumentType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProofDocumentType> refVal_proofDocumentType;
            ok &= ModelBase::fromJson(fieldValue, refVal_proofDocumentType);
            setProofDocumentType(refVal_proofDocumentType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("proofDocumentUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("proofDocumentUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_proofDocumentUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_proofDocumentUrl);
            setProofDocumentUrl(refVal_proofDocumentUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> refVal_country;
            ok &= ModelBase::fromJson(fieldValue, refVal_country);
            setCountry(refVal_country);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Organization> refVal_organization;
            ok &= ModelBase::fromJson(fieldValue, refVal_organization);
            setOrganization(refVal_organization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryState"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryState")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CountryState> refVal_countryState;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryState);
            setCountryState(refVal_countryState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isPrimary"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isPrimary")));
        if(!fieldValue.is_null())
        {
            bool refVal_isPrimary;
            ok &= ModelBase::fromJson(fieldValue, refVal_isPrimary);
            setIsPrimary(refVal_isPrimary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isVerified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isVerified")));
        if(!fieldValue.is_null())
        {
            bool refVal_isVerified;
            ok &= ModelBase::fromJson(fieldValue, refVal_isVerified);
            setIsVerified(refVal_isVerified);
        }
    }
    return ok;
}

void OrganizationAddress::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdBy")), m_CreatedBy));
    }
    if(m_CreatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAtUtc")), m_CreatedAtUtc));
    }
    if(m_UpdatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedBy")), m_UpdatedBy));
    }
    if(m_UpdatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAtUtc")), m_UpdatedAtUtc));
    }
    if(m_CreatedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdByUser")), m_CreatedByUser));
    }
    if(m_UpdatedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedByUser")), m_UpdatedByUser));
    }
    if(m_DeletedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedBy")), m_DeletedBy));
    }
    if(m_DeletedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedAtUtc")), m_DeletedAtUtc));
    }
    if(m_DeletedByUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedByUser")), m_DeletedByUser));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OrganizationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationId")), m_OrganizationId));
    }
    if(m_OrganizationNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationName")), m_OrganizationName));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_AddressLine1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addressLine1")), m_AddressLine1));
    }
    if(m_AddressLine2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addressLine2")), m_AddressLine2));
    }
    if(m_LandMarkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("landMark")), m_LandMark));
    }
    if(m_CountryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryId")), m_CountryId));
    }
    if(m_StateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stateId")), m_StateId));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("city")), m_City));
    }
    if(m_PostCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("postCode")), m_PostCode));
    }
    if(m_ProofDocumentTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("proofDocumentType")), m_ProofDocumentType));
    }
    if(m_ProofDocumentUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("proofDocumentUrl")), m_ProofDocumentUrl));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization")), m_Organization));
    }
    if(m_CountryStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryState")), m_CountryState));
    }
    if(m_IsPrimaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isPrimary")), m_IsPrimary));
    }
    if(m_IsVerifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isVerified")), m_IsVerified));
    }
}

bool OrganizationAddress::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("createdBy"))))
    {
        utility::string_t refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdBy"))), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        utility::datetime refVal_createdAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAtUtc"))), refVal_createdAtUtc );
        setCreatedAtUtc(refVal_createdAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedBy"))))
    {
        utility::string_t refVal_updatedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedBy"))), refVal_updatedBy );
        setUpdatedBy(refVal_updatedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAtUtc"))))
    {
        utility::datetime refVal_updatedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAtUtc"))), refVal_updatedAtUtc );
        setUpdatedAtUtc(refVal_updatedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_createdByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdByUser"))), refVal_createdByUser );
        setCreatedByUser(refVal_createdByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_updatedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedByUser"))), refVal_updatedByUser );
        setUpdatedByUser(refVal_updatedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedBy"))))
    {
        utility::string_t refVal_deletedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedBy"))), refVal_deletedBy );
        setDeletedBy(refVal_deletedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedAtUtc"))))
    {
        utility::datetime refVal_deletedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedAtUtc"))), refVal_deletedAtUtc );
        setDeletedAtUtc(refVal_deletedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedByUser"))))
    {
        std::shared_ptr<ApplicationUser> refVal_deletedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedByUser"))), refVal_deletedByUser );
        setDeletedByUser(refVal_deletedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationId"))))
    {
        utility::string_t refVal_organizationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationId"))), refVal_organizationId );
        setOrganizationId(refVal_organizationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationName"))))
    {
        utility::string_t refVal_organizationName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationName"))), refVal_organizationName );
        setOrganizationName(refVal_organizationName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<OrganizationAddressType> refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addressLine1"))))
    {
        utility::string_t refVal_addressLine1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addressLine1"))), refVal_addressLine1 );
        setAddressLine1(refVal_addressLine1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addressLine2"))))
    {
        utility::string_t refVal_addressLine2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addressLine2"))), refVal_addressLine2 );
        setAddressLine2(refVal_addressLine2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("landMark"))))
    {
        utility::string_t refVal_landMark;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("landMark"))), refVal_landMark );
        setLandMark(refVal_landMark);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryId"))))
    {
        utility::string_t refVal_countryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryId"))), refVal_countryId );
        setCountryId(refVal_countryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stateId"))))
    {
        utility::string_t refVal_stateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stateId"))), refVal_stateId );
        setStateId(refVal_stateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("city"))))
    {
        utility::string_t refVal_city;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("city"))), refVal_city );
        setCity(refVal_city);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("postCode"))))
    {
        utility::string_t refVal_postCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("postCode"))), refVal_postCode );
        setPostCode(refVal_postCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("proofDocumentType"))))
    {
        std::shared_ptr<ProofDocumentType> refVal_proofDocumentType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("proofDocumentType"))), refVal_proofDocumentType );
        setProofDocumentType(refVal_proofDocumentType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("proofDocumentUrl"))))
    {
        utility::string_t refVal_proofDocumentUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("proofDocumentUrl"))), refVal_proofDocumentUrl );
        setProofDocumentUrl(refVal_proofDocumentUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        std::shared_ptr<Country> refVal_country;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_country );
        setCountry(refVal_country);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization"))))
    {
        std::shared_ptr<Organization> refVal_organization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization"))), refVal_organization );
        setOrganization(refVal_organization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryState"))))
    {
        std::shared_ptr<CountryState> refVal_countryState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryState"))), refVal_countryState );
        setCountryState(refVal_countryState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isPrimary"))))
    {
        bool refVal_isPrimary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isPrimary"))), refVal_isPrimary );
        setIsPrimary(refVal_isPrimary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isVerified"))))
    {
        bool refVal_isVerified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isVerified"))), refVal_isVerified );
        setIsVerified(refVal_isVerified);
    }
    return ok;
}

utility::string_t OrganizationAddress::getCreatedBy() const
{
    return m_CreatedBy;
}

void OrganizationAddress::setCreatedBy(const utility::string_t& value)
{
    m_CreatedBy = value;
    m_CreatedByIsSet = true;
}

bool OrganizationAddress::createdByIsSet() const
{
    return m_CreatedByIsSet;
}

void OrganizationAddress::unsetCreatedBy()
{
    m_CreatedByIsSet = false;
}
utility::datetime OrganizationAddress::getCreatedAtUtc() const
{
    return m_CreatedAtUtc;
}

void OrganizationAddress::setCreatedAtUtc(const utility::datetime& value)
{
    m_CreatedAtUtc = value;
    m_CreatedAtUtcIsSet = true;
}

bool OrganizationAddress::createdAtUtcIsSet() const
{
    return m_CreatedAtUtcIsSet;
}

void OrganizationAddress::unsetCreatedAtUtc()
{
    m_CreatedAtUtcIsSet = false;
}
utility::string_t OrganizationAddress::getUpdatedBy() const
{
    return m_UpdatedBy;
}

void OrganizationAddress::setUpdatedBy(const utility::string_t& value)
{
    m_UpdatedBy = value;
    m_UpdatedByIsSet = true;
}

bool OrganizationAddress::updatedByIsSet() const
{
    return m_UpdatedByIsSet;
}

void OrganizationAddress::unsetUpdatedBy()
{
    m_UpdatedByIsSet = false;
}
utility::datetime OrganizationAddress::getUpdatedAtUtc() const
{
    return m_UpdatedAtUtc;
}

void OrganizationAddress::setUpdatedAtUtc(const utility::datetime& value)
{
    m_UpdatedAtUtc = value;
    m_UpdatedAtUtcIsSet = true;
}

bool OrganizationAddress::updatedAtUtcIsSet() const
{
    return m_UpdatedAtUtcIsSet;
}

void OrganizationAddress::unsetUpdatedAtUtc()
{
    m_UpdatedAtUtcIsSet = false;
}
std::shared_ptr<ApplicationUser> OrganizationAddress::getCreatedByUser() const
{
    return m_CreatedByUser;
}

void OrganizationAddress::setCreatedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_CreatedByUser = value;
    m_CreatedByUserIsSet = true;
}

bool OrganizationAddress::createdByUserIsSet() const
{
    return m_CreatedByUserIsSet;
}

void OrganizationAddress::unsetCreatedByUser()
{
    m_CreatedByUserIsSet = false;
}
std::shared_ptr<ApplicationUser> OrganizationAddress::getUpdatedByUser() const
{
    return m_UpdatedByUser;
}

void OrganizationAddress::setUpdatedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_UpdatedByUser = value;
    m_UpdatedByUserIsSet = true;
}

bool OrganizationAddress::updatedByUserIsSet() const
{
    return m_UpdatedByUserIsSet;
}

void OrganizationAddress::unsetUpdatedByUser()
{
    m_UpdatedByUserIsSet = false;
}
utility::string_t OrganizationAddress::getDeletedBy() const
{
    return m_DeletedBy;
}

void OrganizationAddress::setDeletedBy(const utility::string_t& value)
{
    m_DeletedBy = value;
    m_DeletedByIsSet = true;
}

bool OrganizationAddress::deletedByIsSet() const
{
    return m_DeletedByIsSet;
}

void OrganizationAddress::unsetDeletedBy()
{
    m_DeletedByIsSet = false;
}
utility::datetime OrganizationAddress::getDeletedAtUtc() const
{
    return m_DeletedAtUtc;
}

void OrganizationAddress::setDeletedAtUtc(const utility::datetime& value)
{
    m_DeletedAtUtc = value;
    m_DeletedAtUtcIsSet = true;
}

bool OrganizationAddress::deletedAtUtcIsSet() const
{
    return m_DeletedAtUtcIsSet;
}

void OrganizationAddress::unsetDeletedAtUtc()
{
    m_DeletedAtUtcIsSet = false;
}
std::shared_ptr<ApplicationUser> OrganizationAddress::getDeletedByUser() const
{
    return m_DeletedByUser;
}

void OrganizationAddress::setDeletedByUser(const std::shared_ptr<ApplicationUser>& value)
{
    m_DeletedByUser = value;
    m_DeletedByUserIsSet = true;
}

bool OrganizationAddress::deletedByUserIsSet() const
{
    return m_DeletedByUserIsSet;
}

void OrganizationAddress::unsetDeletedByUser()
{
    m_DeletedByUserIsSet = false;
}
utility::string_t OrganizationAddress::getId() const
{
    return m_Id;
}

void OrganizationAddress::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrganizationAddress::idIsSet() const
{
    return m_IdIsSet;
}

void OrganizationAddress::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrganizationAddress::getOrganizationId() const
{
    return m_OrganizationId;
}

void OrganizationAddress::setOrganizationId(const utility::string_t& value)
{
    m_OrganizationId = value;
    m_OrganizationIdIsSet = true;
}

bool OrganizationAddress::organizationIdIsSet() const
{
    return m_OrganizationIdIsSet;
}

void OrganizationAddress::unsetOrganizationId()
{
    m_OrganizationIdIsSet = false;
}
utility::string_t OrganizationAddress::getOrganizationName() const
{
    return m_OrganizationName;
}

void OrganizationAddress::setOrganizationName(const utility::string_t& value)
{
    m_OrganizationName = value;
    m_OrganizationNameIsSet = true;
}

bool OrganizationAddress::organizationNameIsSet() const
{
    return m_OrganizationNameIsSet;
}

void OrganizationAddress::unsetOrganizationName()
{
    m_OrganizationNameIsSet = false;
}
std::shared_ptr<OrganizationAddressType> OrganizationAddress::getType() const
{
    return m_Type;
}

void OrganizationAddress::setType(const std::shared_ptr<OrganizationAddressType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool OrganizationAddress::typeIsSet() const
{
    return m_TypeIsSet;
}

void OrganizationAddress::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t OrganizationAddress::getAddressLine1() const
{
    return m_AddressLine1;
}

void OrganizationAddress::setAddressLine1(const utility::string_t& value)
{
    m_AddressLine1 = value;
    m_AddressLine1IsSet = true;
}

bool OrganizationAddress::addressLine1IsSet() const
{
    return m_AddressLine1IsSet;
}

void OrganizationAddress::unsetAddressLine1()
{
    m_AddressLine1IsSet = false;
}
utility::string_t OrganizationAddress::getAddressLine2() const
{
    return m_AddressLine2;
}

void OrganizationAddress::setAddressLine2(const utility::string_t& value)
{
    m_AddressLine2 = value;
    m_AddressLine2IsSet = true;
}

bool OrganizationAddress::addressLine2IsSet() const
{
    return m_AddressLine2IsSet;
}

void OrganizationAddress::unsetAddressLine2()
{
    m_AddressLine2IsSet = false;
}
utility::string_t OrganizationAddress::getLandMark() const
{
    return m_LandMark;
}

void OrganizationAddress::setLandMark(const utility::string_t& value)
{
    m_LandMark = value;
    m_LandMarkIsSet = true;
}

bool OrganizationAddress::landMarkIsSet() const
{
    return m_LandMarkIsSet;
}

void OrganizationAddress::unsetLandMark()
{
    m_LandMarkIsSet = false;
}
utility::string_t OrganizationAddress::getCountryId() const
{
    return m_CountryId;
}

void OrganizationAddress::setCountryId(const utility::string_t& value)
{
    m_CountryId = value;
    m_CountryIdIsSet = true;
}

bool OrganizationAddress::countryIdIsSet() const
{
    return m_CountryIdIsSet;
}

void OrganizationAddress::unsetCountryId()
{
    m_CountryIdIsSet = false;
}
utility::string_t OrganizationAddress::getStateId() const
{
    return m_StateId;
}

void OrganizationAddress::setStateId(const utility::string_t& value)
{
    m_StateId = value;
    m_StateIdIsSet = true;
}

bool OrganizationAddress::stateIdIsSet() const
{
    return m_StateIdIsSet;
}

void OrganizationAddress::unsetStateId()
{
    m_StateIdIsSet = false;
}
utility::string_t OrganizationAddress::getCity() const
{
    return m_City;
}

void OrganizationAddress::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool OrganizationAddress::cityIsSet() const
{
    return m_CityIsSet;
}

void OrganizationAddress::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t OrganizationAddress::getPostCode() const
{
    return m_PostCode;
}

void OrganizationAddress::setPostCode(const utility::string_t& value)
{
    m_PostCode = value;
    m_PostCodeIsSet = true;
}

bool OrganizationAddress::postCodeIsSet() const
{
    return m_PostCodeIsSet;
}

void OrganizationAddress::unsetPostCode()
{
    m_PostCodeIsSet = false;
}
std::shared_ptr<ProofDocumentType> OrganizationAddress::getProofDocumentType() const
{
    return m_ProofDocumentType;
}

void OrganizationAddress::setProofDocumentType(const std::shared_ptr<ProofDocumentType>& value)
{
    m_ProofDocumentType = value;
    m_ProofDocumentTypeIsSet = true;
}

bool OrganizationAddress::proofDocumentTypeIsSet() const
{
    return m_ProofDocumentTypeIsSet;
}

void OrganizationAddress::unsetProofDocumentType()
{
    m_ProofDocumentTypeIsSet = false;
}
utility::string_t OrganizationAddress::getProofDocumentUrl() const
{
    return m_ProofDocumentUrl;
}

void OrganizationAddress::setProofDocumentUrl(const utility::string_t& value)
{
    m_ProofDocumentUrl = value;
    m_ProofDocumentUrlIsSet = true;
}

bool OrganizationAddress::proofDocumentUrlIsSet() const
{
    return m_ProofDocumentUrlIsSet;
}

void OrganizationAddress::unsetProofDocumentUrl()
{
    m_ProofDocumentUrlIsSet = false;
}
std::shared_ptr<Country> OrganizationAddress::getCountry() const
{
    return m_Country;
}

void OrganizationAddress::setCountry(const std::shared_ptr<Country>& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool OrganizationAddress::countryIsSet() const
{
    return m_CountryIsSet;
}

void OrganizationAddress::unsetCountry()
{
    m_CountryIsSet = false;
}
std::shared_ptr<Organization> OrganizationAddress::getOrganization() const
{
    return m_Organization;
}

void OrganizationAddress::setOrganization(const std::shared_ptr<Organization>& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}

bool OrganizationAddress::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void OrganizationAddress::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
std::shared_ptr<CountryState> OrganizationAddress::getCountryState() const
{
    return m_CountryState;
}

void OrganizationAddress::setCountryState(const std::shared_ptr<CountryState>& value)
{
    m_CountryState = value;
    m_CountryStateIsSet = true;
}

bool OrganizationAddress::countryStateIsSet() const
{
    return m_CountryStateIsSet;
}

void OrganizationAddress::unsetCountryState()
{
    m_CountryStateIsSet = false;
}
bool OrganizationAddress::isIsPrimary() const
{
    return m_IsPrimary;
}

void OrganizationAddress::setIsPrimary(bool value)
{
    m_IsPrimary = value;
    m_IsPrimaryIsSet = true;
}

bool OrganizationAddress::isPrimaryIsSet() const
{
    return m_IsPrimaryIsSet;
}

void OrganizationAddress::unsetIsPrimary()
{
    m_IsPrimaryIsSet = false;
}
bool OrganizationAddress::isIsVerified() const
{
    return m_IsVerified;
}

void OrganizationAddress::setIsVerified(bool value)
{
    m_IsVerified = value;
    m_IsVerifiedIsSet = true;
}

bool OrganizationAddress::isVerifiedIsSet() const
{
    return m_IsVerifiedIsSet;
}

void OrganizationAddress::unsetIsVerified()
{
    m_IsVerifiedIsSet = false;
}
}
}


