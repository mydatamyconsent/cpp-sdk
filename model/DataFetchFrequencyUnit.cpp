/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataFetchFrequencyUnit.h"

namespace mydatamyconsent {
namespace models {



namespace
{
using EnumUnderlyingType = utility::string_t;

DataFetchFrequencyUnit::eDataFetchFrequencyUnit toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("Hourly")))
        return DataFetchFrequencyUnit::eDataFetchFrequencyUnit::DataFetchFrequencyUnit_HOURLY;
    if (val == utility::conversions::to_string_t(U("Daily")))
        return DataFetchFrequencyUnit::eDataFetchFrequencyUnit::DataFetchFrequencyUnit_DAILY;
    if (val == utility::conversions::to_string_t(U("Monthly")))
        return DataFetchFrequencyUnit::eDataFetchFrequencyUnit::DataFetchFrequencyUnit_MONTHLY;
    if (val == utility::conversions::to_string_t(U("Yearly")))
        return DataFetchFrequencyUnit::eDataFetchFrequencyUnit::DataFetchFrequencyUnit_YEARLY;
    if (val == utility::conversions::to_string_t(U("Unlimited")))
        return DataFetchFrequencyUnit::eDataFetchFrequencyUnit::DataFetchFrequencyUnit_UNLIMITED;
    return {};
}

EnumUnderlyingType fromEnum(DataFetchFrequencyUnit::eDataFetchFrequencyUnit e)
{
    switch (e)
    {
    case DataFetchFrequencyUnit::eDataFetchFrequencyUnit::DataFetchFrequencyUnit_HOURLY:
        return U("Hourly");
    case DataFetchFrequencyUnit::eDataFetchFrequencyUnit::DataFetchFrequencyUnit_DAILY:
        return U("Daily");
    case DataFetchFrequencyUnit::eDataFetchFrequencyUnit::DataFetchFrequencyUnit_MONTHLY:
        return U("Monthly");
    case DataFetchFrequencyUnit::eDataFetchFrequencyUnit::DataFetchFrequencyUnit_YEARLY:
        return U("Yearly");
    case DataFetchFrequencyUnit::eDataFetchFrequencyUnit::DataFetchFrequencyUnit_UNLIMITED:
        return U("Unlimited");
    default:
        break;
    }
    return {};
}
}

DataFetchFrequencyUnit::DataFetchFrequencyUnit()
{
}

DataFetchFrequencyUnit::~DataFetchFrequencyUnit()
{
}

void DataFetchFrequencyUnit::validate()
{
    // TODO: implement validation
}

web::json::value DataFetchFrequencyUnit::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool DataFetchFrequencyUnit::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void DataFetchFrequencyUnit::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool DataFetchFrequencyUnit::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

DataFetchFrequencyUnit::eDataFetchFrequencyUnit DataFetchFrequencyUnit::getValue() const
{
   return m_value;
}

void DataFetchFrequencyUnit::setValue(DataFetchFrequencyUnit::eDataFetchFrequencyUnit const value)
{
   m_value = value;
}


}
}


