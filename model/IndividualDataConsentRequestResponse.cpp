/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IndividualDataConsentRequestResponse.h"

namespace mydatamyconsent {
namespace models {




IndividualDataConsentRequestResponse::IndividualDataConsentRequestResponse()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_TemplateId = utility::conversions::to_string_t("");
    m_TemplateIdIsSet = false;
    m_RequestedAtUtc = utility::datetime();
    m_RequestedAtUtcIsSet = false;
    m_RequestExpiresAtUtc = utility::datetime();
    m_RequestExpiresAtUtcIsSet = false;
    m_StatusIsSet = false;
    m_TransactionId = utility::conversions::to_string_t("");
    m_TransactionIdIsSet = false;
}

IndividualDataConsentRequestResponse::~IndividualDataConsentRequestResponse()
{
}

void IndividualDataConsentRequestResponse::validate()
{
    // TODO: implement validation
}

web::json::value IndividualDataConsentRequestResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TemplateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("templateId"))] = ModelBase::toJson(m_TemplateId);
    }
    if(m_RequestedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("requestedAtUtc"))] = ModelBase::toJson(m_RequestedAtUtc);
    }
    if(m_RequestExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("requestExpiresAtUtc"))] = ModelBase::toJson(m_RequestExpiresAtUtc);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_TransactionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("transactionId"))] = ModelBase::toJson(m_TransactionId);
    }

    return val;
}

bool IndividualDataConsentRequestResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_templateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_templateId);
            setTemplateId(refVal_templateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_requestedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestedAtUtc);
            setRequestedAtUtc(refVal_requestedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestExpiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestExpiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_requestExpiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestExpiresAtUtc);
            setRequestExpiresAtUtc(refVal_requestExpiresAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataConsentStatus> refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transactionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transactionId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_transactionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_transactionId);
            setTransactionId(refVal_transactionId);
        }
    }
    return ok;
}

void IndividualDataConsentRequestResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_TemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateId")), m_TemplateId));
    }
    if(m_RequestedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestedAtUtc")), m_RequestedAtUtc));
    }
    if(m_RequestExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestExpiresAtUtc")), m_RequestExpiresAtUtc));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_TransactionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transactionId")), m_TransactionId));
    }
}

bool IndividualDataConsentRequestResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateId"))))
    {
        utility::string_t refVal_templateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateId"))), refVal_templateId );
        setTemplateId(refVal_templateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestedAtUtc"))))
    {
        utility::datetime refVal_requestedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestedAtUtc"))), refVal_requestedAtUtc );
        setRequestedAtUtc(refVal_requestedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestExpiresAtUtc"))))
    {
        utility::datetime refVal_requestExpiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestExpiresAtUtc"))), refVal_requestExpiresAtUtc );
        setRequestExpiresAtUtc(refVal_requestExpiresAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<DataConsentStatus> refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transactionId"))))
    {
        utility::string_t refVal_transactionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transactionId"))), refVal_transactionId );
        setTransactionId(refVal_transactionId);
    }
    return ok;
}

utility::string_t IndividualDataConsentRequestResponse::getId() const
{
    return m_Id;
}

void IndividualDataConsentRequestResponse::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool IndividualDataConsentRequestResponse::idIsSet() const
{
    return m_IdIsSet;
}

void IndividualDataConsentRequestResponse::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t IndividualDataConsentRequestResponse::getTemplateId() const
{
    return m_TemplateId;
}

void IndividualDataConsentRequestResponse::setTemplateId(const utility::string_t& value)
{
    m_TemplateId = value;
    m_TemplateIdIsSet = true;
}

bool IndividualDataConsentRequestResponse::templateIdIsSet() const
{
    return m_TemplateIdIsSet;
}

void IndividualDataConsentRequestResponse::unsetTemplateId()
{
    m_TemplateIdIsSet = false;
}
utility::datetime IndividualDataConsentRequestResponse::getRequestedAtUtc() const
{
    return m_RequestedAtUtc;
}

void IndividualDataConsentRequestResponse::setRequestedAtUtc(const utility::datetime& value)
{
    m_RequestedAtUtc = value;
    m_RequestedAtUtcIsSet = true;
}

bool IndividualDataConsentRequestResponse::requestedAtUtcIsSet() const
{
    return m_RequestedAtUtcIsSet;
}

void IndividualDataConsentRequestResponse::unsetRequestedAtUtc()
{
    m_RequestedAtUtcIsSet = false;
}
utility::datetime IndividualDataConsentRequestResponse::getRequestExpiresAtUtc() const
{
    return m_RequestExpiresAtUtc;
}

void IndividualDataConsentRequestResponse::setRequestExpiresAtUtc(const utility::datetime& value)
{
    m_RequestExpiresAtUtc = value;
    m_RequestExpiresAtUtcIsSet = true;
}

bool IndividualDataConsentRequestResponse::requestExpiresAtUtcIsSet() const
{
    return m_RequestExpiresAtUtcIsSet;
}

void IndividualDataConsentRequestResponse::unsetRequestExpiresAtUtc()
{
    m_RequestExpiresAtUtcIsSet = false;
}
std::shared_ptr<DataConsentStatus> IndividualDataConsentRequestResponse::getStatus() const
{
    return m_Status;
}

void IndividualDataConsentRequestResponse::setStatus(const std::shared_ptr<DataConsentStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool IndividualDataConsentRequestResponse::statusIsSet() const
{
    return m_StatusIsSet;
}

void IndividualDataConsentRequestResponse::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t IndividualDataConsentRequestResponse::getTransactionId() const
{
    return m_TransactionId;
}

void IndividualDataConsentRequestResponse::setTransactionId(const utility::string_t& value)
{
    m_TransactionId = value;
    m_TransactionIdIsSet = true;
}

bool IndividualDataConsentRequestResponse::transactionIdIsSet() const
{
    return m_TransactionIdIsSet;
}

void IndividualDataConsentRequestResponse::unsetTransactionId()
{
    m_TransactionIdIsSet = false;
}
}
}


