/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Financial.h"

namespace mydatamyconsent {
namespace models {




Financial::Financial()
{
    m_AccountField = utility::conversions::to_string_t("");
    m_AccountFieldIsSet = false;
    m_CustomKey = utility::conversions::to_string_t("");
    m_CustomKeyIsSet = false;
    m_AccountsIsSet = false;
    m_RequirementIsSet = false;
}

Financial::~Financial()
{
}

void Financial::validate()
{
    // TODO: implement validation
}

web::json::value Financial::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountFieldIsSet)
    {
        val[utility::conversions::to_string_t(U("accountField"))] = ModelBase::toJson(m_AccountField);
    }
    if(m_CustomKeyIsSet)
    {
        val[utility::conversions::to_string_t(U("customKey"))] = ModelBase::toJson(m_CustomKey);
    }
    if(m_AccountsIsSet)
    {
        val[utility::conversions::to_string_t(U("accounts"))] = ModelBase::toJson(m_Accounts);
    }
    if(m_RequirementIsSet)
    {
        val[utility::conversions::to_string_t(U("requirement"))] = ModelBase::toJson(m_Requirement);
    }

    return val;
}

bool Financial::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("accountField"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountField")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_accountField;
            ok &= ModelBase::fromJson(fieldValue, refVal_accountField);
            setAccountField(refVal_accountField);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_customKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_customKey);
            setCustomKey(refVal_customKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accounts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FinancialAccounts>> refVal_accounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_accounts);
            setAccounts(refVal_accounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requirement"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requirement")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentsRequired> refVal_requirement;
            ok &= ModelBase::fromJson(fieldValue, refVal_requirement);
            setRequirement(refVal_requirement);
        }
    }
    return ok;
}

void Financial::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AccountFieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountField")), m_AccountField));
    }
    if(m_CustomKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customKey")), m_CustomKey));
    }
    if(m_AccountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accounts")), m_Accounts));
    }
    if(m_RequirementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requirement")), m_Requirement));
    }
}

bool Financial::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("accountField"))))
    {
        utility::string_t refVal_accountField;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountField"))), refVal_accountField );
        setAccountField(refVal_accountField);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customKey"))))
    {
        utility::string_t refVal_customKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customKey"))), refVal_customKey );
        setCustomKey(refVal_customKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accounts"))))
    {
        std::vector<std::shared_ptr<FinancialAccounts>> refVal_accounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accounts"))), refVal_accounts );
        setAccounts(refVal_accounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requirement"))))
    {
        std::shared_ptr<DocumentsRequired> refVal_requirement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requirement"))), refVal_requirement );
        setRequirement(refVal_requirement);
    }
    return ok;
}

utility::string_t Financial::getAccountField() const
{
    return m_AccountField;
}

void Financial::setAccountField(const utility::string_t& value)
{
    m_AccountField = value;
    m_AccountFieldIsSet = true;
}

bool Financial::accountFieldIsSet() const
{
    return m_AccountFieldIsSet;
}

void Financial::unsetAccountField()
{
    m_AccountFieldIsSet = false;
}
utility::string_t Financial::getCustomKey() const
{
    return m_CustomKey;
}

void Financial::setCustomKey(const utility::string_t& value)
{
    m_CustomKey = value;
    m_CustomKeyIsSet = true;
}

bool Financial::customKeyIsSet() const
{
    return m_CustomKeyIsSet;
}

void Financial::unsetCustomKey()
{
    m_CustomKeyIsSet = false;
}
std::vector<std::shared_ptr<FinancialAccounts>>& Financial::getAccounts()
{
    return m_Accounts;
}

void Financial::setAccounts(const std::vector<std::shared_ptr<FinancialAccounts>>& value)
{
    m_Accounts = value;
    m_AccountsIsSet = true;
}

bool Financial::accountsIsSet() const
{
    return m_AccountsIsSet;
}

void Financial::unsetAccounts()
{
    m_AccountsIsSet = false;
}
std::shared_ptr<DocumentsRequired> Financial::getRequirement() const
{
    return m_Requirement;
}

void Financial::setRequirement(const std::shared_ptr<DocumentsRequired>& value)
{
    m_Requirement = value;
    m_RequirementIsSet = true;
}

bool Financial::requirementIsSet() const
{
    return m_RequirementIsSet;
}

void Financial::unsetRequirement()
{
    m_RequirementIsSet = false;
}
}
}


