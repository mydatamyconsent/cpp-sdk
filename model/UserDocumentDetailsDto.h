/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserDocumentDetailsDto.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_UserDocumentDetailsDto_H_
#define MYDATAMYCONSENT_MODELS_UserDocumentDetailsDto_H_


#include "ModelBase.h"

#include "model/DigitalSignature.h"
#include "model/DocumentCategoryType.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  UserDocumentDetailsDto
    : public ModelBase
{
public:
    UserDocumentDetailsDto();
    virtual ~UserDocumentDetailsDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserDocumentDetailsDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DocumentCategoryType> getCategoryType() const;
    bool categoryTypeIsSet() const;
    void unsetCategoryType();

    void setCategoryType(const std::shared_ptr<DocumentCategoryType>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRTypeId() const;
    bool rTypeIdIsSet() const;
    void unsetr_typeId();

    void setRTypeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRTypeName() const;
    bool rTypeNameIsSet() const;
    void unsetr_typeName();

    void setRTypeName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFullName() const;
    bool fullNameIsSet() const;
    void unsetFullName();

    void setFullName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIdentifier() const;
    bool identifierIsSet() const;
    void unsetIdentifier();

    void setIdentifier(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccountId() const;
    bool accountIdIsSet() const;
    void unsetAccountId();

    void setAccountId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIssuerId() const;
    bool issuerIdIsSet() const;
    void unsetIssuerId();

    void setIssuerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIssuerName() const;
    bool issuerNameIsSet() const;
    void unsetIssuerName();

    void setIssuerName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStorageUrl() const;
    bool storageUrlIsSet() const;
    void unsetStorageUrl();

    void setStorageUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsQuickAccessEnabled() const;
    bool isQuickAccessEnabledIsSet() const;
    void unsetIsQuickAccessEnabled();

    void setIsQuickAccessEnabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsOwner() const;
    bool isOwnerIsSet() const;
    void unsetIsOwner();

    void setIsOwner(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DigitalSignature>>& getDigitalSignatureDetails();
    bool digitalSignatureDetailsIsSet() const;
    void unsetDigitalSignatureDetails();

    void setDigitalSignatureDetails(const std::vector<std::shared_ptr<DigitalSignature>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOwnerId() const;
    bool ownerIdIsSet() const;
    void unsetOwnerId();

    void setOwnerId(const utility::string_t& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<DocumentCategoryType> m_CategoryType;
    bool m_CategoryTypeIsSet;
    utility::string_t m_r_typeId;
    bool m_r_typeIdIsSet;
    utility::string_t m_r_typeName;
    bool m_r_typeNameIsSet;
    utility::string_t m_FullName;
    bool m_FullNameIsSet;
    utility::string_t m_Identifier;
    bool m_IdentifierIsSet;
    utility::string_t m_AccountId;
    bool m_AccountIdIsSet;
    utility::string_t m_IssuerId;
    bool m_IssuerIdIsSet;
    utility::string_t m_IssuerName;
    bool m_IssuerNameIsSet;
    utility::string_t m_StorageUrl;
    bool m_StorageUrlIsSet;
    bool m_IsQuickAccessEnabled;
    bool m_IsQuickAccessEnabledIsSet;
    bool m_IsOwner;
    bool m_IsOwnerIsSet;
    std::vector<std::shared_ptr<DigitalSignature>> m_DigitalSignatureDetails;
    bool m_DigitalSignatureDetailsIsSet;
    utility::string_t m_OwnerId;
    bool m_OwnerIdIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_UserDocumentDetailsDto_H_ */
