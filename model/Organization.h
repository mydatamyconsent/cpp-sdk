/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Organization.h
 *
 * 
 */

#ifndef MYDATAMYCONSENT_MODELS_Organization_H_
#define MYDATAMYCONSENT_MODELS_Organization_H_


#include "ModelBase.h"

#include "model/OrganizationAddress.h"
#include "model/Country.h"
#include "model/OrganizationCategory.h"
#include "model/OrganizationFinancialAccount.h"
#include "model/OrganizationKyoDocument.h"
#include "model/OrganizationMetaData.h"
#include "model/OrganizationType.h"
#include <vector>
#include "model/ApplicationUser.h"
#include "model/OrganizationStatus.h"
#include <cpprest/details/basic_types.h>
#include "model/AuthorizedPersonnelKycDocumentType.h"
#include "model/DocumentProviderCategory.h"

namespace mydatamyconsent {
namespace models {


/// <summary>
/// 
/// </summary>
class  Organization
    : public ModelBase
{
public:
    Organization();
    virtual ~Organization();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Organization members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreatedBy() const;
    bool createdByIsSet() const;
    void unsetCreatedBy();

    void setCreatedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAtUtc() const;
    bool createdAtUtcIsSet() const;
    void unsetCreatedAtUtc();

    void setCreatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUpdatedBy() const;
    bool updatedByIsSet() const;
    void unsetUpdatedBy();

    void setUpdatedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getUpdatedAtUtc() const;
    bool updatedAtUtcIsSet() const;
    void unsetUpdatedAtUtc();

    void setUpdatedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getCreatedByUser() const;
    bool createdByUserIsSet() const;
    void unsetCreatedByUser();

    void setCreatedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getUpdatedByUser() const;
    bool updatedByUserIsSet() const;
    void unsetUpdatedByUser();

    void setUpdatedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeletedBy() const;
    bool deletedByIsSet() const;
    void unsetDeletedBy();

    void setDeletedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDeletedAtUtc() const;
    bool deletedAtUtcIsSet() const;
    void unsetDeletedAtUtc();

    void setDeletedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getDeletedByUser() const;
    bool deletedByUserIsSet() const;
    void unsetDeletedByUser();

    void setDeletedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDataPartnerId() const;
    bool dataPartnerIdIsSet() const;
    void unsetDataPartnerId();

    void setDataPartnerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRTypeId() const;
    bool rTypeIdIsSet() const;
    void unsetr_typeId();

    void setRTypeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategoryId() const;
    bool categoryIdIsSet() const;
    void unsetCategoryId();

    void setCategoryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentProviderCategoryId() const;
    bool documentProviderCategoryIdIsSet() const;
    void unsetDocumentProviderCategoryId();

    void setDocumentProviderCategoryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRegulatorName() const;
    bool regulatorNameIsSet() const;
    void unsetRegulatorName();

    void setRegulatorName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBrandName() const;
    bool brandNameIsSet() const;
    void unsetBrandName();

    void setBrandName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAuthorizedPersonnelTaxId() const;
    bool authorizedPersonnelTaxIdIsSet() const;
    void unsetAuthorizedPersonnelTaxId();

    void setAuthorizedPersonnelTaxId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAuthorizedPersonnelName() const;
    bool authorizedPersonnelNameIsSet() const;
    void unsetAuthorizedPersonnelName();

    void setAuthorizedPersonnelName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AuthorizedPersonnelKycDocumentType> getAuthorizedPersonnelKycDocumentType() const;
    bool authorizedPersonnelKycDocumentTypeIsSet() const;
    void unsetAuthorizedPersonnelKycDocumentType();

    void setAuthorizedPersonnelKycDocumentType(const std::shared_ptr<AuthorizedPersonnelKycDocumentType>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRegistrationId() const;
    bool registrationIdIsSet() const;
    void unsetRegistrationId();

    void setRegistrationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVatId() const;
    bool vatIdIsSet() const;
    void unsetVatId();

    void setVatId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTaxId() const;
    bool taxIdIsSet() const;
    void unsetTaxId();

    void setTaxId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLogoUrl() const;
    bool logoUrlIsSet() const;
    void unsetLogoUrl();

    void setLogoUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getContactEmail() const;
    bool contactEmailIsSet() const;
    void unsetContactEmail();

    void setContactEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhoneNumber() const;
    bool phoneNumberIsSet() const;
    void unsetPhoneNumber();

    void setPhoneNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountryId() const;
    bool countryIdIsSet() const;
    void unsetCountryId();

    void setCountryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStateId() const;
    bool stateIdIsSet() const;
    void unsetStateId();

    void setStateId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrganizationStatus> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<OrganizationStatus>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCompanyCode() const;
    bool companyCodeIsSet() const;
    void unsetCompanyCode();

    void setCompanyCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrivacyPolicyUrl() const;
    bool privacyPolicyUrlIsSet() const;
    void unsetPrivacyPolicyUrl();

    void setPrivacyPolicyUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTermsOfServiceUrl() const;
    bool termsOfServiceUrlIsSet() const;
    void unsetTermsOfServiceUrl();

    void setTermsOfServiceUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWebsiteUrl() const;
    bool websiteUrlIsSet() const;
    void unsetWebsiteUrl();

    void setWebsiteUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHelpLineNumber() const;
    bool helpLineNumberIsSet() const;
    void unsetHelpLineNumber();

    void setHelpLineNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSupportEmail() const;
    bool supportEmailIsSet() const;
    void unsetSupportEmail();

    void setSupportEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGovernmentOrganization() const;
    bool isGovernmentOrganizationIsSet() const;
    void unsetIsGovernmentOrganization();

    void setIsGovernmentOrganization(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDlApiKey() const;
    bool dlApiKeyIsSet() const;
    void unsetDlApiKey();

    void setDlApiKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsKyoCompleted() const;
    bool isKyoCompletedIsSet() const;
    void unsetIsKyoCompleted();

    void setIsKyoCompleted(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsEnabled() const;
    bool isEnabledIsSet() const;
    void unsetIsEnabled();

    void setIsEnabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsDataProvider() const;
    bool isDataProviderIsSet() const;
    void unsetIsDataProvider();

    void setIsDataProvider(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsDataConsumer() const;
    bool isDataConsumerIsSet() const;
    void unsetIsDataConsumer();

    void setIsDataConsumer(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getSubmittedAtUtc() const;
    bool submittedAtUtcIsSet() const;
    void unsetSubmittedAtUtc();

    void setSubmittedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getApprovedBy() const;
    bool approvedByIsSet() const;
    void unsetApprovedBy();

    void setApprovedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getApprovedAtUtc() const;
    bool approvedAtUtcIsSet() const;
    void unsetApprovedAtUtc();

    void setApprovedAtUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsDigiLockerOrganization() const;
    bool isDigiLockerOrganizationIsSet() const;
    void unsetIsDigiLockerOrganization();

    void setIsDigiLockerOrganization(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsMdmcMaintained() const;
    bool isMdmcMaintainedIsSet() const;
    void unsetIsMdmcMaintained();

    void setIsMdmcMaintained(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsBbps() const;
    bool isBbpsIsSet() const;
    void unsetIsBbps();

    void setIsBbps(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrganizationMetaData> getMetaData() const;
    bool metaDataIsSet() const;
    void unsetMetaData();

    void setMetaData(const std::shared_ptr<OrganizationMetaData>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountryCode() const;
    bool countryCodeIsSet() const;
    void unsetCountryCode();

    void setCountryCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrganizationType> getOrganizationType() const;
    bool organizationTypeIsSet() const;
    void unsetOrganizationType();

    void setOrganizationType(const std::shared_ptr<OrganizationType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrganizationCategory> getOrganizationCategory() const;
    bool organizationCategoryIsSet() const;
    void unsetOrganizationCategory();

    void setOrganizationCategory(const std::shared_ptr<OrganizationCategory>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DocumentProviderCategory> getDocumentProviderCategory() const;
    bool documentProviderCategoryIsSet() const;
    void unsetDocumentProviderCategory();

    void setDocumentProviderCategory(const std::shared_ptr<DocumentProviderCategory>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<OrganizationAddress>>& getAddresses();
    bool addressesIsSet() const;
    void unsetAddresses();

    void setAddresses(const std::vector<std::shared_ptr<OrganizationAddress>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<OrganizationFinancialAccount>>& getFinancialAccounts();
    bool financialAccountsIsSet() const;
    void unsetFinancialAccounts();

    void setFinancialAccounts(const std::vector<std::shared_ptr<OrganizationFinancialAccount>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Country> getCountryState() const;
    bool countryStateIsSet() const;
    void unsetCountryState();

    void setCountryState(const std::shared_ptr<Country>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ApplicationUser> getApprovedByUser() const;
    bool approvedByUserIsSet() const;
    void unsetApprovedByUser();

    void setApprovedByUser(const std::shared_ptr<ApplicationUser>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<OrganizationKyoDocument>>& getKyoDocuments();
    bool kyoDocumentsIsSet() const;
    void unsetKyoDocuments();

    void setKyoDocuments(const std::vector<std::shared_ptr<OrganizationKyoDocument>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsDelete() const;
    bool isDeleteIsSet() const;
    void unsetIsDelete();

    void setIsDelete(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRecoveryToken() const;
    bool recoveryTokenIsSet() const;
    void unsetRecoveryToken();

    void setRecoveryToken(const utility::string_t& value);


protected:
    utility::string_t m_CreatedBy;
    bool m_CreatedByIsSet;
    utility::datetime m_CreatedAtUtc;
    bool m_CreatedAtUtcIsSet;
    utility::string_t m_UpdatedBy;
    bool m_UpdatedByIsSet;
    utility::datetime m_UpdatedAtUtc;
    bool m_UpdatedAtUtcIsSet;
    std::shared_ptr<ApplicationUser> m_CreatedByUser;
    bool m_CreatedByUserIsSet;
    std::shared_ptr<ApplicationUser> m_UpdatedByUser;
    bool m_UpdatedByUserIsSet;
    utility::string_t m_DeletedBy;
    bool m_DeletedByIsSet;
    utility::datetime m_DeletedAtUtc;
    bool m_DeletedAtUtcIsSet;
    std::shared_ptr<ApplicationUser> m_DeletedByUser;
    bool m_DeletedByUserIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_DataPartnerId;
    bool m_DataPartnerIdIsSet;
    utility::string_t m_r_typeId;
    bool m_r_typeIdIsSet;
    utility::string_t m_CategoryId;
    bool m_CategoryIdIsSet;
    utility::string_t m_DocumentProviderCategoryId;
    bool m_DocumentProviderCategoryIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_RegulatorName;
    bool m_RegulatorNameIsSet;
    utility::string_t m_BrandName;
    bool m_BrandNameIsSet;
    utility::string_t m_AuthorizedPersonnelTaxId;
    bool m_AuthorizedPersonnelTaxIdIsSet;
    utility::string_t m_AuthorizedPersonnelName;
    bool m_AuthorizedPersonnelNameIsSet;
    std::shared_ptr<AuthorizedPersonnelKycDocumentType> m_AuthorizedPersonnelKycDocumentType;
    bool m_AuthorizedPersonnelKycDocumentTypeIsSet;
    utility::string_t m_RegistrationId;
    bool m_RegistrationIdIsSet;
    utility::string_t m_VatId;
    bool m_VatIdIsSet;
    utility::string_t m_TaxId;
    bool m_TaxIdIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_LogoUrl;
    bool m_LogoUrlIsSet;
    utility::string_t m_ContactEmail;
    bool m_ContactEmailIsSet;
    utility::string_t m_PhoneNumber;
    bool m_PhoneNumberIsSet;
    utility::string_t m_CountryId;
    bool m_CountryIdIsSet;
    utility::string_t m_StateId;
    bool m_StateIdIsSet;
    std::shared_ptr<OrganizationStatus> m_Status;
    bool m_StatusIsSet;
    utility::string_t m_CompanyCode;
    bool m_CompanyCodeIsSet;
    utility::string_t m_PrivacyPolicyUrl;
    bool m_PrivacyPolicyUrlIsSet;
    utility::string_t m_TermsOfServiceUrl;
    bool m_TermsOfServiceUrlIsSet;
    utility::string_t m_WebsiteUrl;
    bool m_WebsiteUrlIsSet;
    utility::string_t m_HelpLineNumber;
    bool m_HelpLineNumberIsSet;
    utility::string_t m_SupportEmail;
    bool m_SupportEmailIsSet;
    bool m_IsGovernmentOrganization;
    bool m_IsGovernmentOrganizationIsSet;
    utility::string_t m_DlApiKey;
    bool m_DlApiKeyIsSet;
    bool m_IsKyoCompleted;
    bool m_IsKyoCompletedIsSet;
    bool m_IsEnabled;
    bool m_IsEnabledIsSet;
    bool m_IsDataProvider;
    bool m_IsDataProviderIsSet;
    bool m_IsDataConsumer;
    bool m_IsDataConsumerIsSet;
    utility::datetime m_SubmittedAtUtc;
    bool m_SubmittedAtUtcIsSet;
    utility::string_t m_ApprovedBy;
    bool m_ApprovedByIsSet;
    utility::datetime m_ApprovedAtUtc;
    bool m_ApprovedAtUtcIsSet;
    bool m_IsDigiLockerOrganization;
    bool m_IsDigiLockerOrganizationIsSet;
    bool m_IsMdmcMaintained;
    bool m_IsMdmcMaintainedIsSet;
    bool m_IsBbps;
    bool m_IsBbpsIsSet;
    std::shared_ptr<OrganizationMetaData> m_MetaData;
    bool m_MetaDataIsSet;
    utility::string_t m_CountryCode;
    bool m_CountryCodeIsSet;
    std::shared_ptr<OrganizationType> m_OrganizationType;
    bool m_OrganizationTypeIsSet;
    std::shared_ptr<OrganizationCategory> m_OrganizationCategory;
    bool m_OrganizationCategoryIsSet;
    std::shared_ptr<DocumentProviderCategory> m_DocumentProviderCategory;
    bool m_DocumentProviderCategoryIsSet;
    std::vector<std::shared_ptr<OrganizationAddress>> m_Addresses;
    bool m_AddressesIsSet;
    std::vector<std::shared_ptr<OrganizationFinancialAccount>> m_FinancialAccounts;
    bool m_FinancialAccountsIsSet;
    std::shared_ptr<Country> m_CountryState;
    bool m_CountryStateIsSet;
    std::shared_ptr<ApplicationUser> m_ApprovedByUser;
    bool m_ApprovedByUserIsSet;
    std::vector<std::shared_ptr<OrganizationKyoDocument>> m_KyoDocuments;
    bool m_KyoDocumentsIsSet;
    bool m_IsDelete;
    bool m_IsDeleteIsSet;
    utility::string_t m_RecoveryToken;
    bool m_RecoveryTokenIsSet;
};


}
}

#endif /* MYDATAMYCONSENT_MODELS_Organization_H_ */
