/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/IssuedDocumentPaginatedList.h"

namespace mydatamyconsent {
namespace models {



IssuedDocumentPaginatedList::IssuedDocumentPaginatedList()
{
    m_PageIndex = 0;
    m_PageIndexIsSet = false;
    m_PageSize = 0;
    m_PageSizeIsSet = false;
    m_TotalPages = 0;
    m_TotalPagesIsSet = false;
    m_TotalItems = 0L;
    m_TotalItemsIsSet = false;
    m_ItemsIsSet = false;
}

IssuedDocumentPaginatedList::~IssuedDocumentPaginatedList()
{
}

void IssuedDocumentPaginatedList::validate()
{
    // TODO: implement validation
}

web::json::value IssuedDocumentPaginatedList::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PageIndexIsSet)
    {
        val[utility::conversions::to_string_t(U("pageIndex"))] = ModelBase::toJson(m_PageIndex);
    }
    if(m_PageSizeIsSet)
    {
        val[utility::conversions::to_string_t(U("pageSize"))] = ModelBase::toJson(m_PageSize);
    }
    if(m_TotalPagesIsSet)
    {
        val[utility::conversions::to_string_t(U("totalPages"))] = ModelBase::toJson(m_TotalPages);
    }
    if(m_TotalItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("totalItems"))] = ModelBase::toJson(m_TotalItems);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_Items);
    }

    return val;
}

bool IssuedDocumentPaginatedList::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("pageIndex"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageIndex")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPageIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPageIndex);
            setPageIndex(refVal_setPageIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pageSize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageSize")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPageSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPageSize);
            setPageSize(refVal_setPageSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalPages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalPages")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalPages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalPages);
            setTotalPages(refVal_setTotalPages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalItems"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalItems")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTotalItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalItems);
            setTotalItems(refVal_setTotalItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IssuedDocument>> refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
        }
    }
    return ok;
}

void IssuedDocumentPaginatedList::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PageIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageIndex")), m_PageIndex));
    }
    if(m_PageSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageSize")), m_PageSize));
    }
    if(m_TotalPagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalPages")), m_TotalPages));
    }
    if(m_TotalItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalItems")), m_TotalItems));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_Items));
    }
}

bool IssuedDocumentPaginatedList::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("pageIndex"))))
    {
        int32_t refVal_setPageIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageIndex"))), refVal_setPageIndex );
        setPageIndex(refVal_setPageIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pageSize"))))
    {
        int32_t refVal_setPageSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageSize"))), refVal_setPageSize );
        setPageSize(refVal_setPageSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalPages"))))
    {
        int32_t refVal_setTotalPages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalPages"))), refVal_setTotalPages );
        setTotalPages(refVal_setTotalPages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalItems"))))
    {
        int64_t refVal_setTotalItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalItems"))), refVal_setTotalItems );
        setTotalItems(refVal_setTotalItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        std::vector<std::shared_ptr<IssuedDocument>> refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    return ok;
}

int32_t IssuedDocumentPaginatedList::getPageIndex() const
{
    return m_PageIndex;
}

void IssuedDocumentPaginatedList::setPageIndex(int32_t value)
{
    m_PageIndex = value;
    m_PageIndexIsSet = true;
}

bool IssuedDocumentPaginatedList::pageIndexIsSet() const
{
    return m_PageIndexIsSet;
}

void IssuedDocumentPaginatedList::unsetPageIndex()
{
    m_PageIndexIsSet = false;
}
int32_t IssuedDocumentPaginatedList::getPageSize() const
{
    return m_PageSize;
}

void IssuedDocumentPaginatedList::setPageSize(int32_t value)
{
    m_PageSize = value;
    m_PageSizeIsSet = true;
}

bool IssuedDocumentPaginatedList::pageSizeIsSet() const
{
    return m_PageSizeIsSet;
}

void IssuedDocumentPaginatedList::unsetPageSize()
{
    m_PageSizeIsSet = false;
}
int32_t IssuedDocumentPaginatedList::getTotalPages() const
{
    return m_TotalPages;
}

void IssuedDocumentPaginatedList::setTotalPages(int32_t value)
{
    m_TotalPages = value;
    m_TotalPagesIsSet = true;
}

bool IssuedDocumentPaginatedList::totalPagesIsSet() const
{
    return m_TotalPagesIsSet;
}

void IssuedDocumentPaginatedList::unsetTotalPages()
{
    m_TotalPagesIsSet = false;
}
int64_t IssuedDocumentPaginatedList::getTotalItems() const
{
    return m_TotalItems;
}

void IssuedDocumentPaginatedList::setTotalItems(int64_t value)
{
    m_TotalItems = value;
    m_TotalItemsIsSet = true;
}

bool IssuedDocumentPaginatedList::totalItemsIsSet() const
{
    return m_TotalItemsIsSet;
}

void IssuedDocumentPaginatedList::unsetTotalItems()
{
    m_TotalItemsIsSet = false;
}
std::vector<std::shared_ptr<IssuedDocument>>& IssuedDocumentPaginatedList::getItems()
{
    return m_Items;
}

void IssuedDocumentPaginatedList::setItems(const std::vector<std::shared_ptr<IssuedDocument>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool IssuedDocumentPaginatedList::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void IssuedDocumentPaginatedList::unsetItems()
{
    m_ItemsIsSet = false;
}
}
}


