/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/SupportedEntityType.h"

namespace mydatamyconsent {
namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

SupportedEntityType::eSupportedEntityType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("Individual")))
        return SupportedEntityType::eSupportedEntityType::SupportedEntityType_INDIVIDUAL;
    if (val == utility::conversions::to_string_t(U("Organization")))
        return SupportedEntityType::eSupportedEntityType::SupportedEntityType_ORGANIZATION;
    if (val == utility::conversions::to_string_t(U("Both")))
        return SupportedEntityType::eSupportedEntityType::SupportedEntityType_BOTH;
    return {};
}

EnumUnderlyingType fromEnum(SupportedEntityType::eSupportedEntityType e)
{
    switch (e)
    {
    case SupportedEntityType::eSupportedEntityType::SupportedEntityType_INDIVIDUAL:
        return U("Individual");
    case SupportedEntityType::eSupportedEntityType::SupportedEntityType_ORGANIZATION:
        return U("Organization");
    case SupportedEntityType::eSupportedEntityType::SupportedEntityType_BOTH:
        return U("Both");
    default:
        break;
    }
    return {};
}
}

SupportedEntityType::SupportedEntityType()
{
}

SupportedEntityType::~SupportedEntityType()
{
}

void SupportedEntityType::validate()
{
    // TODO: implement validation
}

web::json::value SupportedEntityType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool SupportedEntityType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void SupportedEntityType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool SupportedEntityType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

SupportedEntityType::eSupportedEntityType SupportedEntityType::getValue() const
{
   return m_value;
}

void SupportedEntityType::setValue(SupportedEntityType::eSupportedEntityType const value)
{
   m_value = value;
}


}
}


