/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/FinancialAccount.h"

namespace mydatamyconsent {
namespace models {



FinancialAccount::FinancialAccount()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Issuer = utility::conversions::to_string_t("");
    m_IssuerIsSet = false;
    m_LogoUrl = utility::conversions::to_string_t("");
    m_LogoUrlIsSet = false;
    m_CategoryId = utility::conversions::to_string_t("");
    m_CategoryIdIsSet = false;
    m_CategoryName = utility::conversions::to_string_t("");
    m_CategoryNameIsSet = false;
    m_AccountName = utility::conversions::to_string_t("");
    m_AccountNameIsSet = false;
    m_AccountLogoUrl = utility::conversions::to_string_t("");
    m_AccountLogoUrlIsSet = false;
    m_Balance = utility::conversions::to_string_t("");
    m_BalanceIsSet = false;
    m_BalanceType = utility::conversions::to_string_t("");
    m_BalanceTypeIsSet = false;
    m_IsShared = false;
    m_IsSharedIsSet = false;
    m_SharedWithIsSet = false;
    m_IsReceived = false;
    m_IsReceivedIsSet = false;
    m_ExpiresAtUtc = utility::datetime();
    m_ExpiresAtUtcIsSet = false;
    m_ActivitiesIsSet = false;
    m_ApprovedConsentRequestsIsSet = false;
}

FinancialAccount::~FinancialAccount()
{
}

void FinancialAccount::validate()
{
    // TODO: implement validation
}

web::json::value FinancialAccount::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_IssuerIsSet)
    {
        val[utility::conversions::to_string_t(U("issuer"))] = ModelBase::toJson(m_Issuer);
    }
    if(m_LogoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("logoUrl"))] = ModelBase::toJson(m_LogoUrl);
    }
    if(m_CategoryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryId"))] = ModelBase::toJson(m_CategoryId);
    }
    if(m_CategoryNameIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryName"))] = ModelBase::toJson(m_CategoryName);
    }
    if(m_AccountNameIsSet)
    {
        val[utility::conversions::to_string_t(U("accountName"))] = ModelBase::toJson(m_AccountName);
    }
    if(m_AccountLogoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("accountLogoUrl"))] = ModelBase::toJson(m_AccountLogoUrl);
    }
    if(m_BalanceIsSet)
    {
        val[utility::conversions::to_string_t(U("balance"))] = ModelBase::toJson(m_Balance);
    }
    if(m_BalanceTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("balanceType"))] = ModelBase::toJson(m_BalanceType);
    }
    if(m_IsSharedIsSet)
    {
        val[utility::conversions::to_string_t(U("isShared"))] = ModelBase::toJson(m_IsShared);
    }
    if(m_SharedWithIsSet)
    {
        val[utility::conversions::to_string_t(U("sharedWith"))] = ModelBase::toJson(m_SharedWith);
    }
    if(m_IsReceivedIsSet)
    {
        val[utility::conversions::to_string_t(U("isReceived"))] = ModelBase::toJson(m_IsReceived);
    }
    if(m_ExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAtUtc"))] = ModelBase::toJson(m_ExpiresAtUtc);
    }
    if(m_ActivitiesIsSet)
    {
        val[utility::conversions::to_string_t(U("activities"))] = ModelBase::toJson(m_Activities);
    }
    if(m_ApprovedConsentRequestsIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedConsentRequests"))] = ModelBase::toJson(m_ApprovedConsentRequests);
    }

    return val;
}

bool FinancialAccount::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuer")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIssuer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIssuer);
            setIssuer(refVal_setIssuer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLogoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogoUrl);
            setLogoUrl(refVal_setLogoUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategoryId);
            setCategoryId(refVal_setCategoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategoryName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategoryName);
            setCategoryName(refVal_setCategoryName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accountName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountName);
            setAccountName(refVal_setAccountName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accountLogoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountLogoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountLogoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountLogoUrl);
            setAccountLogoUrl(refVal_setAccountLogoUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("balance"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("balance")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBalance;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBalance);
            setBalance(refVal_setBalance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("balanceType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("balanceType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBalanceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBalanceType);
            setBalanceType(refVal_setBalanceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isShared"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isShared")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsShared;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsShared);
            setIsShared(refVal_setIsShared);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sharedWith"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sharedWith")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SharedWith>> refVal_setSharedWith;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSharedWith);
            setSharedWith(refVal_setSharedWith);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isReceived"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isReceived")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReceived;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReceived);
            setIsReceived(refVal_setIsReceived);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiresAtUtc);
            setExpiresAtUtc(refVal_setExpiresAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("activities"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("activities")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Activity>> refVal_setActivities;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActivities);
            setActivities(refVal_setActivities);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedConsentRequests"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedConsentRequests")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ApprovedConsentRequest>> refVal_setApprovedConsentRequests;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApprovedConsentRequests);
            setApprovedConsentRequests(refVal_setApprovedConsentRequests);
        }
    }
    return ok;
}

void FinancialAccount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_IssuerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuer")), m_Issuer));
    }
    if(m_LogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logoUrl")), m_LogoUrl));
    }
    if(m_CategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryId")), m_CategoryId));
    }
    if(m_CategoryNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryName")), m_CategoryName));
    }
    if(m_AccountNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountName")), m_AccountName));
    }
    if(m_AccountLogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountLogoUrl")), m_AccountLogoUrl));
    }
    if(m_BalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("balance")), m_Balance));
    }
    if(m_BalanceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("balanceType")), m_BalanceType));
    }
    if(m_IsSharedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isShared")), m_IsShared));
    }
    if(m_SharedWithIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sharedWith")), m_SharedWith));
    }
    if(m_IsReceivedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isReceived")), m_IsReceived));
    }
    if(m_ExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAtUtc")), m_ExpiresAtUtc));
    }
    if(m_ActivitiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("activities")), m_Activities));
    }
    if(m_ApprovedConsentRequestsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedConsentRequests")), m_ApprovedConsentRequests));
    }
}

bool FinancialAccount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuer"))))
    {
        utility::string_t refVal_setIssuer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuer"))), refVal_setIssuer );
        setIssuer(refVal_setIssuer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logoUrl"))))
    {
        utility::string_t refVal_setLogoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logoUrl"))), refVal_setLogoUrl );
        setLogoUrl(refVal_setLogoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryId"))))
    {
        utility::string_t refVal_setCategoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryId"))), refVal_setCategoryId );
        setCategoryId(refVal_setCategoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryName"))))
    {
        utility::string_t refVal_setCategoryName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryName"))), refVal_setCategoryName );
        setCategoryName(refVal_setCategoryName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accountName"))))
    {
        utility::string_t refVal_setAccountName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountName"))), refVal_setAccountName );
        setAccountName(refVal_setAccountName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accountLogoUrl"))))
    {
        utility::string_t refVal_setAccountLogoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountLogoUrl"))), refVal_setAccountLogoUrl );
        setAccountLogoUrl(refVal_setAccountLogoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("balance"))))
    {
        utility::string_t refVal_setBalance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("balance"))), refVal_setBalance );
        setBalance(refVal_setBalance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("balanceType"))))
    {
        utility::string_t refVal_setBalanceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("balanceType"))), refVal_setBalanceType );
        setBalanceType(refVal_setBalanceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isShared"))))
    {
        bool refVal_setIsShared;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isShared"))), refVal_setIsShared );
        setIsShared(refVal_setIsShared);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sharedWith"))))
    {
        std::vector<std::shared_ptr<SharedWith>> refVal_setSharedWith;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sharedWith"))), refVal_setSharedWith );
        setSharedWith(refVal_setSharedWith);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isReceived"))))
    {
        bool refVal_setIsReceived;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isReceived"))), refVal_setIsReceived );
        setIsReceived(refVal_setIsReceived);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        utility::datetime refVal_setExpiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAtUtc"))), refVal_setExpiresAtUtc );
        setExpiresAtUtc(refVal_setExpiresAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("activities"))))
    {
        std::vector<std::shared_ptr<Activity>> refVal_setActivities;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("activities"))), refVal_setActivities );
        setActivities(refVal_setActivities);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedConsentRequests"))))
    {
        std::vector<std::shared_ptr<ApprovedConsentRequest>> refVal_setApprovedConsentRequests;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedConsentRequests"))), refVal_setApprovedConsentRequests );
        setApprovedConsentRequests(refVal_setApprovedConsentRequests);
    }
    return ok;
}

utility::string_t FinancialAccount::getId() const
{
    return m_Id;
}

void FinancialAccount::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FinancialAccount::idIsSet() const
{
    return m_IdIsSet;
}

void FinancialAccount::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t FinancialAccount::getIssuer() const
{
    return m_Issuer;
}

void FinancialAccount::setIssuer(const utility::string_t& value)
{
    m_Issuer = value;
    m_IssuerIsSet = true;
}

bool FinancialAccount::issuerIsSet() const
{
    return m_IssuerIsSet;
}

void FinancialAccount::unsetIssuer()
{
    m_IssuerIsSet = false;
}
utility::string_t FinancialAccount::getLogoUrl() const
{
    return m_LogoUrl;
}

void FinancialAccount::setLogoUrl(const utility::string_t& value)
{
    m_LogoUrl = value;
    m_LogoUrlIsSet = true;
}

bool FinancialAccount::logoUrlIsSet() const
{
    return m_LogoUrlIsSet;
}

void FinancialAccount::unsetLogoUrl()
{
    m_LogoUrlIsSet = false;
}
utility::string_t FinancialAccount::getCategoryId() const
{
    return m_CategoryId;
}

void FinancialAccount::setCategoryId(const utility::string_t& value)
{
    m_CategoryId = value;
    m_CategoryIdIsSet = true;
}

bool FinancialAccount::categoryIdIsSet() const
{
    return m_CategoryIdIsSet;
}

void FinancialAccount::unsetCategoryId()
{
    m_CategoryIdIsSet = false;
}
utility::string_t FinancialAccount::getCategoryName() const
{
    return m_CategoryName;
}

void FinancialAccount::setCategoryName(const utility::string_t& value)
{
    m_CategoryName = value;
    m_CategoryNameIsSet = true;
}

bool FinancialAccount::categoryNameIsSet() const
{
    return m_CategoryNameIsSet;
}

void FinancialAccount::unsetCategoryName()
{
    m_CategoryNameIsSet = false;
}
utility::string_t FinancialAccount::getAccountName() const
{
    return m_AccountName;
}

void FinancialAccount::setAccountName(const utility::string_t& value)
{
    m_AccountName = value;
    m_AccountNameIsSet = true;
}

bool FinancialAccount::accountNameIsSet() const
{
    return m_AccountNameIsSet;
}

void FinancialAccount::unsetAccountName()
{
    m_AccountNameIsSet = false;
}
utility::string_t FinancialAccount::getAccountLogoUrl() const
{
    return m_AccountLogoUrl;
}

void FinancialAccount::setAccountLogoUrl(const utility::string_t& value)
{
    m_AccountLogoUrl = value;
    m_AccountLogoUrlIsSet = true;
}

bool FinancialAccount::accountLogoUrlIsSet() const
{
    return m_AccountLogoUrlIsSet;
}

void FinancialAccount::unsetAccountLogoUrl()
{
    m_AccountLogoUrlIsSet = false;
}
utility::string_t FinancialAccount::getBalance() const
{
    return m_Balance;
}

void FinancialAccount::setBalance(const utility::string_t& value)
{
    m_Balance = value;
    m_BalanceIsSet = true;
}

bool FinancialAccount::balanceIsSet() const
{
    return m_BalanceIsSet;
}

void FinancialAccount::unsetBalance()
{
    m_BalanceIsSet = false;
}
utility::string_t FinancialAccount::getBalanceType() const
{
    return m_BalanceType;
}

void FinancialAccount::setBalanceType(const utility::string_t& value)
{
    m_BalanceType = value;
    m_BalanceTypeIsSet = true;
}

bool FinancialAccount::balanceTypeIsSet() const
{
    return m_BalanceTypeIsSet;
}

void FinancialAccount::unsetBalanceType()
{
    m_BalanceTypeIsSet = false;
}
bool FinancialAccount::isIsShared() const
{
    return m_IsShared;
}

void FinancialAccount::setIsShared(bool value)
{
    m_IsShared = value;
    m_IsSharedIsSet = true;
}

bool FinancialAccount::isSharedIsSet() const
{
    return m_IsSharedIsSet;
}

void FinancialAccount::unsetIsShared()
{
    m_IsSharedIsSet = false;
}
std::vector<std::shared_ptr<SharedWith>>& FinancialAccount::getSharedWith()
{
    return m_SharedWith;
}

void FinancialAccount::setSharedWith(const std::vector<std::shared_ptr<SharedWith>>& value)
{
    m_SharedWith = value;
    m_SharedWithIsSet = true;
}

bool FinancialAccount::sharedWithIsSet() const
{
    return m_SharedWithIsSet;
}

void FinancialAccount::unsetSharedWith()
{
    m_SharedWithIsSet = false;
}
bool FinancialAccount::isIsReceived() const
{
    return m_IsReceived;
}

void FinancialAccount::setIsReceived(bool value)
{
    m_IsReceived = value;
    m_IsReceivedIsSet = true;
}

bool FinancialAccount::isReceivedIsSet() const
{
    return m_IsReceivedIsSet;
}

void FinancialAccount::unsetIsReceived()
{
    m_IsReceivedIsSet = false;
}
utility::datetime FinancialAccount::getExpiresAtUtc() const
{
    return m_ExpiresAtUtc;
}

void FinancialAccount::setExpiresAtUtc(const utility::datetime& value)
{
    m_ExpiresAtUtc = value;
    m_ExpiresAtUtcIsSet = true;
}

bool FinancialAccount::expiresAtUtcIsSet() const
{
    return m_ExpiresAtUtcIsSet;
}

void FinancialAccount::unsetExpiresAtUtc()
{
    m_ExpiresAtUtcIsSet = false;
}
std::vector<std::shared_ptr<Activity>>& FinancialAccount::getActivities()
{
    return m_Activities;
}

void FinancialAccount::setActivities(const std::vector<std::shared_ptr<Activity>>& value)
{
    m_Activities = value;
    m_ActivitiesIsSet = true;
}

bool FinancialAccount::activitiesIsSet() const
{
    return m_ActivitiesIsSet;
}

void FinancialAccount::unsetActivities()
{
    m_ActivitiesIsSet = false;
}
std::vector<std::shared_ptr<ApprovedConsentRequest>>& FinancialAccount::getApprovedConsentRequests()
{
    return m_ApprovedConsentRequests;
}

void FinancialAccount::setApprovedConsentRequests(const std::vector<std::shared_ptr<ApprovedConsentRequest>>& value)
{
    m_ApprovedConsentRequests = value;
    m_ApprovedConsentRequestsIsSet = true;
}

bool FinancialAccount::approvedConsentRequestsIsSet() const
{
    return m_ApprovedConsentRequestsIsSet;
}

void FinancialAccount::unsetApprovedConsentRequests()
{
    m_ApprovedConsentRequestsIsSet = false;
}
}
}


