/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/OrganizationDataConsentRequestDetails.h"

namespace mydatamyconsent {
namespace models {



OrganizationDataConsentRequestDetails::OrganizationDataConsentRequestDetails()
{
    m_Receiver = utility::conversions::to_string_t("");
    m_ReceiverIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_TemplateId = utility::conversions::to_string_t("");
    m_TemplateIdIsSet = false;
    m_ConsentId = utility::conversions::to_string_t("");
    m_ConsentIdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Purpose = utility::conversions::to_string_t("");
    m_PurposeIsSet = false;
    m_StatusIsSet = false;
    m_TransactionId = utility::conversions::to_string_t("");
    m_TransactionIdIsSet = false;
    m_CreatedAtUtc = utility::datetime();
    m_CreatedAtUtcIsSet = false;
    m_ExpiresAtUtc = utility::datetime();
    m_ExpiresAtUtcIsSet = false;
}

OrganizationDataConsentRequestDetails::~OrganizationDataConsentRequestDetails()
{
}

void OrganizationDataConsentRequestDetails::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationDataConsentRequestDetails::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ReceiverIsSet)
    {
        val[utility::conversions::to_string_t(U("receiver"))] = ModelBase::toJson(m_Receiver);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TemplateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("templateId"))] = ModelBase::toJson(m_TemplateId);
    }
    if(m_ConsentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("consentId"))] = ModelBase::toJson(m_ConsentId);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_PurposeIsSet)
    {
        val[utility::conversions::to_string_t(U("purpose"))] = ModelBase::toJson(m_Purpose);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_TransactionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("transactionId"))] = ModelBase::toJson(m_TransactionId);
    }
    if(m_CreatedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAtUtc"))] = ModelBase::toJson(m_CreatedAtUtc);
    }
    if(m_ExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAtUtc"))] = ModelBase::toJson(m_ExpiresAtUtc);
    }

    return val;
}

bool OrganizationDataConsentRequestDetails::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("receiver"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("receiver")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReceiver;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReceiver);
            setReceiver(refVal_setReceiver);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consentId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConsentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsentId);
            setConsentId(refVal_setConsentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("purpose"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("purpose")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPurpose;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPurpose);
            setPurpose(refVal_setPurpose);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataConsentStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transactionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transactionId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTransactionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransactionId);
            setTransactionId(refVal_setTransactionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAtUtc);
            setCreatedAtUtc(refVal_setCreatedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiresAtUtc);
            setExpiresAtUtc(refVal_setExpiresAtUtc);
        }
    }
    return ok;
}

void OrganizationDataConsentRequestDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ReceiverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("receiver")), m_Receiver));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_TemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateId")), m_TemplateId));
    }
    if(m_ConsentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consentId")), m_ConsentId));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_PurposeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("purpose")), m_Purpose));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_TransactionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transactionId")), m_TransactionId));
    }
    if(m_CreatedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAtUtc")), m_CreatedAtUtc));
    }
    if(m_ExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAtUtc")), m_ExpiresAtUtc));
    }
}

bool OrganizationDataConsentRequestDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("receiver"))))
    {
        utility::string_t refVal_setReceiver;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("receiver"))), refVal_setReceiver );
        setReceiver(refVal_setReceiver);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateId"))))
    {
        utility::string_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateId"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consentId"))))
    {
        utility::string_t refVal_setConsentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consentId"))), refVal_setConsentId );
        setConsentId(refVal_setConsentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("purpose"))))
    {
        utility::string_t refVal_setPurpose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("purpose"))), refVal_setPurpose );
        setPurpose(refVal_setPurpose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<DataConsentStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transactionId"))))
    {
        utility::string_t refVal_setTransactionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transactionId"))), refVal_setTransactionId );
        setTransactionId(refVal_setTransactionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAtUtc"))))
    {
        utility::datetime refVal_setCreatedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAtUtc"))), refVal_setCreatedAtUtc );
        setCreatedAtUtc(refVal_setCreatedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        utility::datetime refVal_setExpiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAtUtc"))), refVal_setExpiresAtUtc );
        setExpiresAtUtc(refVal_setExpiresAtUtc);
    }
    return ok;
}

utility::string_t OrganizationDataConsentRequestDetails::getReceiver() const
{
    return m_Receiver;
}

void OrganizationDataConsentRequestDetails::setReceiver(const utility::string_t& value)
{
    m_Receiver = value;
    m_ReceiverIsSet = true;
}

bool OrganizationDataConsentRequestDetails::receiverIsSet() const
{
    return m_ReceiverIsSet;
}

void OrganizationDataConsentRequestDetails::unsetReceiver()
{
    m_ReceiverIsSet = false;
}
utility::string_t OrganizationDataConsentRequestDetails::getId() const
{
    return m_Id;
}

void OrganizationDataConsentRequestDetails::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrganizationDataConsentRequestDetails::idIsSet() const
{
    return m_IdIsSet;
}

void OrganizationDataConsentRequestDetails::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrganizationDataConsentRequestDetails::getTemplateId() const
{
    return m_TemplateId;
}

void OrganizationDataConsentRequestDetails::setTemplateId(const utility::string_t& value)
{
    m_TemplateId = value;
    m_TemplateIdIsSet = true;
}

bool OrganizationDataConsentRequestDetails::templateIdIsSet() const
{
    return m_TemplateIdIsSet;
}

void OrganizationDataConsentRequestDetails::unsetTemplateId()
{
    m_TemplateIdIsSet = false;
}
utility::string_t OrganizationDataConsentRequestDetails::getConsentId() const
{
    return m_ConsentId;
}

void OrganizationDataConsentRequestDetails::setConsentId(const utility::string_t& value)
{
    m_ConsentId = value;
    m_ConsentIdIsSet = true;
}

bool OrganizationDataConsentRequestDetails::consentIdIsSet() const
{
    return m_ConsentIdIsSet;
}

void OrganizationDataConsentRequestDetails::unsetConsentId()
{
    m_ConsentIdIsSet = false;
}
utility::string_t OrganizationDataConsentRequestDetails::getTitle() const
{
    return m_Title;
}

void OrganizationDataConsentRequestDetails::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool OrganizationDataConsentRequestDetails::titleIsSet() const
{
    return m_TitleIsSet;
}

void OrganizationDataConsentRequestDetails::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t OrganizationDataConsentRequestDetails::getDescription() const
{
    return m_Description;
}

void OrganizationDataConsentRequestDetails::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool OrganizationDataConsentRequestDetails::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void OrganizationDataConsentRequestDetails::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t OrganizationDataConsentRequestDetails::getPurpose() const
{
    return m_Purpose;
}

void OrganizationDataConsentRequestDetails::setPurpose(const utility::string_t& value)
{
    m_Purpose = value;
    m_PurposeIsSet = true;
}

bool OrganizationDataConsentRequestDetails::purposeIsSet() const
{
    return m_PurposeIsSet;
}

void OrganizationDataConsentRequestDetails::unsetPurpose()
{
    m_PurposeIsSet = false;
}
std::shared_ptr<DataConsentStatus> OrganizationDataConsentRequestDetails::getStatus() const
{
    return m_Status;
}

void OrganizationDataConsentRequestDetails::setStatus(const std::shared_ptr<DataConsentStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool OrganizationDataConsentRequestDetails::statusIsSet() const
{
    return m_StatusIsSet;
}

void OrganizationDataConsentRequestDetails::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t OrganizationDataConsentRequestDetails::getTransactionId() const
{
    return m_TransactionId;
}

void OrganizationDataConsentRequestDetails::setTransactionId(const utility::string_t& value)
{
    m_TransactionId = value;
    m_TransactionIdIsSet = true;
}

bool OrganizationDataConsentRequestDetails::transactionIdIsSet() const
{
    return m_TransactionIdIsSet;
}

void OrganizationDataConsentRequestDetails::unsetTransactionId()
{
    m_TransactionIdIsSet = false;
}
utility::datetime OrganizationDataConsentRequestDetails::getCreatedAtUtc() const
{
    return m_CreatedAtUtc;
}

void OrganizationDataConsentRequestDetails::setCreatedAtUtc(const utility::datetime& value)
{
    m_CreatedAtUtc = value;
    m_CreatedAtUtcIsSet = true;
}

bool OrganizationDataConsentRequestDetails::createdAtUtcIsSet() const
{
    return m_CreatedAtUtcIsSet;
}

void OrganizationDataConsentRequestDetails::unsetCreatedAtUtc()
{
    m_CreatedAtUtcIsSet = false;
}
utility::datetime OrganizationDataConsentRequestDetails::getExpiresAtUtc() const
{
    return m_ExpiresAtUtc;
}

void OrganizationDataConsentRequestDetails::setExpiresAtUtc(const utility::datetime& value)
{
    m_ExpiresAtUtc = value;
    m_ExpiresAtUtcIsSet = true;
}

bool OrganizationDataConsentRequestDetails::expiresAtUtcIsSet() const
{
    return m_ExpiresAtUtcIsSet;
}

void OrganizationDataConsentRequestDetails::unsetExpiresAtUtc()
{
    m_ExpiresAtUtcIsSet = false;
}
}
}


