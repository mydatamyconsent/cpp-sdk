/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/DocumentSubCategoryType.h"

namespace mydatamyconsent {
namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

DocumentSubCategoryType::eDocumentSubCategoryType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("Identity")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_IDENTITY;
    if (val == utility::conversions::to_string_t(U("Property")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_PROPERTY;
    if (val == utility::conversions::to_string_t(U("Vehicle")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_VEHICLE;
    if (val == utility::conversions::to_string_t(U("AdmitAndIdCards")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_ADMITANDIDCARDS;
    if (val == utility::conversions::to_string_t(U("Marksheets")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_MARKSHEETS;
    if (val == utility::conversions::to_string_t(U("Transcripts")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_TRANSCRIPTS;
    if (val == utility::conversions::to_string_t(U("Certificates")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_CERTIFICATES;
    if (val == utility::conversions::to_string_t(U("Prescriptions")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_PRESCRIPTIONS;
    if (val == utility::conversions::to_string_t(U("MedicalReports")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_MEDICALREPORTS;
    if (val == utility::conversions::to_string_t(U("DischargeSummary")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_DISCHARGESUMMARY;
    if (val == utility::conversions::to_string_t(U("AccountAndCertificates")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_ACCOUNTANDCERTIFICATES;
    if (val == utility::conversions::to_string_t(U("BillsAndInvoices")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_BILLSANDINVOICES;
    if (val == utility::conversions::to_string_t(U("Insurance")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_INSURANCE;
    if (val == utility::conversions::to_string_t(U("ReceiptsAndSubscriptions")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_RECEIPTSANDSUBSCRIPTIONS;
    if (val == utility::conversions::to_string_t(U("Taxes")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_TAXES;
    if (val == utility::conversions::to_string_t(U("LicencesAndCertificates")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_LICENCESANDCERTIFICATES;
    if (val == utility::conversions::to_string_t(U("Corporates")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_CORPORATES;
    if (val == utility::conversions::to_string_t(U("Competitions")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_COMPETITIONS;
    if (val == utility::conversions::to_string_t(U("IntellectualProperties")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_INTELLECTUALPROPERTIES;
    if (val == utility::conversions::to_string_t(U("Others")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_OTHERS;
    if (val == utility::conversions::to_string_t(U("ApplicationsAndCertificates")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_APPLICATIONSANDCERTIFICATES;
    if (val == utility::conversions::to_string_t(U("Licenses")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_LICENSES;
    if (val == utility::conversions::to_string_t(U("OrganizationIds")))
        return DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_ORGANIZATIONIDS;
    return {};
}

EnumUnderlyingType fromEnum(DocumentSubCategoryType::eDocumentSubCategoryType e)
{
    switch (e)
    {
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_IDENTITY:
        return U("Identity");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_PROPERTY:
        return U("Property");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_VEHICLE:
        return U("Vehicle");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_ADMITANDIDCARDS:
        return U("AdmitAndIdCards");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_MARKSHEETS:
        return U("Marksheets");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_TRANSCRIPTS:
        return U("Transcripts");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_CERTIFICATES:
        return U("Certificates");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_PRESCRIPTIONS:
        return U("Prescriptions");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_MEDICALREPORTS:
        return U("MedicalReports");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_DISCHARGESUMMARY:
        return U("DischargeSummary");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_ACCOUNTANDCERTIFICATES:
        return U("AccountAndCertificates");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_BILLSANDINVOICES:
        return U("BillsAndInvoices");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_INSURANCE:
        return U("Insurance");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_RECEIPTSANDSUBSCRIPTIONS:
        return U("ReceiptsAndSubscriptions");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_TAXES:
        return U("Taxes");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_LICENCESANDCERTIFICATES:
        return U("LicencesAndCertificates");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_CORPORATES:
        return U("Corporates");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_COMPETITIONS:
        return U("Competitions");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_INTELLECTUALPROPERTIES:
        return U("IntellectualProperties");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_OTHERS:
        return U("Others");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_APPLICATIONSANDCERTIFICATES:
        return U("ApplicationsAndCertificates");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_LICENSES:
        return U("Licenses");
    case DocumentSubCategoryType::eDocumentSubCategoryType::DocumentSubCategoryType_ORGANIZATIONIDS:
        return U("OrganizationIds");
    default:
        break;
    }
    return {};
}
}

DocumentSubCategoryType::DocumentSubCategoryType()
{
}

DocumentSubCategoryType::~DocumentSubCategoryType()
{
}

void DocumentSubCategoryType::validate()
{
    // TODO: implement validation
}

web::json::value DocumentSubCategoryType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool DocumentSubCategoryType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void DocumentSubCategoryType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool DocumentSubCategoryType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

DocumentSubCategoryType::eDocumentSubCategoryType DocumentSubCategoryType::getValue() const
{
   return m_value;
}

void DocumentSubCategoryType::setValue(DocumentSubCategoryType::eDocumentSubCategoryType const value)
{
   m_value = value;
}


}
}


