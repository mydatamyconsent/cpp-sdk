/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/DocumentIssueRequest.h"

namespace mydatamyconsent {
namespace models {



DocumentIssueRequest::DocumentIssueRequest()
{
    m_DocumentTypeId = utility::conversions::to_string_t("");
    m_DocumentTypeIdIsSet = false;
    m_Identifier = utility::conversions::to_string_t("");
    m_IdentifierIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ReceiverIsSet = false;
    m_IssuedAtUtc = utility::datetime();
    m_IssuedAtUtcIsSet = false;
    m_ValidFromUtc = utility::datetime();
    m_ValidFromUtcIsSet = false;
    m_ExpiresAtUtc = utility::datetime();
    m_ExpiresAtUtcIsSet = false;
    m_PaymentRequestIsSet = false;
    m_MetadataIsSet = false;
}

DocumentIssueRequest::~DocumentIssueRequest()
{
}

void DocumentIssueRequest::validate()
{
    // TODO: implement validation
}

web::json::value DocumentIssueRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentTypeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("documentTypeId"))] = ModelBase::toJson(m_DocumentTypeId);
    }
    if(m_IdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("identifier"))] = ModelBase::toJson(m_Identifier);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_ReceiverIsSet)
    {
        val[utility::conversions::to_string_t(U("receiver"))] = ModelBase::toJson(m_Receiver);
    }
    if(m_IssuedAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("issuedAtUtc"))] = ModelBase::toJson(m_IssuedAtUtc);
    }
    if(m_ValidFromUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("validFromUtc"))] = ModelBase::toJson(m_ValidFromUtc);
    }
    if(m_ExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAtUtc"))] = ModelBase::toJson(m_ExpiresAtUtc);
    }
    if(m_PaymentRequestIsSet)
    {
        val[utility::conversions::to_string_t(U("paymentRequest"))] = ModelBase::toJson(m_PaymentRequest);
    }
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("metadata"))] = ModelBase::toJson(m_Metadata);
    }

    return val;
}

bool DocumentIssueRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("documentTypeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("documentTypeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDocumentTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDocumentTypeId);
            setDocumentTypeId(refVal_setDocumentTypeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIdentifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIdentifier);
            setIdentifier(refVal_setIdentifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("receiver"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("receiver")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentReceiver> refVal_setReceiver;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReceiver);
            setReceiver(refVal_setReceiver);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuedAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuedAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setIssuedAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIssuedAtUtc);
            setIssuedAtUtc(refVal_setIssuedAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validFromUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validFromUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setValidFromUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidFromUtc);
            setValidFromUtc(refVal_setValidFromUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiresAtUtc);
            setExpiresAtUtc(refVal_setExpiresAtUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paymentRequest"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paymentRequest")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PaymentRequest> refVal_setPaymentRequest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaymentRequest);
            setPaymentRequest(refVal_setPaymentRequest);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metadata")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetadata);
            setMetadata(refVal_setMetadata);
        }
    }
    return ok;
}

void DocumentIssueRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DocumentTypeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("documentTypeId")), m_DocumentTypeId));
    }
    if(m_IdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifier")), m_Identifier));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_ReceiverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("receiver")), m_Receiver));
    }
    if(m_IssuedAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuedAtUtc")), m_IssuedAtUtc));
    }
    if(m_ValidFromUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validFromUtc")), m_ValidFromUtc));
    }
    if(m_ExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAtUtc")), m_ExpiresAtUtc));
    }
    if(m_PaymentRequestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paymentRequest")), m_PaymentRequest));
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metadata")), m_Metadata));
    }
}

bool DocumentIssueRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("documentTypeId"))))
    {
        utility::string_t refVal_setDocumentTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("documentTypeId"))), refVal_setDocumentTypeId );
        setDocumentTypeId(refVal_setDocumentTypeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identifier"))))
    {
        utility::string_t refVal_setIdentifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifier"))), refVal_setIdentifier );
        setIdentifier(refVal_setIdentifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("receiver"))))
    {
        std::shared_ptr<DocumentReceiver> refVal_setReceiver;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("receiver"))), refVal_setReceiver );
        setReceiver(refVal_setReceiver);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuedAtUtc"))))
    {
        utility::datetime refVal_setIssuedAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuedAtUtc"))), refVal_setIssuedAtUtc );
        setIssuedAtUtc(refVal_setIssuedAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validFromUtc"))))
    {
        utility::datetime refVal_setValidFromUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validFromUtc"))), refVal_setValidFromUtc );
        setValidFromUtc(refVal_setValidFromUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        utility::datetime refVal_setExpiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAtUtc"))), refVal_setExpiresAtUtc );
        setExpiresAtUtc(refVal_setExpiresAtUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paymentRequest"))))
    {
        std::shared_ptr<PaymentRequest> refVal_setPaymentRequest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paymentRequest"))), refVal_setPaymentRequest );
        setPaymentRequest(refVal_setPaymentRequest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metadata"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metadata"))), refVal_setMetadata );
        setMetadata(refVal_setMetadata);
    }
    return ok;
}

utility::string_t DocumentIssueRequest::getDocumentTypeId() const
{
    return m_DocumentTypeId;
}

void DocumentIssueRequest::setDocumentTypeId(const utility::string_t& value)
{
    m_DocumentTypeId = value;
    m_DocumentTypeIdIsSet = true;
}

bool DocumentIssueRequest::documentTypeIdIsSet() const
{
    return m_DocumentTypeIdIsSet;
}

void DocumentIssueRequest::unsetDocumentTypeId()
{
    m_DocumentTypeIdIsSet = false;
}
utility::string_t DocumentIssueRequest::getIdentifier() const
{
    return m_Identifier;
}

void DocumentIssueRequest::setIdentifier(const utility::string_t& value)
{
    m_Identifier = value;
    m_IdentifierIsSet = true;
}

bool DocumentIssueRequest::identifierIsSet() const
{
    return m_IdentifierIsSet;
}

void DocumentIssueRequest::unsetIdentifier()
{
    m_IdentifierIsSet = false;
}
utility::string_t DocumentIssueRequest::getDescription() const
{
    return m_Description;
}

void DocumentIssueRequest::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool DocumentIssueRequest::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void DocumentIssueRequest::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<DocumentReceiver> DocumentIssueRequest::getReceiver() const
{
    return m_Receiver;
}

void DocumentIssueRequest::setReceiver(const std::shared_ptr<DocumentReceiver>& value)
{
    m_Receiver = value;
    m_ReceiverIsSet = true;
}

bool DocumentIssueRequest::receiverIsSet() const
{
    return m_ReceiverIsSet;
}

void DocumentIssueRequest::unsetReceiver()
{
    m_ReceiverIsSet = false;
}
utility::datetime DocumentIssueRequest::getIssuedAtUtc() const
{
    return m_IssuedAtUtc;
}

void DocumentIssueRequest::setIssuedAtUtc(const utility::datetime& value)
{
    m_IssuedAtUtc = value;
    m_IssuedAtUtcIsSet = true;
}

bool DocumentIssueRequest::issuedAtUtcIsSet() const
{
    return m_IssuedAtUtcIsSet;
}

void DocumentIssueRequest::unsetIssuedAtUtc()
{
    m_IssuedAtUtcIsSet = false;
}
utility::datetime DocumentIssueRequest::getValidFromUtc() const
{
    return m_ValidFromUtc;
}

void DocumentIssueRequest::setValidFromUtc(const utility::datetime& value)
{
    m_ValidFromUtc = value;
    m_ValidFromUtcIsSet = true;
}

bool DocumentIssueRequest::validFromUtcIsSet() const
{
    return m_ValidFromUtcIsSet;
}

void DocumentIssueRequest::unsetValidFromUtc()
{
    m_ValidFromUtcIsSet = false;
}
utility::datetime DocumentIssueRequest::getExpiresAtUtc() const
{
    return m_ExpiresAtUtc;
}

void DocumentIssueRequest::setExpiresAtUtc(const utility::datetime& value)
{
    m_ExpiresAtUtc = value;
    m_ExpiresAtUtcIsSet = true;
}

bool DocumentIssueRequest::expiresAtUtcIsSet() const
{
    return m_ExpiresAtUtcIsSet;
}

void DocumentIssueRequest::unsetExpiresAtUtc()
{
    m_ExpiresAtUtcIsSet = false;
}
std::shared_ptr<PaymentRequest> DocumentIssueRequest::getPaymentRequest() const
{
    return m_PaymentRequest;
}

void DocumentIssueRequest::setPaymentRequest(const std::shared_ptr<PaymentRequest>& value)
{
    m_PaymentRequest = value;
    m_PaymentRequestIsSet = true;
}

bool DocumentIssueRequest::paymentRequestIsSet() const
{
    return m_PaymentRequestIsSet;
}

void DocumentIssueRequest::unsetPaymentRequest()
{
    m_PaymentRequestIsSet = false;
}
std::map<utility::string_t, utility::string_t>& DocumentIssueRequest::getMetadata()
{
    return m_Metadata;
}

void DocumentIssueRequest::setMetadata(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool DocumentIssueRequest::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void DocumentIssueRequest::unsetMetadata()
{
    m_MetadataIsSet = false;
}
}
}


