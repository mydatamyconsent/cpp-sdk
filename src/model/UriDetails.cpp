/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/UriDetails.h"

namespace mydatamyconsent {
namespace models {



UriDetails::UriDetails()
{
    m_Aadhaar = utility::conversions::to_string_t("");
    m_AadhaarIsSet = false;
    m_Uri = utility::conversions::to_string_t("");
    m_UriIsSet = false;
    m_DocType = utility::conversions::to_string_t("");
    m_DocTypeIsSet = false;
    m_DocName = utility::conversions::to_string_t("");
    m_DocNameIsSet = false;
    m_DocId = utility::conversions::to_string_t("");
    m_DocIdIsSet = false;
    m_IssuedOn = utility::conversions::to_string_t("");
    m_IssuedOnIsSet = false;
    m_ValidFrom = utility::conversions::to_string_t("");
    m_ValidFromIsSet = false;
    m_ValidTo = utility::conversions::to_string_t("");
    m_ValidToIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_Action = utility::conversions::to_string_t("");
    m_ActionIsSet = false;
}

UriDetails::~UriDetails()
{
}

void UriDetails::validate()
{
    // TODO: implement validation
}

web::json::value UriDetails::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AadhaarIsSet)
    {
        val[utility::conversions::to_string_t(U("aadhaar"))] = ModelBase::toJson(m_Aadhaar);
    }
    if(m_UriIsSet)
    {
        val[utility::conversions::to_string_t(U("uri"))] = ModelBase::toJson(m_Uri);
    }
    if(m_DocTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("docType"))] = ModelBase::toJson(m_DocType);
    }
    if(m_DocNameIsSet)
    {
        val[utility::conversions::to_string_t(U("docName"))] = ModelBase::toJson(m_DocName);
    }
    if(m_DocIdIsSet)
    {
        val[utility::conversions::to_string_t(U("docId"))] = ModelBase::toJson(m_DocId);
    }
    if(m_IssuedOnIsSet)
    {
        val[utility::conversions::to_string_t(U("issuedOn"))] = ModelBase::toJson(m_IssuedOn);
    }
    if(m_ValidFromIsSet)
    {
        val[utility::conversions::to_string_t(U("validFrom"))] = ModelBase::toJson(m_ValidFrom);
    }
    if(m_ValidToIsSet)
    {
        val[utility::conversions::to_string_t(U("validTo"))] = ModelBase::toJson(m_ValidTo);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_ActionIsSet)
    {
        val[utility::conversions::to_string_t(U("action"))] = ModelBase::toJson(m_Action);
    }

    return val;
}

bool UriDetails::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("aadhaar"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aadhaar")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAadhaar;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAadhaar);
            setAadhaar(refVal_setAadhaar);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uri"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uri")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUri;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUri);
            setUri(refVal_setUri);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("docType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("docType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDocType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDocType);
            setDocType(refVal_setDocType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("docName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("docName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDocName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDocName);
            setDocName(refVal_setDocName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("docId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("docId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDocId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDocId);
            setDocId(refVal_setDocId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuedOn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuedOn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIssuedOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIssuedOn);
            setIssuedOn(refVal_setIssuedOn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validFrom")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValidFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidFrom);
            setValidFrom(refVal_setValidFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validTo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValidTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidTo);
            setValidTo(refVal_setValidTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("action"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("action")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAction);
            setAction(refVal_setAction);
        }
    }
    return ok;
}

void UriDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AadhaarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aadhaar")), m_Aadhaar));
    }
    if(m_UriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uri")), m_Uri));
    }
    if(m_DocTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("docType")), m_DocType));
    }
    if(m_DocNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("docName")), m_DocName));
    }
    if(m_DocIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("docId")), m_DocId));
    }
    if(m_IssuedOnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuedOn")), m_IssuedOn));
    }
    if(m_ValidFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validFrom")), m_ValidFrom));
    }
    if(m_ValidToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validTo")), m_ValidTo));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_ActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("action")), m_Action));
    }
}

bool UriDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("aadhaar"))))
    {
        utility::string_t refVal_setAadhaar;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aadhaar"))), refVal_setAadhaar );
        setAadhaar(refVal_setAadhaar);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uri"))))
    {
        utility::string_t refVal_setUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uri"))), refVal_setUri );
        setUri(refVal_setUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("docType"))))
    {
        utility::string_t refVal_setDocType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("docType"))), refVal_setDocType );
        setDocType(refVal_setDocType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("docName"))))
    {
        utility::string_t refVal_setDocName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("docName"))), refVal_setDocName );
        setDocName(refVal_setDocName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("docId"))))
    {
        utility::string_t refVal_setDocId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("docId"))), refVal_setDocId );
        setDocId(refVal_setDocId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuedOn"))))
    {
        utility::string_t refVal_setIssuedOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuedOn"))), refVal_setIssuedOn );
        setIssuedOn(refVal_setIssuedOn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validFrom"))))
    {
        utility::string_t refVal_setValidFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validFrom"))), refVal_setValidFrom );
        setValidFrom(refVal_setValidFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validTo"))))
    {
        utility::string_t refVal_setValidTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validTo"))), refVal_setValidTo );
        setValidTo(refVal_setValidTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("action"))))
    {
        utility::string_t refVal_setAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("action"))), refVal_setAction );
        setAction(refVal_setAction);
    }
    return ok;
}

utility::string_t UriDetails::getAadhaar() const
{
    return m_Aadhaar;
}

void UriDetails::setAadhaar(const utility::string_t& value)
{
    m_Aadhaar = value;
    m_AadhaarIsSet = true;
}

bool UriDetails::aadhaarIsSet() const
{
    return m_AadhaarIsSet;
}

void UriDetails::unsetAadhaar()
{
    m_AadhaarIsSet = false;
}
utility::string_t UriDetails::getUri() const
{
    return m_Uri;
}

void UriDetails::setUri(const utility::string_t& value)
{
    m_Uri = value;
    m_UriIsSet = true;
}

bool UriDetails::uriIsSet() const
{
    return m_UriIsSet;
}

void UriDetails::unsetUri()
{
    m_UriIsSet = false;
}
utility::string_t UriDetails::getDocType() const
{
    return m_DocType;
}

void UriDetails::setDocType(const utility::string_t& value)
{
    m_DocType = value;
    m_DocTypeIsSet = true;
}

bool UriDetails::docTypeIsSet() const
{
    return m_DocTypeIsSet;
}

void UriDetails::unsetDocType()
{
    m_DocTypeIsSet = false;
}
utility::string_t UriDetails::getDocName() const
{
    return m_DocName;
}

void UriDetails::setDocName(const utility::string_t& value)
{
    m_DocName = value;
    m_DocNameIsSet = true;
}

bool UriDetails::docNameIsSet() const
{
    return m_DocNameIsSet;
}

void UriDetails::unsetDocName()
{
    m_DocNameIsSet = false;
}
utility::string_t UriDetails::getDocId() const
{
    return m_DocId;
}

void UriDetails::setDocId(const utility::string_t& value)
{
    m_DocId = value;
    m_DocIdIsSet = true;
}

bool UriDetails::docIdIsSet() const
{
    return m_DocIdIsSet;
}

void UriDetails::unsetDocId()
{
    m_DocIdIsSet = false;
}
utility::string_t UriDetails::getIssuedOn() const
{
    return m_IssuedOn;
}

void UriDetails::setIssuedOn(const utility::string_t& value)
{
    m_IssuedOn = value;
    m_IssuedOnIsSet = true;
}

bool UriDetails::issuedOnIsSet() const
{
    return m_IssuedOnIsSet;
}

void UriDetails::unsetIssuedOn()
{
    m_IssuedOnIsSet = false;
}
utility::string_t UriDetails::getValidFrom() const
{
    return m_ValidFrom;
}

void UriDetails::setValidFrom(const utility::string_t& value)
{
    m_ValidFrom = value;
    m_ValidFromIsSet = true;
}

bool UriDetails::validFromIsSet() const
{
    return m_ValidFromIsSet;
}

void UriDetails::unsetValidFrom()
{
    m_ValidFromIsSet = false;
}
utility::string_t UriDetails::getValidTo() const
{
    return m_ValidTo;
}

void UriDetails::setValidTo(const utility::string_t& value)
{
    m_ValidTo = value;
    m_ValidToIsSet = true;
}

bool UriDetails::validToIsSet() const
{
    return m_ValidToIsSet;
}

void UriDetails::unsetValidTo()
{
    m_ValidToIsSet = false;
}
utility::string_t UriDetails::getTimestamp() const
{
    return m_Timestamp;
}

void UriDetails::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool UriDetails::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void UriDetails::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t UriDetails::getAction() const
{
    return m_Action;
}

void UriDetails::setAction(const utility::string_t& value)
{
    m_Action = value;
    m_ActionIsSet = true;
}

bool UriDetails::actionIsSet() const
{
    return m_ActionIsSet;
}

void UriDetails::unsetAction()
{
    m_ActionIsSet = false;
}
}
}


