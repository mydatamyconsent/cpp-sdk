/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/UserAccountFinancialTransactionsDto.h"

namespace mydatamyconsent {
namespace models {



UserAccountFinancialTransactionsDto::UserAccountFinancialTransactionsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_AccountId = utility::conversions::to_string_t("");
    m_AccountIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_InstrumentId = utility::conversions::to_string_t("");
    m_InstrumentIdIsSet = false;
    m_TransactionType = utility::conversions::to_string_t("");
    m_TransactionTypeIsSet = false;
    m_Quantity = 0;
    m_QuantityIsSet = false;
    m_AveragePrice = 0.0;
    m_AveragePriceIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
}

UserAccountFinancialTransactionsDto::~UserAccountFinancialTransactionsDto()
{
}

void UserAccountFinancialTransactionsDto::validate()
{
    // TODO: implement validation
}

web::json::value UserAccountFinancialTransactionsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_AccountIdIsSet)
    {
        val[utility::conversions::to_string_t(U("accountId"))] = ModelBase::toJson(m_AccountId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_InstrumentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("instrumentId"))] = ModelBase::toJson(m_InstrumentId);
    }
    if(m_TransactionTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("transactionType"))] = ModelBase::toJson(m_TransactionType);
    }
    if(m_QuantityIsSet)
    {
        val[utility::conversions::to_string_t(U("quantity"))] = ModelBase::toJson(m_Quantity);
    }
    if(m_AveragePriceIsSet)
    {
        val[utility::conversions::to_string_t(U("averagePrice"))] = ModelBase::toJson(m_AveragePrice);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }

    return val;
}

bool UserAccountFinancialTransactionsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accountId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountId);
            setAccountId(refVal_setAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instrumentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instrumentId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstrumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstrumentId);
            setInstrumentId(refVal_setInstrumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transactionType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transactionType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTransactionType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransactionType);
            setTransactionType(refVal_setTransactionType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuantity);
            setQuantity(refVal_setQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("averagePrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("averagePrice")));
        if(!fieldValue.is_null())
        {
            double refVal_setAveragePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAveragePrice);
            setAveragePrice(refVal_setAveragePrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
        }
    }
    return ok;
}

void UserAccountFinancialTransactionsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_AccountIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountId")), m_AccountId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_InstrumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instrumentId")), m_InstrumentId));
    }
    if(m_TransactionTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transactionType")), m_TransactionType));
    }
    if(m_QuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quantity")), m_Quantity));
    }
    if(m_AveragePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("averagePrice")), m_AveragePrice));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
}

bool UserAccountFinancialTransactionsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accountId"))))
    {
        utility::string_t refVal_setAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountId"))), refVal_setAccountId );
        setAccountId(refVal_setAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instrumentId"))))
    {
        utility::string_t refVal_setInstrumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instrumentId"))), refVal_setInstrumentId );
        setInstrumentId(refVal_setInstrumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transactionType"))))
    {
        utility::string_t refVal_setTransactionType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transactionType"))), refVal_setTransactionType );
        setTransactionType(refVal_setTransactionType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quantity"))))
    {
        int32_t refVal_setQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quantity"))), refVal_setQuantity );
        setQuantity(refVal_setQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("averagePrice"))))
    {
        double refVal_setAveragePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("averagePrice"))), refVal_setAveragePrice );
        setAveragePrice(refVal_setAveragePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        utility::string_t refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    return ok;
}

utility::string_t UserAccountFinancialTransactionsDto::getId() const
{
    return m_Id;
}

void UserAccountFinancialTransactionsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UserAccountFinancialTransactionsDto::idIsSet() const
{
    return m_IdIsSet;
}

void UserAccountFinancialTransactionsDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UserAccountFinancialTransactionsDto::getAccountId() const
{
    return m_AccountId;
}

void UserAccountFinancialTransactionsDto::setAccountId(const utility::string_t& value)
{
    m_AccountId = value;
    m_AccountIdIsSet = true;
}

bool UserAccountFinancialTransactionsDto::accountIdIsSet() const
{
    return m_AccountIdIsSet;
}

void UserAccountFinancialTransactionsDto::unsetAccountId()
{
    m_AccountIdIsSet = false;
}
utility::string_t UserAccountFinancialTransactionsDto::getName() const
{
    return m_Name;
}

void UserAccountFinancialTransactionsDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool UserAccountFinancialTransactionsDto::nameIsSet() const
{
    return m_NameIsSet;
}

void UserAccountFinancialTransactionsDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t UserAccountFinancialTransactionsDto::getInstrumentId() const
{
    return m_InstrumentId;
}

void UserAccountFinancialTransactionsDto::setInstrumentId(const utility::string_t& value)
{
    m_InstrumentId = value;
    m_InstrumentIdIsSet = true;
}

bool UserAccountFinancialTransactionsDto::instrumentIdIsSet() const
{
    return m_InstrumentIdIsSet;
}

void UserAccountFinancialTransactionsDto::unsetInstrumentId()
{
    m_InstrumentIdIsSet = false;
}
utility::string_t UserAccountFinancialTransactionsDto::getTransactionType() const
{
    return m_TransactionType;
}

void UserAccountFinancialTransactionsDto::setTransactionType(const utility::string_t& value)
{
    m_TransactionType = value;
    m_TransactionTypeIsSet = true;
}

bool UserAccountFinancialTransactionsDto::transactionTypeIsSet() const
{
    return m_TransactionTypeIsSet;
}

void UserAccountFinancialTransactionsDto::unsetTransactionType()
{
    m_TransactionTypeIsSet = false;
}
int32_t UserAccountFinancialTransactionsDto::getQuantity() const
{
    return m_Quantity;
}

void UserAccountFinancialTransactionsDto::setQuantity(int32_t value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}

bool UserAccountFinancialTransactionsDto::quantityIsSet() const
{
    return m_QuantityIsSet;
}

void UserAccountFinancialTransactionsDto::unsetQuantity()
{
    m_QuantityIsSet = false;
}
double UserAccountFinancialTransactionsDto::getAveragePrice() const
{
    return m_AveragePrice;
}

void UserAccountFinancialTransactionsDto::setAveragePrice(double value)
{
    m_AveragePrice = value;
    m_AveragePriceIsSet = true;
}

bool UserAccountFinancialTransactionsDto::averagePriceIsSet() const
{
    return m_AveragePriceIsSet;
}

void UserAccountFinancialTransactionsDto::unsetAveragePrice()
{
    m_AveragePriceIsSet = false;
}
utility::string_t UserAccountFinancialTransactionsDto::getCurrency() const
{
    return m_Currency;
}

void UserAccountFinancialTransactionsDto::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool UserAccountFinancialTransactionsDto::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void UserAccountFinancialTransactionsDto::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
}
}


