/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/DataProvider.h"

namespace mydatamyconsent {
namespace models {



DataProvider::DataProvider()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Category = utility::conversions::to_string_t("");
    m_CategoryIsSet = false;
    m_LogoUrl = utility::conversions::to_string_t("");
    m_LogoUrlIsSet = false;
    m_Website = utility::conversions::to_string_t("");
    m_WebsiteIsSet = false;
    m_SupportEmail = utility::conversions::to_string_t("");
    m_SupportEmailIsSet = false;
    m_HelpLineNumber = utility::conversions::to_string_t("");
    m_HelpLineNumberIsSet = false;
    m_PrivacyPolicy = utility::conversions::to_string_t("");
    m_PrivacyPolicyIsSet = false;
    m_TermOfService = utility::conversions::to_string_t("");
    m_TermOfServiceIsSet = false;
    m_DataProtectionOfficerIsSet = false;
    m_SupportedDocumentTypesIsSet = false;
    m_SupportedAccountTypesIsSet = false;
}

DataProvider::~DataProvider()
{
}

void DataProvider::validate()
{
    // TODO: implement validation
}

web::json::value DataProvider::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("category"))] = ModelBase::toJson(m_Category);
    }
    if(m_LogoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("logoUrl"))] = ModelBase::toJson(m_LogoUrl);
    }
    if(m_WebsiteIsSet)
    {
        val[utility::conversions::to_string_t(U("website"))] = ModelBase::toJson(m_Website);
    }
    if(m_SupportEmailIsSet)
    {
        val[utility::conversions::to_string_t(U("supportEmail"))] = ModelBase::toJson(m_SupportEmail);
    }
    if(m_HelpLineNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("helpLineNumber"))] = ModelBase::toJson(m_HelpLineNumber);
    }
    if(m_PrivacyPolicyIsSet)
    {
        val[utility::conversions::to_string_t(U("privacyPolicy"))] = ModelBase::toJson(m_PrivacyPolicy);
    }
    if(m_TermOfServiceIsSet)
    {
        val[utility::conversions::to_string_t(U("termOfService"))] = ModelBase::toJson(m_TermOfService);
    }
    if(m_DataProtectionOfficerIsSet)
    {
        val[utility::conversions::to_string_t(U("dataProtectionOfficer"))] = ModelBase::toJson(m_DataProtectionOfficer);
    }
    if(m_SupportedDocumentTypesIsSet)
    {
        val[utility::conversions::to_string_t(U("supportedDocumentTypes"))] = ModelBase::toJson(m_SupportedDocumentTypes);
    }
    if(m_SupportedAccountTypesIsSet)
    {
        val[utility::conversions::to_string_t(U("supportedAccountTypes"))] = ModelBase::toJson(m_SupportedAccountTypes);
    }

    return val;
}

bool DataProvider::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
            setCategory(refVal_setCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLogoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogoUrl);
            setLogoUrl(refVal_setLogoUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("website"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("website")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebsite;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebsite);
            setWebsite(refVal_setWebsite);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportEmail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportEmail")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSupportEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupportEmail);
            setSupportEmail(refVal_setSupportEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("helpLineNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("helpLineNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHelpLineNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHelpLineNumber);
            setHelpLineNumber(refVal_setHelpLineNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("privacyPolicy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("privacyPolicy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrivacyPolicy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrivacyPolicy);
            setPrivacyPolicy(refVal_setPrivacyPolicy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("termOfService"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("termOfService")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTermOfService;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTermOfService);
            setTermOfService(refVal_setTermOfService);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dataProtectionOfficer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataProtectionOfficer")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataProtectionOfficer> refVal_setDataProtectionOfficer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataProtectionOfficer);
            setDataProtectionOfficer(refVal_setDataProtectionOfficer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportedDocumentTypes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportedDocumentTypes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSupportedDocumentTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupportedDocumentTypes);
            setSupportedDocumentTypes(refVal_setSupportedDocumentTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportedAccountTypes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportedAccountTypes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSupportedAccountTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupportedAccountTypes);
            setSupportedAccountTypes(refVal_setSupportedAccountTypes);
        }
    }
    return ok;
}

void DataProvider::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("category")), m_Category));
    }
    if(m_LogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logoUrl")), m_LogoUrl));
    }
    if(m_WebsiteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("website")), m_Website));
    }
    if(m_SupportEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportEmail")), m_SupportEmail));
    }
    if(m_HelpLineNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("helpLineNumber")), m_HelpLineNumber));
    }
    if(m_PrivacyPolicyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("privacyPolicy")), m_PrivacyPolicy));
    }
    if(m_TermOfServiceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("termOfService")), m_TermOfService));
    }
    if(m_DataProtectionOfficerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataProtectionOfficer")), m_DataProtectionOfficer));
    }
    if(m_SupportedDocumentTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportedDocumentTypes")), m_SupportedDocumentTypes));
    }
    if(m_SupportedAccountTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportedAccountTypes")), m_SupportedAccountTypes));
    }
}

bool DataProvider::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("category"))))
    {
        utility::string_t refVal_setCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("category"))), refVal_setCategory );
        setCategory(refVal_setCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logoUrl"))))
    {
        utility::string_t refVal_setLogoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logoUrl"))), refVal_setLogoUrl );
        setLogoUrl(refVal_setLogoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("website"))))
    {
        utility::string_t refVal_setWebsite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("website"))), refVal_setWebsite );
        setWebsite(refVal_setWebsite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportEmail"))))
    {
        utility::string_t refVal_setSupportEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportEmail"))), refVal_setSupportEmail );
        setSupportEmail(refVal_setSupportEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("helpLineNumber"))))
    {
        utility::string_t refVal_setHelpLineNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("helpLineNumber"))), refVal_setHelpLineNumber );
        setHelpLineNumber(refVal_setHelpLineNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("privacyPolicy"))))
    {
        utility::string_t refVal_setPrivacyPolicy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("privacyPolicy"))), refVal_setPrivacyPolicy );
        setPrivacyPolicy(refVal_setPrivacyPolicy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("termOfService"))))
    {
        utility::string_t refVal_setTermOfService;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("termOfService"))), refVal_setTermOfService );
        setTermOfService(refVal_setTermOfService);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dataProtectionOfficer"))))
    {
        std::shared_ptr<DataProtectionOfficer> refVal_setDataProtectionOfficer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataProtectionOfficer"))), refVal_setDataProtectionOfficer );
        setDataProtectionOfficer(refVal_setDataProtectionOfficer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportedDocumentTypes"))))
    {
        std::vector<utility::string_t> refVal_setSupportedDocumentTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportedDocumentTypes"))), refVal_setSupportedDocumentTypes );
        setSupportedDocumentTypes(refVal_setSupportedDocumentTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportedAccountTypes"))))
    {
        std::vector<utility::string_t> refVal_setSupportedAccountTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportedAccountTypes"))), refVal_setSupportedAccountTypes );
        setSupportedAccountTypes(refVal_setSupportedAccountTypes);
    }
    return ok;
}

utility::string_t DataProvider::getId() const
{
    return m_Id;
}

void DataProvider::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DataProvider::idIsSet() const
{
    return m_IdIsSet;
}

void DataProvider::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DataProvider::getName() const
{
    return m_Name;
}

void DataProvider::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DataProvider::nameIsSet() const
{
    return m_NameIsSet;
}

void DataProvider::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t DataProvider::getCategory() const
{
    return m_Category;
}

void DataProvider::setCategory(const utility::string_t& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool DataProvider::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void DataProvider::unsetCategory()
{
    m_CategoryIsSet = false;
}
utility::string_t DataProvider::getLogoUrl() const
{
    return m_LogoUrl;
}

void DataProvider::setLogoUrl(const utility::string_t& value)
{
    m_LogoUrl = value;
    m_LogoUrlIsSet = true;
}

bool DataProvider::logoUrlIsSet() const
{
    return m_LogoUrlIsSet;
}

void DataProvider::unsetLogoUrl()
{
    m_LogoUrlIsSet = false;
}
utility::string_t DataProvider::getWebsite() const
{
    return m_Website;
}

void DataProvider::setWebsite(const utility::string_t& value)
{
    m_Website = value;
    m_WebsiteIsSet = true;
}

bool DataProvider::websiteIsSet() const
{
    return m_WebsiteIsSet;
}

void DataProvider::unsetWebsite()
{
    m_WebsiteIsSet = false;
}
utility::string_t DataProvider::getSupportEmail() const
{
    return m_SupportEmail;
}

void DataProvider::setSupportEmail(const utility::string_t& value)
{
    m_SupportEmail = value;
    m_SupportEmailIsSet = true;
}

bool DataProvider::supportEmailIsSet() const
{
    return m_SupportEmailIsSet;
}

void DataProvider::unsetSupportEmail()
{
    m_SupportEmailIsSet = false;
}
utility::string_t DataProvider::getHelpLineNumber() const
{
    return m_HelpLineNumber;
}

void DataProvider::setHelpLineNumber(const utility::string_t& value)
{
    m_HelpLineNumber = value;
    m_HelpLineNumberIsSet = true;
}

bool DataProvider::helpLineNumberIsSet() const
{
    return m_HelpLineNumberIsSet;
}

void DataProvider::unsetHelpLineNumber()
{
    m_HelpLineNumberIsSet = false;
}
utility::string_t DataProvider::getPrivacyPolicy() const
{
    return m_PrivacyPolicy;
}

void DataProvider::setPrivacyPolicy(const utility::string_t& value)
{
    m_PrivacyPolicy = value;
    m_PrivacyPolicyIsSet = true;
}

bool DataProvider::privacyPolicyIsSet() const
{
    return m_PrivacyPolicyIsSet;
}

void DataProvider::unsetPrivacyPolicy()
{
    m_PrivacyPolicyIsSet = false;
}
utility::string_t DataProvider::getTermOfService() const
{
    return m_TermOfService;
}

void DataProvider::setTermOfService(const utility::string_t& value)
{
    m_TermOfService = value;
    m_TermOfServiceIsSet = true;
}

bool DataProvider::termOfServiceIsSet() const
{
    return m_TermOfServiceIsSet;
}

void DataProvider::unsetTermOfService()
{
    m_TermOfServiceIsSet = false;
}
std::shared_ptr<DataProtectionOfficer> DataProvider::getDataProtectionOfficer() const
{
    return m_DataProtectionOfficer;
}

void DataProvider::setDataProtectionOfficer(const std::shared_ptr<DataProtectionOfficer>& value)
{
    m_DataProtectionOfficer = value;
    m_DataProtectionOfficerIsSet = true;
}

bool DataProvider::dataProtectionOfficerIsSet() const
{
    return m_DataProtectionOfficerIsSet;
}

void DataProvider::unsetDataProtectionOfficer()
{
    m_DataProtectionOfficerIsSet = false;
}
std::vector<utility::string_t>& DataProvider::getSupportedDocumentTypes()
{
    return m_SupportedDocumentTypes;
}

void DataProvider::setSupportedDocumentTypes(const std::vector<utility::string_t>& value)
{
    m_SupportedDocumentTypes = value;
    m_SupportedDocumentTypesIsSet = true;
}

bool DataProvider::supportedDocumentTypesIsSet() const
{
    return m_SupportedDocumentTypesIsSet;
}

void DataProvider::unsetSupportedDocumentTypes()
{
    m_SupportedDocumentTypesIsSet = false;
}
std::vector<utility::string_t>& DataProvider::getSupportedAccountTypes()
{
    return m_SupportedAccountTypes;
}

void DataProvider::setSupportedAccountTypes(const std::vector<utility::string_t>& value)
{
    m_SupportedAccountTypes = value;
    m_SupportedAccountTypesIsSet = true;
}

bool DataProvider::supportedAccountTypesIsSet() const
{
    return m_SupportedAccountTypesIsSet;
}

void DataProvider::unsetSupportedAccountTypes()
{
    m_SupportedAccountTypesIsSet = false;
}
}
}


