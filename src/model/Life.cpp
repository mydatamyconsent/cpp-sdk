/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/Life.h"

namespace mydatamyconsent {
namespace models {



Life::Life()
{
    m_Unit = utility::conversions::to_string_t("");
    m_UnitIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

Life::~Life()
{
}

void Life::validate()
{
    // TODO: implement validation
}

web::json::value Life::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UnitIsSet)
    {
        val[utility::conversions::to_string_t(U("unit"))] = ModelBase::toJson(m_Unit);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool Life::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("unit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unit")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUnit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnit);
            setUnit(refVal_setUnit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    return ok;
}

void Life::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unit")), m_Unit));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
}

bool Life::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("unit"))))
    {
        utility::string_t refVal_setUnit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unit"))), refVal_setUnit );
        setUnit(refVal_setUnit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    return ok;
}

utility::string_t Life::getUnit() const
{
    return m_Unit;
}

void Life::setUnit(const utility::string_t& value)
{
    m_Unit = value;
    m_UnitIsSet = true;
}

bool Life::unitIsSet() const
{
    return m_UnitIsSet;
}

void Life::unsetUnit()
{
    m_UnitIsSet = false;
}
utility::string_t Life::getValue() const
{
    return m_Value;
}

void Life::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool Life::valueIsSet() const
{
    return m_ValueIsSet;
}

void Life::unsetValue()
{
    m_ValueIsSet = false;
}
}
}


