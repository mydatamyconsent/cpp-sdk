/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/DataConsentFinancialsDto.h"

namespace mydatamyconsent {
namespace models {



DataConsentFinancialsDto::DataConsentFinancialsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_FinancialsIsSet = false;
    m_ApprovedFinancialsIsSet = false;
}

DataConsentFinancialsDto::~DataConsentFinancialsDto()
{
}

void DataConsentFinancialsDto::validate()
{
    // TODO: implement validation
}

web::json::value DataConsentFinancialsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_FinancialsIsSet)
    {
        val[utility::conversions::to_string_t(U("financials"))] = ModelBase::toJson(m_Financials);
    }
    if(m_ApprovedFinancialsIsSet)
    {
        val[utility::conversions::to_string_t(U("approvedFinancials"))] = ModelBase::toJson(m_ApprovedFinancials);
    }

    return val;
}

bool DataConsentFinancialsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("financials"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("financials")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Financial>> refVal_setFinancials;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFinancials);
            setFinancials(refVal_setFinancials);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("approvedFinancials"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("approvedFinancials")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>> refVal_setApprovedFinancials;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApprovedFinancials);
            setApprovedFinancials(refVal_setApprovedFinancials);
        }
    }
    return ok;
}

void DataConsentFinancialsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_FinancialsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("financials")), m_Financials));
    }
    if(m_ApprovedFinancialsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("approvedFinancials")), m_ApprovedFinancials));
    }
}

bool DataConsentFinancialsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("financials"))))
    {
        std::vector<std::shared_ptr<Financial>> refVal_setFinancials;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("financials"))), refVal_setFinancials );
        setFinancials(refVal_setFinancials);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("approvedFinancials"))))
    {
        std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>> refVal_setApprovedFinancials;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("approvedFinancials"))), refVal_setApprovedFinancials );
        setApprovedFinancials(refVal_setApprovedFinancials);
    }
    return ok;
}

utility::string_t DataConsentFinancialsDto::getId() const
{
    return m_Id;
}

void DataConsentFinancialsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DataConsentFinancialsDto::idIsSet() const
{
    return m_IdIsSet;
}

void DataConsentFinancialsDto::unsetId()
{
    m_IdIsSet = false;
}
std::vector<std::shared_ptr<Financial>>& DataConsentFinancialsDto::getFinancials()
{
    return m_Financials;
}

void DataConsentFinancialsDto::setFinancials(const std::vector<std::shared_ptr<Financial>>& value)
{
    m_Financials = value;
    m_FinancialsIsSet = true;
}

bool DataConsentFinancialsDto::financialsIsSet() const
{
    return m_FinancialsIsSet;
}

void DataConsentFinancialsDto::unsetFinancials()
{
    m_FinancialsIsSet = false;
}
std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>>& DataConsentFinancialsDto::getApprovedFinancials()
{
    return m_ApprovedFinancials;
}

void DataConsentFinancialsDto::setApprovedFinancials(const std::vector<std::shared_ptr<DataConsentRequestedFinancialAccount>>& value)
{
    m_ApprovedFinancials = value;
    m_ApprovedFinancialsIsSet = true;
}

bool DataConsentFinancialsDto::approvedFinancialsIsSet() const
{
    return m_ApprovedFinancialsIsSet;
}

void DataConsentFinancialsDto::unsetApprovedFinancials()
{
    m_ApprovedFinancialsIsSet = false;
}
}
}


