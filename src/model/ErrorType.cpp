/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/ErrorType.h"

namespace mydatamyconsent {
namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

ErrorType::eErrorType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("InvalidAccessToken")))
        return ErrorType::eErrorType::ErrorType_INVALIDACCESSTOKEN;
    if (val == utility::conversions::to_string_t(U("InvalidRefreshToken")))
        return ErrorType::eErrorType::ErrorType_INVALIDREFRESHTOKEN;
    if (val == utility::conversions::to_string_t(U("InsufficientPermission")))
        return ErrorType::eErrorType::ErrorType_INSUFFICIENTPERMISSION;
    if (val == utility::conversions::to_string_t(U("InternalServerError")))
        return ErrorType::eErrorType::ErrorType_INTERNALSERVERERROR;
    if (val == utility::conversions::to_string_t(U("BadRequest")))
        return ErrorType::eErrorType::ErrorType_BADREQUEST;
    if (val == utility::conversions::to_string_t(U("NotFound")))
        return ErrorType::eErrorType::ErrorType_NOTFOUND;
    if (val == utility::conversions::to_string_t(U("InvalidOrganization")))
        return ErrorType::eErrorType::ErrorType_INVALIDORGANIZATION;
    if (val == utility::conversions::to_string_t(U("InvalidFileUploadType")))
        return ErrorType::eErrorType::ErrorType_INVALIDFILEUPLOADTYPE;
    return {};
}

EnumUnderlyingType fromEnum(ErrorType::eErrorType e)
{
    switch (e)
    {
    case ErrorType::eErrorType::ErrorType_INVALIDACCESSTOKEN:
        return U("InvalidAccessToken");
    case ErrorType::eErrorType::ErrorType_INVALIDREFRESHTOKEN:
        return U("InvalidRefreshToken");
    case ErrorType::eErrorType::ErrorType_INSUFFICIENTPERMISSION:
        return U("InsufficientPermission");
    case ErrorType::eErrorType::ErrorType_INTERNALSERVERERROR:
        return U("InternalServerError");
    case ErrorType::eErrorType::ErrorType_BADREQUEST:
        return U("BadRequest");
    case ErrorType::eErrorType::ErrorType_NOTFOUND:
        return U("NotFound");
    case ErrorType::eErrorType::ErrorType_INVALIDORGANIZATION:
        return U("InvalidOrganization");
    case ErrorType::eErrorType::ErrorType_INVALIDFILEUPLOADTYPE:
        return U("InvalidFileUploadType");
    default:
        break;
    }
    return {};
}
}

ErrorType::ErrorType()
{
}

ErrorType::~ErrorType()
{
}

void ErrorType::validate()
{
    // TODO: implement validation
}

web::json::value ErrorType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool ErrorType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void ErrorType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool ErrorType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

ErrorType::eErrorType ErrorType::getValue() const
{
   return m_value;
}

void ErrorType::setValue(ErrorType::eErrorType const value)
{
   m_value = value;
}


}
}


