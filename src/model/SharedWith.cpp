/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/SharedWith.h"

namespace mydatamyconsent {
namespace models {



SharedWith::SharedWith()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_ReceiverId = utility::conversions::to_string_t("");
    m_ReceiverIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ContactNumber = utility::conversions::to_string_t("");
    m_ContactNumberIsSet = false;
    m_ProfileUrl = utility::conversions::to_string_t("");
    m_ProfileUrlIsSet = false;
    m_ExpiresAtUtc = utility::datetime();
    m_ExpiresAtUtcIsSet = false;
}

SharedWith::~SharedWith()
{
}

void SharedWith::validate()
{
    // TODO: implement validation
}

web::json::value SharedWith::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ReceiverIdIsSet)
    {
        val[utility::conversions::to_string_t(U("receiverId"))] = ModelBase::toJson(m_ReceiverId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_ContactNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("contactNumber"))] = ModelBase::toJson(m_ContactNumber);
    }
    if(m_ProfileUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("profileUrl"))] = ModelBase::toJson(m_ProfileUrl);
    }
    if(m_ExpiresAtUtcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAtUtc"))] = ModelBase::toJson(m_ExpiresAtUtc);
    }

    return val;
}

bool SharedWith::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("receiverId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("receiverId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReceiverId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReceiverId);
            setReceiverId(refVal_setReceiverId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contactNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contactNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContactNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContactNumber);
            setContactNumber(refVal_setContactNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("profileUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profileUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProfileUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProfileUrl);
            setProfileUrl(refVal_setProfileUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAtUtc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiresAtUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiresAtUtc);
            setExpiresAtUtc(refVal_setExpiresAtUtc);
        }
    }
    return ok;
}

void SharedWith::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ReceiverIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("receiverId")), m_ReceiverId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_ContactNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contactNumber")), m_ContactNumber));
    }
    if(m_ProfileUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profileUrl")), m_ProfileUrl));
    }
    if(m_ExpiresAtUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAtUtc")), m_ExpiresAtUtc));
    }
}

bool SharedWith::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("receiverId"))))
    {
        utility::string_t refVal_setReceiverId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("receiverId"))), refVal_setReceiverId );
        setReceiverId(refVal_setReceiverId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contactNumber"))))
    {
        utility::string_t refVal_setContactNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contactNumber"))), refVal_setContactNumber );
        setContactNumber(refVal_setContactNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("profileUrl"))))
    {
        utility::string_t refVal_setProfileUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profileUrl"))), refVal_setProfileUrl );
        setProfileUrl(refVal_setProfileUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAtUtc"))))
    {
        utility::datetime refVal_setExpiresAtUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAtUtc"))), refVal_setExpiresAtUtc );
        setExpiresAtUtc(refVal_setExpiresAtUtc);
    }
    return ok;
}

utility::string_t SharedWith::getId() const
{
    return m_Id;
}

void SharedWith::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SharedWith::idIsSet() const
{
    return m_IdIsSet;
}

void SharedWith::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SharedWith::getReceiverId() const
{
    return m_ReceiverId;
}

void SharedWith::setReceiverId(const utility::string_t& value)
{
    m_ReceiverId = value;
    m_ReceiverIdIsSet = true;
}

bool SharedWith::receiverIdIsSet() const
{
    return m_ReceiverIdIsSet;
}

void SharedWith::unsetReceiverId()
{
    m_ReceiverIdIsSet = false;
}
utility::string_t SharedWith::getName() const
{
    return m_Name;
}

void SharedWith::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SharedWith::nameIsSet() const
{
    return m_NameIsSet;
}

void SharedWith::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t SharedWith::getContactNumber() const
{
    return m_ContactNumber;
}

void SharedWith::setContactNumber(const utility::string_t& value)
{
    m_ContactNumber = value;
    m_ContactNumberIsSet = true;
}

bool SharedWith::contactNumberIsSet() const
{
    return m_ContactNumberIsSet;
}

void SharedWith::unsetContactNumber()
{
    m_ContactNumberIsSet = false;
}
utility::string_t SharedWith::getProfileUrl() const
{
    return m_ProfileUrl;
}

void SharedWith::setProfileUrl(const utility::string_t& value)
{
    m_ProfileUrl = value;
    m_ProfileUrlIsSet = true;
}

bool SharedWith::profileUrlIsSet() const
{
    return m_ProfileUrlIsSet;
}

void SharedWith::unsetProfileUrl()
{
    m_ProfileUrlIsSet = false;
}
utility::datetime SharedWith::getExpiresAtUtc() const
{
    return m_ExpiresAtUtc;
}

void SharedWith::setExpiresAtUtc(const utility::datetime& value)
{
    m_ExpiresAtUtc = value;
    m_ExpiresAtUtcIsSet = true;
}

bool SharedWith::expiresAtUtcIsSet() const
{
    return m_ExpiresAtUtcIsSet;
}

void SharedWith::unsetExpiresAtUtc()
{
    m_ExpiresAtUtcIsSet = false;
}
}
}


