/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MyDataMyConsent/model/BankAccountType.h"

namespace mydatamyconsent {
namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

BankAccountType::eBankAccountType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("SavingsAccount")))
        return BankAccountType::eBankAccountType::BankAccountType_SAVINGSACCOUNT;
    if (val == utility::conversions::to_string_t(U("CurrentAccount")))
        return BankAccountType::eBankAccountType::BankAccountType_CURRENTACCOUNT;
    return {};
}

EnumUnderlyingType fromEnum(BankAccountType::eBankAccountType e)
{
    switch (e)
    {
    case BankAccountType::eBankAccountType::BankAccountType_SAVINGSACCOUNT:
        return U("SavingsAccount");
    case BankAccountType::eBankAccountType::BankAccountType_CURRENTACCOUNT:
        return U("CurrentAccount");
    default:
        break;
    }
    return {};
}
}

BankAccountType::BankAccountType()
{
}

BankAccountType::~BankAccountType()
{
}

void BankAccountType::validate()
{
    // TODO: implement validation
}

web::json::value BankAccountType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool BankAccountType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void BankAccountType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool BankAccountType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

BankAccountType::eBankAccountType BankAccountType::getValue() const
{
   return m_value;
}

void BankAccountType::setValue(BankAccountType::eBankAccountType const value)
{
   m_value = value;
}


}
}


